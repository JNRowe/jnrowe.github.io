<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jnrowe.github.io/</id>
  <title>JNRowe - Posts tagged web</title>
  <updated>2009-10-12T00:00:00+01:00</updated>
  <link href="https://jnrowe.github.io/"/>
  <link href="https://jnrowe.github.io/blog/tag/web/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <subtitle>Ramblings of a tired mind</subtitle>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Instant_web_server.html</id>
    <title>Instant web server</title>
    <updated>2009-10-12T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="instant-web-server"&gt;

&lt;p&gt;Among the topics on our Linux list at work today was a question from Luke
Fletcher that I was expecting to unleash a flurry of emotional responses:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;What is the best small web server for testing site design and the like?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;There were a couple of predictable rants about the benefits and drawbacks of
threading models.  Along with a couple of other topics entirely unhelpful for
the question at hand, but surprisingly little dissent over the choices.&lt;/p&gt;
&lt;p&gt;Matt Traner’s reply sums up the general feeling quite nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Just use whatever server you have installed already.  If you don’t have
&lt;em&gt;any&lt;/em&gt; installed grab &lt;a class="reference external" href="http://nginx.net/"&gt;nginx&lt;/a&gt; as it works well and is quite small.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree with Matt’s answer but I want to point a couple of possibly non-obvious
web servers that they, and you, are likely to have installed already.&lt;/p&gt;
&lt;section id="busybox-applet"&gt;
&lt;h2&gt;Busybox applet&lt;/h2&gt;
&lt;p&gt;All our Linux systems at the office include &lt;a class="reference external" href="http://www.busybox.net/"&gt;busybox&lt;/a&gt;, and in the configuration
we use the &lt;a class="reference external" href="http://www.busybox.net/downloads/BusyBox.html#httpd"&gt;httpd&lt;/a&gt; applet is built.  It is very lightweight, and incredibly
stable.  I often use it when testing or as a weak way to transfer files between
hosts when &lt;a class="reference external" href="http://avahi.org/"&gt;avahi&lt;/a&gt; isn’t available or is too much hassle.  In my &lt;a class="reference external" href="http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html"&gt;bash&lt;/a&gt;
configuration I have a little functions to start up a &lt;strong class="command"&gt;busybox httpd&lt;/strong&gt;
server:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http_serve&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--help&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FUNCNAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; [location]&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Start a httpd in ‘location’, defaulting to ‘&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;http_serve_location&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;’.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    busybox httpd -f -p &lt;span class="m"&gt;8080&lt;/span&gt; -h &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;http_serve_location&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;http_serve_location&lt;/span&gt;&lt;/code&gt; is set elsewhere in my configuration file, so that I can
keep per-machine settings separate.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-built-in"&gt;
&lt;h2&gt;Python built-in&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; comes with its own basic web server, and it is very easy to use:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python2.6 -m SimpleHTTPServer &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="go"&gt;Serving HTTP on 0.0.0.0 port 8080 ...&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET / HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/content.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/design.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/pygments.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/microformats.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/print.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/voice.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; python3.1 -m http.server &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="go"&gt;Serving HTTP on 0.0.0.0 port 8080 ...&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:17:23] &amp;quot;GET /2009/10/12/TaD-Instant_web_server.html HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that the name of the module has changed from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SimpleHTTPServer&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;http.server&lt;/span&gt;&lt;/code&gt; for Python v3 and above.&lt;/p&gt;
&lt;p&gt;I’ve specified the port 8080 to both calls in the snippet above, by default the
server port would be 8000.  If port 8000 is acceptable for you then you can save
yourself five keystrokes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ruby-built-in"&gt;
&lt;h2&gt;Ruby built-in&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.ruby-lang.org/"&gt;ruby&lt;/a&gt; also comes with its own web server, one that you’re probably already
familiar with if you’re a &lt;a class="reference external" href="http://www.rubyonrails.org/"&gt;rails&lt;/a&gt; user, called &lt;a class="reference external" href="http://www.webrick.org/"&gt;webrick&lt;/a&gt;.  We need a little script
to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;webrick&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-ruby notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /usr/bin/ruby&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;webrick&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;WEBrick&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HTTPServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:BindAddress&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:Port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:DocumentRoot&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;trap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This script will serve files from whatever directory is specified as its first
argument.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bonus"&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;Python also comes with a &lt;abbr title="Common Gateway Interface"&gt;CGI&lt;/abbr&gt;-capable version
called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CGIHTTPServer&lt;/span&gt;&lt;/code&gt; and a &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt;-&lt;abbr title="Remote Procedure Call"&gt;RPC&lt;/abbr&gt; server
called — this shouldn’t come as a surprise — &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SimpleXMLRPCServer&lt;/span&gt;&lt;/code&gt;.  They’re
very useful for testing out ideas and concepts without having to set down lots
of code.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Instant_web_server.html" rel="alternate"/>
    <summary>Among the topics on our Linux list at work today was a question from Luke
Fletcher that I was expecting to unleash a flurry of emotional responses:</summary>
    <category term="devel" label="devel"/>
    <category term="web" label="web"/>
    <published>2009-10-12T00:00:00+01:00</published>
  </entry>
</feed>
