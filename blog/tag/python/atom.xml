<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jnrowe.github.io/</id>
  <title>JNRowe - Posts tagged python</title>
  <updated>2009-10-29T00:00:00+00:00</updated>
  <link href="https://jnrowe.github.io/"/>
  <link href="https://jnrowe.github.io/blog/tag/python/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <subtitle>Ramblings of a tired mind</subtitle>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Debugging_python_regexps.html</id>
    <title>Debugging Python RegEx</title>
    <updated>2009-10-29T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="debugging-python-regex"&gt;

&lt;p&gt;Rob Sampson is learning &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; and struggling to get to grips with its
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; handling.  He asks on one of our internal lists at the office:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I’ve written what I believe to be a valid &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; to perform matches on
some data, and I can’t figure out why it isn’t matching on my input.
Any clues about where to look?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The answer to these types of questions is more often than not one of two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Failure to use &lt;a class="reference external" href="http://docs.python.org/tutorial/introduction.html#strings"&gt;raw strings&lt;/a&gt; when including backslashes in the &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choosing to use a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; when a better tool for the job exists&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="using-raw-strings"&gt;
&lt;h2&gt;Using raw strings&lt;/h2&gt;
&lt;p&gt;In Rob’s code he had failed to take in to account the backslash escaping
problem.  A simplified example of what he was trying to do would be:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; ([0-9]+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;[a-z]+) &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make 123\match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;[]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="c1"&gt;# Whereas with raw strings this match will work&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; ([0-9]+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;[a-z]+) &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make 123\match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;123\\match&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Without the raw string, specified by the preceding &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;r&lt;/span&gt;&lt;/code&gt; in our pattern, the
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; parser is actually looking for a literal &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/code&gt; where we’ve intended
to use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/code&gt; as the start of a character set.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;There is another important point here too as the example above uses
character ranges, just as Rob’s original did.  As in most &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; engines
Python has inbuilt support for certain character classes, and they are
often more functional than the simple character ranges.  The big win with
Python’s character classes is that they can be locale and/or Unicode
aware by specifying the &lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.LOCALE" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.LOCALE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; or &lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.UNICODE&lt;/span&gt;&lt;/code&gt; flags.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;These types of string escaping problems are common, and as your &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;
becomes more complex their likelihood increases greatly.  Python, as is often
the case, has the answer and it comes in the shape of the &lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.DEBUG" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.DEBUG&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
flag.  The &lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.DEBUG" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.DEBUG&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; flag displays a parse tree allowing you to easily
inspect the &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; you have constructed:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; ([0-9]+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;[a-z]+) &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make 123\match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;literal 32&lt;/span&gt;
&lt;span class="go"&gt;subpattern 1&lt;/span&gt;
&lt;span class="go"&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class="go"&gt;    in&lt;/span&gt;
&lt;span class="go"&gt;    range (48, 57)&lt;/span&gt;
&lt;span class="go"&gt;literal 91&lt;/span&gt;
&lt;span class="go"&gt;literal 97&lt;/span&gt;
&lt;span class="go"&gt;literal 45&lt;/span&gt;
&lt;span class="go"&gt;literal 122&lt;/span&gt;
&lt;span class="go"&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class="go"&gt;    literal 93&lt;/span&gt;
&lt;span class="go"&gt;literal 32&lt;/span&gt;
&lt;span class="go"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here we can see that our expression matches &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;range&lt;/span&gt; &lt;span class="pre"&gt;(48,&lt;/span&gt; &lt;span class="pre"&gt;57)&lt;/span&gt;&lt;/code&gt;, 48 and 57 being
the &lt;a class="reference external" href="http://docs.python.org/library/functions.html"&gt;ordinal&lt;/a&gt; for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;9&lt;/span&gt;&lt;/code&gt; respectively.  Following that we see a match
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;literal&lt;/span&gt; &lt;span class="pre"&gt;91&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;chr(91)&lt;/span&gt;&lt;/code&gt; shows us that the character we are matching is
a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/code&gt;.  With this information it is easy to see where the problem is.&lt;/p&gt;
&lt;p&gt;If you need to use more than one flag, such as the often useful
&lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.VERBOSE" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.VERBOSE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; flag, you can combine them with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;|&lt;/span&gt;&lt;/code&gt; (bitwise OR) as the
flags are just named constants(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;DEBUG&lt;/span&gt;&lt;/code&gt; is 128 for example).&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; (\d+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;\w+) &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make 123\match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCALE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;literal 32&lt;/span&gt;
&lt;span class="go"&gt;subpattern 1&lt;/span&gt;
&lt;span class="go"&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class="go"&gt;    in&lt;/span&gt;
&lt;span class="go"&gt;    category category_digit&lt;/span&gt;
&lt;span class="go"&gt;literal 92&lt;/span&gt;
&lt;span class="go"&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class="go"&gt;    in&lt;/span&gt;
&lt;span class="go"&gt;    category category_word&lt;/span&gt;
&lt;span class="go"&gt;literal 32&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;123\\match&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="better-tools"&gt;
&lt;h2&gt;Better tools&lt;/h2&gt;
&lt;p&gt;Often, a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; is the hammer of choice for far too many tasks for far too
many people(myself included).  There are often much better choices, some of
which are very domain specific and some quite general.&lt;/p&gt;
&lt;p&gt;For any moderately complex parsing job &lt;a class="reference external" href="http://pyparsing.wikispaces.com/"&gt;pyparsing&lt;/a&gt; is a great choice.  The
syntax is quite readable and the parser is very fast.  Just make sure you
ignore any examples telling you to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;pyparsing&lt;/span&gt; &lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; as you’ll
evoke great rage in every person who reads your code.&lt;/p&gt;
&lt;p&gt;While &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyparsing&lt;/span&gt;&lt;/code&gt; is a good general parsing tool it would be overkill for
the task at hand, but it doesn’t hurt to show a simple example of
constructing a parser:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyparsing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alphas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;make 123&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;([&amp;#39;make&amp;#39;, &amp;#39;123&amp;#39;, &amp;#39;\\&amp;#39;, &amp;#39;match&amp;#39;, &amp;#39; &amp;#39;], {})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another exceptional tool for tasks that people often abuse &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; for is
&lt;a class="reference external" href="http://labix.org/python-dateutil"&gt;python-dateutil&lt;/a&gt;.  One of the reasons I occasionally turn to this module is
that Python’s &lt;a class="reference external" href="https://docs.python.org/3/library/time.html#time.strptime" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;time.strptime()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; isn’t even capable of parsing timestamps
created by &lt;a class="reference external" href="https://docs.python.org/3/library/time.html#time.strftime" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;time.strftime()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, for example if you use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%z&lt;/span&gt;&lt;/code&gt; in the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;strftime&lt;/span&gt;&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;All too often you see people trying to solve date parsing problems with
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; and heaps of &lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;int()&lt;/span&gt;&lt;/code&gt; calls to mangle the matches.  Not only is this
a very brittle approach, but the &lt;a class="reference external" href="http://labix.org/"&gt;labix&lt;/a&gt; guys have solved this problem for you
already:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dateutil&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009 10 30 23:35:16+0400&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2009, 10, 30, 23, 35, 16, tzinfo=tzoffset(None, 14400))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If you use &lt;a class="reference external" href="http://labix.org/python-dateutil"&gt;python-dateutil&lt;/a&gt; do be aware that by default it will prefer US
mid-endian date formats when guessing for some patterns.  Either create your
own &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;parserinfo&lt;/span&gt;&lt;/code&gt; object and set &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dayfirst&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;True&lt;/span&gt;&lt;/code&gt;, or use something
stricter.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In closing before you start parsing any text — regardless of how simple it is
— you should thumb through the &lt;a class="reference external" href="http://docs.python.org/library/"&gt;standard library&lt;/a&gt; and perform a search on
&lt;a class="reference external" href="http://pypi.python.org/pypi"&gt;pypi&lt;/a&gt;.  Often, the work has already been done for you and may well be much
better than the hurried version you were about to cobble together with
a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Debugging_python_regexps.html" rel="alternate"/>
    <summary>Rob Sampson is learning Python and struggling to get to grips with its
RegEx handling.  He asks on one of our internal lists at the office:</summary>
    <category term="python" label="python"/>
    <published>2009-10-29T00:00:00+00:00</published>
  </entry>
</feed>
