<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jnrowe.github.io/</id>
  <title>JNRowe - Posts tagged qmv</title>
  <updated>2022-03-11T11:45:57.908252+00:00</updated>
  <link href="https://jnrowe.github.io/"/>
  <link href="https://jnrowe.github.io/blog/tag/qmv/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <subtitle>Ramblings of a tired mind</subtitle>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/readline_rename_imv.html</id>
    <title>File renaming for the lazy</title>
    <updated>2018-10-26T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="file-renaming-for-the-lazy"&gt;

&lt;p&gt;Over at HN in a &lt;a class="reference external" href="https://news.ycombinator.com/item?id=18290344"&gt;stolen topic&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;however, i miss one feature for which i’d use a filemanager: in-place file
renaming. in most cases when i want to rename a file, i want to change
a small part of it, and i don’t want to have to retype the whole filename.&lt;/p&gt;
&lt;p&gt;i have yet to find a commandline utility (emacs doesn’t count ;-) that
offers that.&lt;/p&gt;
&lt;p class="attribution"&gt;—em-bee&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;There a few interesting replies there, but I want to flesh out my replies
a little after the fact.&lt;/p&gt;
&lt;section id="the-new-tool-solution"&gt;
&lt;h2&gt;The new tool solution&lt;/h2&gt;
&lt;p&gt;My initial reply was&lt;a class="footnote-reference brackets" href="#id3" id="id1"&gt;1&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If I’m understanding you correctly, then &lt;a class="reference external" href="http://www.nongnu.org/renameutils/"&gt;renameutils&lt;/a&gt;’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; is a great
tool for this.  &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt; &lt;span class="pre"&gt;$filename&lt;/span&gt;&lt;/code&gt; pops you in to a &lt;a class="reference external" href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html"&gt;readline&lt;/a&gt; enabled prompt
to edit &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$filename&lt;/span&gt;&lt;/code&gt;.  Given that it is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readline&lt;/span&gt;&lt;/code&gt; you can even add
extra options in your &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.inputrc&lt;/span&gt;&lt;/code&gt; to add additional features to it,
I have mappings for custom directory prefixes for example.&lt;/p&gt;
&lt;p&gt;It also comes with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;qmv&lt;/span&gt;&lt;/code&gt;, which will pop open an editor for you to
perform inplace edits on filenames.   Which is kinda like &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Dired"&gt;dired&lt;/a&gt; as an
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt; comparison, at least if you squint an awful lot.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I recommend &lt;a class="reference external" href="http://www.nongnu.org/renameutils/"&gt;renameutils&lt;/a&gt; a lot.  I’ve given talks that have digressed in to
“why you should use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;qmv&lt;/span&gt;&lt;/code&gt;”, I’ve mocked co-workers when I’ve spotted them
doing things &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; would be a billion times better for, and it looks like
I even &lt;a class="reference external" href="https://bugs.gentoo.org/show_bug.cgi?id=64479"&gt;pimped it&lt;/a&gt; to distro folks in the past&lt;a class="footnote-reference brackets" href="#id4" id="id2"&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I sped across the usage in the HN comment, but there is some interesting
functionality hidden in there.  As stated, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readline&lt;/span&gt;&lt;/code&gt; so you
have an enormous amount of &lt;a class="reference external" href="https://tiswww.cwru.edu/php/chet/readline/rluserman.html"&gt;editing power&lt;/a&gt; at your disposal, and it is all the
same stuff you have in your shell; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;M-{b,f}&amp;gt;&lt;/span&gt;&lt;/code&gt; word jumps, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;M-C-]&amp;gt;&lt;/span&gt;&lt;/code&gt;
character searches, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-t&amp;gt;&lt;/span&gt;&lt;/code&gt; to transpose typo fixes, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;M-[count]&amp;gt;&lt;/span&gt;&lt;/code&gt; repeats,
and many more.&lt;/p&gt;
&lt;p&gt;I also hinted at config file support.  &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.inputrc&lt;/span&gt;&lt;/code&gt;, or whatever
&lt;span class="target" id="index-0"&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal notranslate"&gt;&lt;span class="pre"&gt;$INPUTRC&lt;/span&gt;&lt;/code&gt; points at, can be used to change the behaviour of all
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readline&lt;/span&gt;&lt;/code&gt; using tools.  Excitingly though, it can also be used to change the
behaviour of specific tools only.&lt;/p&gt;
&lt;p&gt;For example, I often find myself writing throwaway scripts that I suddenly
decide I’ll want again in the future.  When that happens they move to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt;, and I can do that with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; by tapping &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-v&amp;gt;&lt;/span&gt;&lt;/code&gt; at the
prompt.  This is really useful when I want to rename &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;foo.sh&lt;/span&gt;&lt;/code&gt; to
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.local/bin/change_the_world.sh&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$if imv
    set expand-tilde on
    C-v: &amp;#39;\C-a~/.local/bin\C-i&amp;#39;
$endif
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The above snippet might deserve a little explanation.  The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-v&amp;gt;&lt;/span&gt;&lt;/code&gt; mapping
inputs &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-a&amp;gt;&lt;/span&gt;&lt;/code&gt; to move to the beginning of the line, the literal string
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt;, and finally the tab character(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-i&amp;gt;&lt;/span&gt;&lt;/code&gt;)  to expand the tilde
for me.&lt;/p&gt;
&lt;p&gt;Obviously, you can place whatever you want in there.  And if you take advantage
of the application guard as above, you can even override bindings that you
won’t find yourself using in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; without breaking your shell or other
tools.&lt;/p&gt;
&lt;figure class="align-default" id="id5"&gt;
&lt;a class="reference external image-reference" href="https://xkcd.com/1806/"&gt;&lt;img alt="Borrow Your Laptop" src="../../_images/borrow_your_laptop.png" style="width: 167.0px; height: 246.5px;" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;As always, &lt;a class="reference external" href="https://xkcd.com/"&gt;xkcd&lt;/a&gt; has a pre-canned explanation for why you shouldn’t listen
to me.  Image: &lt;a class="reference external" href="http://creativecommons.org/licenses/by-nc/2.5/"&gt;CC by-nc&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="the-old-tool-solution"&gt;
&lt;h2&gt;The old tool solution&lt;/h2&gt;
&lt;p&gt;My other comment there was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If you’re a &lt;a class="reference external" href="https://www.zsh.org/"&gt;zsh&lt;/a&gt; user you can also use the other &lt;a class="reference external" href="https://linux.die.net/man/1/zshexpn"&gt;zshexpn(1)&lt;/a&gt; stuff too.
Like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mv&lt;/span&gt; &lt;span class="pre"&gt;file.ext{,(:r)}&lt;/span&gt;&lt;/code&gt; to perform &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mv&lt;/span&gt; &lt;span class="pre"&gt;file.ext&lt;/span&gt; &lt;span class="pre"&gt;file&lt;/span&gt;&lt;/code&gt;, or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:l&lt;/span&gt;&lt;/code&gt; to
lowercase a filename, or any number of other sometimes useful(and often
pointless things).  I’ve used &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:l&lt;/span&gt;&lt;/code&gt; a number of times, but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:s&lt;/span&gt;&lt;/code&gt; for
substitution is probably the most useful in general.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;If you’re already using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt; (and you should be!), you have an enormously
powerful suite of functionality at your fingertips for every task including
simple renames.&lt;/p&gt;
&lt;p&gt;I’ll show a few examples from a &lt;a class="reference external" href="https://linux.die.net/man/1/script"&gt;quick interactive session&lt;/a&gt; to hopefully make
the point.&lt;/p&gt;
&lt;div class="highlight-zsh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$   &lt;span class="c1"&gt;# Real file names from my shared tips folder; co-workers look at&lt;/span&gt;
$   &lt;span class="c1"&gt;# ``~JNRowe/public/tips`` for the actual content ;)&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; xclip.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:r&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Remove extension&lt;/span&gt;
xclip.rst xclip
$ &lt;span class="nb"&gt;echo&lt;/span&gt; tile_in_60_seconds.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:u&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Change to all caps&lt;/span&gt;
tile_in_60_seconds.rst TILE_IN_60_SECONDS.RST
$ &lt;span class="nb"&gt;echo&lt;/span&gt; fzf_pkg_manager.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:u:A&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Change to all caps, and make path absolute&lt;/span&gt;
fzf_pkg_manager.rst /home/jay/export/public/tips/FZF_PKG_MANAGER.RST
$ &lt;span class="nb"&gt;echo&lt;/span&gt; dc.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:e&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Extract only extension&lt;/span&gt;
dc.rst rst
$ &lt;span class="nb"&gt;echo&lt;/span&gt; ogrmerge_layer_cake.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:A:h:h&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Extract parent directory from file&lt;/span&gt;
ogrmerge_layer_cake.rst /home/jay/export/public
$ &lt;span class="nb"&gt;echo&lt;/span&gt; xclip.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:s/clip/sel&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Apply substitution of “clip” to “sel”&lt;/span&gt;
xclip.rst xsel.rst
$ &lt;span class="nb"&gt;echo&lt;/span&gt; emacs_explore.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:s/e/X&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Apply substitution of “e” to “X”&lt;/span&gt;
emacs_explore.rst Xmacs_explore.rst
$ &lt;span class="nb"&gt;echo&lt;/span&gt; emacs_explore.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:gs/e/X&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# … add the g flag for global replace&lt;/span&gt;
emacs_explore.rst Xmacs_XxplorX.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Order matters.  For example: in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(:u:A)&lt;/span&gt;&lt;/code&gt; example above we apply the
uppercase filter first, and then convert to an absolute path.  If we’d
reversed the modifiers the &lt;em&gt;entire&lt;/em&gt; path would be converted to uppercase.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The modifiers are &lt;em&gt;hugely&lt;/em&gt; powerful, and are definitely worth the effort to
learn in my opinion.  Combined with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readline&lt;/span&gt;&lt;/code&gt; emulation that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt;
provides you can do some amazing things at the prompt.&lt;/p&gt;
&lt;p&gt;They’re also available in non-interactive mode when writing scripts, and that
is probably when they’re at their most useful as you can apply them to other
constructs such as arrays as well.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;If you become accustomed to working with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt; and its advanced
modifiers, then be sure to take a look at &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zmv&lt;/span&gt;&lt;/code&gt; which is bundled with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt;.  It provides a nice interface to copying and moving files that
makes heavy use of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt;’s advanced features.  You may find it suits your
way of working better than &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;qmv&lt;/span&gt;&lt;/code&gt; for example.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="thoughts"&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Small tools that do incredible things are &lt;em&gt;everywhere&lt;/em&gt;, I clearly love
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;renameutils&lt;/span&gt;&lt;/code&gt; but I’d also like to hear about those things you enjoy too.
Drop me a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;, link me a blog post or stop me in the corridor to tell me
about them.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id3"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Lightly edited, because useful markup exists outside of HN.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;So long ago that &lt;em&gt;I&lt;/em&gt; was surprised to find that out from a &lt;a class="reference external" href="http://www.rpcurnow.force9.co.uk/mairix/"&gt;mairix&lt;/a&gt;
search to look for times when I’ve mentioned it.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/readline_rename_imv.html" rel="alternate"/>
    <summary>Over at HN in a stolen topic:however, i miss one feature for which i’d use a filemanager: in-place file
renaming. in most cases when i want to rename a file, i want to change
a small part of it, and i don’t want to have to retype the whole filename.Borrow Your Laptop</summary>
    <category term="readline" label="readline"/>
    <category term="imv" label="imv"/>
    <category term="qmv" label="qmv"/>
    <category term="renameutils" label="renameutils"/>
    <published>2018-10-26T00:00:00+01:00</published>
  </entry>
</feed>
