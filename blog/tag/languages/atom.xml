<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jnrowe.github.io/</id>
  <title>JNRowe - Posts tagged languages</title>
  <updated>2022-03-11T11:45:56.588377+00:00</updated>
  <link href="https://jnrowe.github.io/"/>
  <link href="https://jnrowe.github.io/blog/tag/languages/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <subtitle>Ramblings of a tired mind</subtitle>
  <entry>
    <id>https://jnrowe.github.io/articles/new_love_giddiness.html</id>
    <title>Giddy new project love</title>
    <updated>2018-12-04T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="giddy-new-project-love"&gt;

&lt;p&gt;I’ve recently inherited a new tier-one project, which is great news!  Sadly, it
is in real need of some Tender Loving Care™.  Was there ever an inherited
project that wasn’t?&lt;/p&gt;
&lt;p&gt;The project is our semi-custom transpiler for &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; affectionately called
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt;.  I say semi-custom as it was spun out from a consortium effort to
“facilitate reliability and improve portability” of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; projects, which is
a far loftier sounding goal than it need be.  In essence, it is the
codification of rules and guidelines we’ve adhered to since a partner meeting
in &lt;em&gt;1996&lt;/em&gt;, and that we find ourselves still following today&lt;a class="footnote-reference brackets" href="#id4" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wasn’t around back when the original group was formed, and it was disbanded
before I’d even heard of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt;.  This project is genuinely
multi-generational, which &lt;em&gt;feels&lt;/em&gt; nice.  All too often our work in software can
feel ephemeral; squeaked on a whiteboard in the morning, tapped in to
a computer in the afternoon and swept away by the janitors as night falls.&lt;/p&gt;
&lt;section id="hopes-and-dreams"&gt;
&lt;h2&gt;Hopes and dreams&lt;/h2&gt;
&lt;p&gt;As the project &lt;em&gt;should&lt;/em&gt; have significant longevity I find myself pondering the
future.  &lt;em&gt;If&lt;/em&gt; I could change things for the next 20 years, what should I do to
make that experience better?  Should I do &lt;em&gt;nothing at all&lt;/em&gt; and just chug along
reducing the anxiety that even small changes will evoke?&lt;/p&gt;
&lt;p&gt;I also find myself pondering the present.  Could a truly radical change &lt;em&gt;today&lt;/em&gt;
obviate the need for this project entirely before the next maintainer grabs the
reins for their reign of anxiety?  Would that necessarily be a good thing?&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Common errors&lt;/p&gt;
&lt;p&gt;I’ve always considered it odd that we can choose to attach a listing of
common errors to a product and expect people to use it.  If we know it is
common for users to make critical errors because of a design decision we
need to make a new design, not a new bullet point on the list.&lt;/p&gt;
&lt;p&gt;Even simple things like watching an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; beginner make the classic
“atomic means atomic” mistake should be designed out, and not &lt;em&gt;solved&lt;/em&gt; with
an addendum of “protected objects mean atomic” chicanery.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Many of the advantages that we associate with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; — such as its mighty type
safety — no longer feel that advanced or remotely unique.  Even “hobby”
languages such as &lt;a class="reference external" href="https://nim-lang.org/"&gt;nim&lt;/a&gt; implement many of the safety features we expect from
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; implementations&lt;a class="footnote-reference brackets" href="#id5" id="id2"&gt;2&lt;/a&gt;; subrange types being a fine example where the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nim&lt;/span&gt;&lt;/code&gt; designers have absorbed an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; feature.  And standard everyday
languages now often have tooling that is capable of providing &lt;em&gt;many&lt;/em&gt; of the
benefits of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt;, and one should really only expect this to increase.&lt;/p&gt;
&lt;p&gt;What really hammers home the point here is that a good number of the features
one thinks about weren’t even available in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; began; fex
contracts are from &lt;a class="reference external" href="http://www.ada2012.org/"&gt;Ada 2012&lt;/a&gt;.  Will languages leapfrog &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; in its niche
by borrowing and then sprint away by innovating as their uptake increases?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benefits-of-transpilation"&gt;
&lt;h2&gt;Benefits of transpilation&lt;/h2&gt;
&lt;p&gt;The original &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; authors implemented a transpiler because it made
various checks simpler to carry out.  According to the documentation, it was
never intended to become a full blown language in its own right… which of
course it has.&lt;/p&gt;
&lt;p&gt;Maybe we should take the opportunity to stay on top of the changing language
landscape thanks to the side effect of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt;’s implementation details.
Given that we’re already transpiling should we consider alternative targets?
&lt;a class="reference external" href="http://www.ocaml.org/"&gt;ocaml&lt;/a&gt; is the language that immediately jumps to mind, as it is syntactically
close to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; and it has an excellent type system.  And once you have
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ocaml&lt;/span&gt;&lt;/code&gt; it is a smaller step to &lt;a class="reference external" href="http://fsharp.org/"&gt;F#&lt;/a&gt; thanks to its legacy &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ocaml&lt;/span&gt;&lt;/code&gt; mode.&lt;/p&gt;
&lt;p&gt;The code base is amenable to multiple targets already.  A couple of years ago
I implemented support for testing without relying on the support kernel
supplied by our compiler vendor&lt;a class="footnote-reference brackets" href="#id6" id="id3"&gt;3&lt;/a&gt;.  At its base &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; will optionally
generate &lt;a class="reference external" href="http://www.lua.org/"&gt;lua&lt;/a&gt; bytecode that is loaded in to a tiny emulator which can be driven
by other &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lua&lt;/span&gt;&lt;/code&gt; scripts to test an implementation.  Its main purpose was to
allow early experimentation without the expense and time of waiting for
hardware re-fabrication.&lt;/p&gt;
&lt;figure class="align-default" id="id7"&gt;
&lt;img alt="sandfly debug architecture" src="../../_images/sandfly_use.png" style="width: 279.5px; height: 358.0px;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;As you can see from example usage, it’s source-to-source all the way down.
If I’m writing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lua&lt;/span&gt;&lt;/code&gt; I’m using &lt;a class="reference external" href="https://github.com/leafo/moonscript/"&gt;moonscript&lt;/a&gt;, and so should you!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I’m not sure it would even be a great stretch to change the main target, there
would likely be significant support for it in fact.  It has already been
suggested that we should exclusively switch to &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/SPARK_(programming_language)"&gt;spark&lt;/a&gt; on a number of occasions,
especially since the reformation in Spark 2014.  If we could figure out the
safety certification story I’m sure there would be a lot of traction for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;F#&lt;/span&gt;&lt;/code&gt;
as default.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="final-thoughts"&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Open Sourcing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There have been a few enquiries as to whether this work is Open Source, and
sadly it isn’t.  However, if you work for one of the Atlas Consortium
companies(or a significant partner of one) it is easy to arrange “source
available” access.  I &lt;em&gt;know&lt;/em&gt; this isn’t the same thing, but it is the
current situation.&lt;/p&gt;
&lt;p&gt;The good news is that I’ve added an item to the issue tracker that includes
making it Open Source, the bad news is that there is a lot of work needed
— both by me and &lt;em&gt;many&lt;/em&gt; others — to make that happen.  I’ve kicked the
initial process off by contacting legal for guidance, we’ll see what
happens.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I’ve always really appreciated &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Vala_(programming_language)"&gt;vala&lt;/a&gt;’s alternative syntax support; &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/C_Sharp_(programming_language)"&gt;C#&lt;/a&gt; by
default, but with first class support for &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Genie_(programming_language)"&gt;genie&lt;/a&gt;’s &lt;a class="reference external" href="http://boo-lang.org/"&gt;boo&lt;/a&gt;-inspired syntax.
I find myself thinking how nice it would be to emulate that and have multiple
frontends, &lt;em&gt;and&lt;/em&gt; the previously described backends.&lt;/p&gt;
&lt;p&gt;In fact I find myself thinking about &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vala&lt;/span&gt;&lt;/code&gt; a lot as I write this.  It never
had the uptake I would have hoped for when I first read about it.  It has
however had a &lt;em&gt;huge&lt;/em&gt; impact in the places where it has been used.  That surely
makes it a great role model for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; going forward.  It is better to be
an elusive Aston Martin &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Aston_Martin_DB5"&gt;DB-5&lt;/a&gt; than a common as muck &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Ford_Focus"&gt;Ford Focus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, I’m deep in a pre-reality dream state where I want to add heaps of amazing
new features and functionality, coupled with a cold light of day feeling that
it could be nice to kill the project by transforming it in to a gateway out of
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt;.  It could be the best &lt;em&gt;or&lt;/em&gt; worst project in the history of the world!
I’m genuinely excited.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;It should be easy to guess why this project is being handed on, given
that we’re talking about a twenty-one year old endeavour.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This isn’t meant to disparage &lt;a class="reference external" href="https://nim-lang.org/"&gt;nim&lt;/a&gt;, as it is really quite interesting.
I mean it purely in the sense that we haven’t &lt;em&gt;yet&lt;/em&gt; seen large industry
adoption.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I’m of the &lt;em&gt;strong&lt;/em&gt; opinion that vendors who forbid you from naming,
shaming and even benchmarking them should be avoided at &lt;em&gt;all costs&lt;/em&gt;.
However, I’m not on the procurement board and didn’t get to make that
decision.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/new_love_giddiness.html" rel="alternate"/>
    <summary>I’ve recently inherited a new tier-one project, which is great news!  Sadly, it
is in real need of some Tender Loving Care™.  Was there ever an inherited
project that wasn’t?sandfly debug architecture</summary>
    <category term="tools" label="tools"/>
    <category term="projects" label="projects"/>
    <category term="languages" label="languages"/>
    <published>2018-12-04T00:00:00+00:00</published>
  </entry>
</feed>
