<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jnrowe.github.io/</id>
  <title>JNRowe - Posts tagged evil</title>
  <updated>2022-03-11T11:45:56.178832+00:00</updated>
  <link href="https://jnrowe.github.io/"/>
  <link href="https://jnrowe.github.io/blog/tag/evil/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <subtitle>Ramblings of a tired mind</subtitle>
  <entry>
    <id>https://jnrowe.github.io/articles/evil_emacs_steals_my_heart.html</id>
    <title>Evil Emacs steals my heart</title>
    <updated>2018-11-05T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="evil-emacs-steals-my-heart"&gt;

&lt;p&gt;&lt;em&gt;Many&lt;/em&gt; of my co-workers use &lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;, it is probably the most popular editor on
our team and I understand why.&lt;/p&gt;
&lt;img alt="Editor icons" class="align-right" src="../../_images/standoff.png" /&gt;
&lt;p&gt;I was an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; user — via &lt;a class="reference external" href="ftp://ftp.cs.helsinki.fi/pub/Software/Local/uEmacs-PK/"&gt;MicroEMACS&lt;/a&gt; and later &lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;GNU Emacs&lt;/a&gt; — for many
years but at some point I switched to &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;vim&lt;/a&gt;.  I can’t even remember the exact
catalyst for change, but I am pretty fickle so it may not have even been all
that important.&lt;/p&gt;
&lt;p&gt;Lately, I’ve found myself diving back in to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;.  In large part this is
because of &lt;a class="reference external" href="https://github.com/emacs-evil/evil"&gt;evil&lt;/a&gt;; I can be &lt;em&gt;in&lt;/em&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;, but &lt;em&gt;live&lt;/em&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;section id="evil-isnt-always-evil"&gt;
&lt;h2&gt;Evil isn’t always evil&lt;/h2&gt;
&lt;p&gt;So, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;evil-mode&lt;/span&gt;&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; awesome.&lt;/p&gt;
&lt;p&gt;The kindest thing I can think to say about it is this: You’ll be angry when it
doesn’t work&lt;/p&gt;
&lt;p&gt;This isn’t because it often breaks, quite the contrary.  It is simply because
it feels largely seamless.  I’ll give an example that mimics a recent session
to make my point.  For example, you’re hovering over a number you need to
change:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;magic_const&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;974&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;, you can execute &lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;ciw&amp;lt;C&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;r&amp;gt;=&amp;#64;&amp;quot;/2&amp;lt;CR&amp;gt;&lt;/kbd&gt;&lt;/kbd&gt; to cleave the number.  The
command itself is saying:&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;ciw&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change the word my cursor is on(&lt;kbd class="kbd docutils literal notranslate"&gt;c&lt;/kbd&gt;hange &lt;kbd class="kbd docutils literal notranslate"&gt;i&lt;/kbd&gt;nner &lt;kbd class="kbd docutils literal notranslate"&gt;w&lt;/kbd&gt;ord)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;&amp;lt;C&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;r&amp;gt;=&lt;/kbd&gt;&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Insert the result of an expression(see &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:h&lt;/span&gt; &lt;span class="pre"&gt;i_CTRL-R_=&lt;/span&gt;&lt;/code&gt; for awesomeness)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;&amp;#64;&amp;quot;&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use the text from last filled register, ie the text we just marked to be
changed&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;/2&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Half it&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;&amp;lt;CR&amp;gt;&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Wow.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;magic_const&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;487&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Whilst performing the same task thing in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;evil-mode&lt;/span&gt;&lt;/code&gt; I receive an error.
Emacs — quite rightly — expects you to write an &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Elisp"&gt;elisp&lt;/a&gt; expression.  There is
nothing wrong with this, but it is a sign of how good &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;evil-mode&lt;/span&gt;&lt;/code&gt; is.  It is
literally &lt;em&gt;so&lt;/em&gt; good I forget I’m not using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Oftentimes a tool’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; emulation can be summed up as needing to press
a key that kind of matches what something in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; might be, assuming you
didn’t really know what the key might be or when you’d use it.  Be that
&lt;a class="reference external" href="https://www.sublimetext.com"&gt;sublimetext&lt;/a&gt;’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vintage&lt;/span&gt;&lt;/code&gt; package that isn’t much more than normal and insert
mode, or &lt;a class="reference external" href="https://github.com/gentoo/elogv"&gt;elogv&lt;/a&gt;’s bindings that mean you have to issue &lt;kbd class="kbd docutils literal notranslate"&gt;dd&lt;/kbd&gt; to kill an
entry.  Frankly, many of the emulation layers often feel like you’re just
doubling the number of keys you have to press without any benefits&lt;a class="footnote-reference brackets" href="#id4" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="quirking-the-quirky"&gt;
&lt;h2&gt;Quirking the quirky&lt;/h2&gt;
&lt;img alt="Emacs screenshot" class="align-right" src="../../_images/evil_emacs.png" style="width: 407.5px; height: 270.0px;" /&gt;
&lt;p&gt;I’ll freely admit I’ve &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;ified my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;.  I use &lt;a class="reference external" href="https://github.com/emacs-evil/evil"&gt;evil&lt;/a&gt;, my mode line
uses &lt;a class="reference external" href="http://github.com/milkypostman/powerline/"&gt;powerline&lt;/a&gt; to match &lt;a class="reference external" href="https://github.com/vim-airline/vim-airline"&gt;vim-airline&lt;/a&gt;.  I have &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zap-up-to-char&lt;/span&gt;&lt;/code&gt; mapped so
that I can mimic &lt;kbd class="kbd docutils literal notranslate"&gt;dt&lt;/kbd&gt; when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;evil-mode&lt;/span&gt;&lt;/code&gt; is disabled.&lt;/p&gt;
&lt;p&gt;Screenshots for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; really aren’t all that useful, because it
is the workflow that makes these tools powerful… but, above is my current
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; and below is my current &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;img alt="vim screenshot" class="align-left" src="../../_images/delinquent_vim.png" style="width: 422.0px; height: 263.5px;" /&gt;
&lt;p&gt;The big thing you’ll notice is the fonts.  In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; I’m using scaled text
for headings in &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/rst/"&gt;reST&lt;/a&gt; files.  I’m close to believing that headings,
proportional fonts for comments and the occasional inline image are enough to
switch to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;img alt="Inline images in Emacs" class="align-right" src="../../_images/misfeasant_emacs.png" style="width: 398.5px; height: 225.0px;" /&gt;
&lt;p&gt;In the third image you can see &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; is &lt;em&gt;displaying&lt;/em&gt; the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;
screenshot in the buffer for &lt;em&gt;this&lt;/em&gt; post.  This example may be quite pointless&lt;a class="footnote-reference brackets" href="#id5" id="id2"&gt;2&lt;/a&gt;, but it can be nice to have &lt;a class="reference external" href="https://www.graphviz.org/"&gt;graphviz&lt;/a&gt; output class hierarchies in to
a buffer or database schema popups(like below).&lt;/p&gt;
&lt;img alt="Schema diagram" class="align-left" src="../../_images/immoral_model.png" style="width: 174.5px; height: 141.5px;" /&gt;
&lt;/section&gt;
&lt;section id="walking-the-branches"&gt;
&lt;h2&gt;Walking the branches&lt;/h2&gt;
&lt;p&gt;I’ve decided to really dig in this time, not just switch on a whim.  I’m using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; and &lt;em&gt;only&lt;/em&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; for a month, followed by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; and &lt;em&gt;only&lt;/em&gt;
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; for a month.  I’m busily writing a document of bugbears about both&lt;a class="footnote-reference brackets" href="#id6" id="id3"&gt;3&lt;/a&gt;, and then figuring out which I want to fully invest in to.  I need to stop
flip-flopping.&lt;/p&gt;
&lt;p&gt;I will say that there isn’t much in it.  With a converging setup there are
fewer and fewer differences to care about.  Things like the expression register
usage above, or built-in versus external &lt;abbr title="HyperText Markup Language"&gt;HTML&lt;/abbr&gt; preview for documents like
this.&lt;/p&gt;
&lt;p&gt;I’m actually wondering whether a &lt;a class="reference external" href="https://neovim.io"&gt;neovim&lt;/a&gt; client &lt;em&gt;in&lt;/em&gt; a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; frame would be
the golden option.  If you know of such a thing or a better option, drop me
a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;!&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/gentoo/elogv"&gt;elogv&lt;/a&gt; for Gentoo is probably the worst example of this, as &lt;kbd class="kbd docutils literal notranslate"&gt;d&lt;/kbd&gt;
&lt;em&gt;almost&lt;/em&gt; works like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; but nothing else does.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Okay, completely pointless.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.orgmode.org/"&gt;org-mode&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/jceb/vim-orgmode"&gt;vim-orgmode&lt;/a&gt; allows me to keep this across editors.  There
is very little point publishing it, as it can be summed up as “James
pressed &lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;&amp;lt;C&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;x&amp;gt;$something&lt;/kbd&gt;&lt;/kbd&gt; and was surprised.”&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/evil_emacs_steals_my_heart.html" rel="alternate"/>
    <summary>Many of my co-workers use emacs, it is probably the most popular editor on
our team and I understand why.Emacs screenshot</summary>
    <category term="emacs" label="emacs"/>
    <category term="vim" label="vim"/>
    <category term="evil" label="evil"/>
    <published>2018-11-05T00:00:00+00:00</published>
  </entry>
</feed>
