<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jnrowe.github.io/</id>
  <title>JNRowe - Posted in 2018</title>
  <updated>2022-03-11T11:45:52.787931+00:00</updated>
  <link href="https://jnrowe.github.io/"/>
  <link href="https://jnrowe.github.io/blog/2018/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <subtitle>Ramblings of a tired mind</subtitle>
  <entry>
    <id>https://jnrowe.github.io/thoughts/jury_of_pears.html</id>
    <title>Jury of your pear-shaped objects</title>
    <updated>2018-01-23T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="jury-of-your-pear-shaped-objects"&gt;

&lt;blockquote class="epigraph"&gt;
&lt;div&gt;&lt;p&gt;On the inquest it was shown that Buck Fanshaw, in the delirium of a wasting
typhoid fever, had taken arsenic, shot himself through the body, cut his
throat, and jumped out of a four-story window and broken his neck–and
after due deliberation, the jury, sad and tearful, but with intelligence
unblinded by its sorrow, brought in a verdict of death “by the visitation
of God.” What could the world do without juries?”&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;cite&gt;Roughing It&lt;/cite&gt;, Mark Twain&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;In a time before The Light I performed jury duty.  It was both somehow
fulfilling and ultimately quite alarming in probably equal measures.&lt;/p&gt;
&lt;figure class="align-default" id="id1"&gt;
&lt;a class="reference external image-reference" href="https://en.m.wikipedia.org/wiki/File:Cambridge_Crown_Court.jpg"&gt;&lt;img alt="Cambridge Crown Court" src="https://upload.wikimedia.org/wikipedia/commons/3/38/Cambridge_Crown_Court.jpg" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Cambridge Crown Court [Wikipedia]&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It all started with a nondescript envelope, which as you open instils a great
sense of fear as it reads “SUMMONS” above the fold. Shock aside and I was proud
to receive my summons in the post.  It afforded me an opportunity to rant about
important civic duty to those I needed to inform of my impending schedule
changes.&lt;/p&gt;
&lt;section id="warm-up-act"&gt;
&lt;h2&gt;Warm up act&lt;/h2&gt;
&lt;p&gt;I performed my jury duty at &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Cambridge_Crown_Court"&gt;Cambridge Crown Court&lt;/a&gt;, a building which is
visually tantalizing from the outside and utterly unfulfilling from within.  If
anything, a visit ruins it.&lt;/p&gt;
&lt;p&gt;On arriving you’re searched for things.  What “things” I’m not sure, because as
a cyclist who arrived with a bag containing an assortment of tools and other
strange objects nothing at all was queried.&lt;/p&gt;
&lt;p&gt;Having found the jury room and picked a table of intriguing people to join, we
sat around and waited for the court manager to appear.  Following a well
rehearsed — and I must say, well delivered — speech we were told we could go
home for the day once we had watched an intake video.&lt;/p&gt;
&lt;p&gt;Day two began much the same way, albeit at a different table this time.
Hopefully, more interesting people this time.  I could do without seeing photos
of a stranger’s cat for the rest of my life.&lt;/p&gt;
&lt;p&gt;Within half an hour a bunch of us were marched off to a court, eyed over, and
most of us were rejected back to the jury room.  Apparently this goes on an
awful lot.&lt;/p&gt;
&lt;p&gt;Eventually I was Tinder-swiped in to the right courtroom, and found myself
sitting on a jury.&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;A side note&lt;/p&gt;
&lt;p&gt;Before I served I hadn’t realised there was an alternative godless heathen
oath, but was pleasantly surprised to find there was one.  And truly amazed
to discover that only a single person in my jury chose to read the
religious one.  I suspect that ratio is skewed enormously by location, but
it does speak to the make up of modern Britain in ways I hadn’t foreseen.&lt;/p&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;section id="hopelessness"&gt;
&lt;h2&gt;Hopelessness&lt;/h2&gt;
&lt;p&gt;You realise early on that the outcome is going to be almost entirely based on
prejudices, and not on facts.  It is sad, but very true.  In the waiting room
you can hear people talking about their case’s defendants and witnesses, and
their perceived trustworthiness; much of which can be summed up in a “looks
like something from an episode of Jeremy Kyle.”&lt;/p&gt;
&lt;p&gt;To be fair I probably agree.  Frankly, if the best character witness a defence
can drag up turns up to court dressed like they’ve just surfaced from
a duvet-day-turned-week, then it probably does speak to their client’s
character.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="dramatic-drama"&gt;
&lt;h2&gt;Dramatic drama&lt;/h2&gt;
&lt;p&gt;Both lawyers were extremely convincing orators, I found myself edging from
guilty to non-guilty with almost every turn.  We were also treated to
a charming judge, who occasionally interjected to explain the games the lawyers
may have been trying to play on us.&lt;/p&gt;
&lt;p&gt;It finally made it obvious to me why certain politicians with legal backgrounds
can be so convincing, their profession literally required it of them.  When all
you have is your words and eyebrow raises to convince a jury, then out of
necessity you’ll develop the ability to use them well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="social-sway"&gt;
&lt;h2&gt;Social sway&lt;/h2&gt;
&lt;p&gt;Finally, the judge sums up the case.  Explains the finer points we’re to
actually consider, and sends us off to the room we’re not allowed to talk
about.  All I’ll say is the following paragraph…&lt;/p&gt;
&lt;p&gt;I’m not easily swayed by peer pressure, but experience has taught me how to
spot those that are.  And you could see how easy they would sway to gain social
acceptance, even with people they’d probably never see again.  In many ways it
was truly scary, I was genuinely naïve enough to believe I’d experience
selfless disinterested deliberation.  It was nothing of the sort.&lt;/p&gt;
&lt;p&gt;We eventually handed back a not-guilty verdict, and thanks to the court’s
schedule that was the end of my service.  All in all, and after planning to be
away for the suggested two weeks, it only took up three days over the course of
a week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="in-summation"&gt;
&lt;h2&gt;In summation&lt;/h2&gt;
&lt;p&gt;Simple.  If you ever have to appear in court yourself, comb your hair and dress
well… you know, like you would imagine people would anyway.&lt;/p&gt;
&lt;p&gt;Seriously though, what I learnt was that you really want to hire the best team
you possibly can.  The incredibly affable, intelligent and at times funny legal
team on one side were a marvel to watch.  They were capable of captivating the
whole jury with their just-plausible-enough-to-be-believable stories, I’d
happily pay to watch them in theatre.&lt;/p&gt;
&lt;p&gt;All of that aside, if you get the chance to serve, I implore you not to try to
wiggle out of it.  I may have made light of it a little here, but it &lt;em&gt;is&lt;/em&gt; an
important duty that our legal system requires of us.  And, it may be a little
fun too!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/thoughts/jury_of_pears.html" rel="alternate"/>
    <summary>On the inquest it was shown that Buck Fanshaw, in the delirium of a wasting
typhoid fever, had taken arsenic, shot himself through the body, cut his
throat, and jumped out of a four-story window and broken his neck–and
after due deliberation, the jury, sad and tearful, but with intelligence
unblinded by its sorrow, brought in a verdict of death “by the visitation
of God.” What could the world do without juries?”</summary>
    <category term="life" label="life"/>
    <category term="jury" label="jury"/>
    <category term="law" label="law"/>
    <published>2018-01-23T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/thoughts/comments.html</id>
    <title>Ugh, why no comments???</title>
    <updated>2018-01-24T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="ugh-why-no-comments"&gt;

&lt;p&gt;Many moons ago, when my blog was hosted elsewhere I built a comment system for
it.  Comments came in, I learnt things, I was corrected when wrong.  Times were
good.&lt;/p&gt;
&lt;p&gt;However, my own personal version of &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Eternal_September"&gt;eternal september&lt;/a&gt; occurred at some point
and the comments became almost valueless(spam or unrelated rants).  I disabled
them; times were good again.&lt;/p&gt;
&lt;p&gt;Then back in 2009, I re-added comments via Disqus.  There was almost no spam,
and the comments felt mostly useful.  Disqus remained for a little while, but
I never felt comfortable with it.  It forces an &lt;a class="reference external" href="http://donw.io/post/github-comments/"&gt;enormous amount of tracking&lt;/a&gt;
on visitors, and does so regardless of whether an actual comment is being
posted.  I disabled it; times were good again again.&lt;/p&gt;
&lt;section id="but-i-want-to-comment"&gt;
&lt;h2&gt;But, I want to comment!!!&lt;/h2&gt;
&lt;p&gt;Cool, I like comments.  I’ve learned a lot of things via comments about this
site and its previous incarnations.  I absolutely welcome them, but I don’t
want to wade through spam or enable enormous amounts of tracking on visitors.&lt;/p&gt;
&lt;p&gt;If you want to comment then drop me a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;, reply via &lt;a class="reference external" href="https://indieweb.org/POSSE"&gt;your own site&lt;/a&gt; or as
a last resort &lt;a class="reference external" href="https://github.com/JNRowe/jnrowe.github.io/issues"&gt;open an issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If your comment is more of a clarification or a fix, you may even want to
consider a pull request.  If my friend Matt can &lt;a class="reference external" href="https://github.com/JNRowe/jnrowe.github.io/commit/64539db44dbd7ec562bc83bdf7a672a78c71e939"&gt;do it&lt;/a&gt;, so can you!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/thoughts/comments.html" rel="alternate"/>
    <summary>Many moons ago, when my blog was hosted elsewhere I built a comment system for
it.  Comments came in, I learnt things, I was corrected when wrong.  Times were
good.</summary>
    <category term="site" label="site"/>
    <published>2018-01-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/thoughts/brexit_through_the_gift_shop.html</id>
    <title>brexit through the gift shop</title>
    <updated>2018-06-08T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="brexit-through-the-gift-shop"&gt;

&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This is a public letter to my co-workers, which probably shouldn’t be
public.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class="epigraph"&gt;
&lt;div&gt;&lt;p&gt;If there were in the world today any large number of people who desired
their own happiness more than they desired the unhappiness of others, we
could have a paradise in a few years.&lt;/p&gt;
&lt;p class="attribution"&gt;—Bertrand Russell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;On Monday morning, a friend and co-worker stood up and rage quit.  And I really
do mean rage quit, it even included a short stand up quarrel in the car park.
Obviously, nobody has spoke about &lt;em&gt;anything&lt;/em&gt; else since…&lt;/p&gt;
&lt;section id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;We used to work in an environment where we could &lt;span class="xref std std-doc"&gt;reject projects&lt;/span&gt; on moral grounds with ease.  In fact, &lt;abbr title="Institutional Review Board"&gt;IRBs&lt;/abbr&gt; exist for that exact reason.  Times were good,
projects were plentiful, and it was just the way things were.&lt;/p&gt;
&lt;p&gt;This is definitely no longer true.  As we continue to rearrange some projects
for their move to the continent, and lose access to many of the future projects
we have prepared for, there has been a significant push back on personal project
choice.&lt;/p&gt;
&lt;p&gt;To some extent it should be expected.  We’ve lost fifteen percent of our
&lt;abbr title="Research and Development"&gt;R&amp;amp;D&lt;/abbr&gt; workforce to the European offices
already, in many ways those of us that remain(for example: &lt;em&gt;me&lt;/em&gt;) are the less
valued employees.  Yes, this is harsh, but it also the reality.  Just because
you don’t like it, doesn’t change the reality.&lt;/p&gt;
&lt;p&gt;So, there are quite a few people further down the ladder who can no longer rely
on the more valued workers to object-in-unity to immoral works.  And there are
a fair few who have only just discovered they were never holding the chips, and
being let go is a real possibility(we’re &lt;em&gt;way&lt;/em&gt; beyond the pool of voluntary
redundancies at this point).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="collective-bargaining"&gt;
&lt;h2&gt;Collective bargaining&lt;/h2&gt;
&lt;p&gt;So, object-in-unity is pretty much dead.  And it has really surprised me quite
how fractious some of the arguments now are.  Given that people are basically
fighting for scraps the gloves have well and truly come off, which I suppose
should be expected.  However, I thought — or at least hoped — we were better
than this.&lt;/p&gt;
&lt;p&gt;With some people, quite rightly, being concerned for their own careers there has
been some real vitriol aimed at the exitter.  I understand their argument; his
rage quit &lt;em&gt;will&lt;/em&gt; mean that project is dead&lt;a class="footnote-reference brackets" href="#s1" id="id1"&gt;1&lt;/a&gt;, and with it the work of the
peripheral workers has gone too.&lt;/p&gt;
&lt;p&gt;It isn’t helped by the fact that it turns out this particular worker is — we’ve
just found out — independently wealthy through the sale of a &lt;span class="xref std std-doc"&gt;side project&lt;/span&gt; about five years ago.  Seemingly, a minority of people believe
it would be okay if someone’s morals put them in the poor house, but less
so if they have a cushion to soften the blow.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="whats-coming-next"&gt;
&lt;h2&gt;Whats coming next?&lt;/h2&gt;
&lt;blockquote class="epigraph"&gt;
&lt;div&gt;&lt;p&gt;Lisa is a sellout! Lisa is a sellout! Lisa, what’s a sellout?&lt;/p&gt;
&lt;p class="attribution"&gt;—Ralph Wiggum&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Clearly this is going to continue for the foreseeable future.  There are a few
of us who, to put it frankly, are basically on gardening leave while this mess
is being sorted out.  The outcome is either you’ll find yourself doing different
work in a years time, or you’ll be made redundant.  It could be much, &lt;em&gt;much&lt;/em&gt;
worse.&lt;/p&gt;
&lt;p&gt;I, for one, haven’t had a tier-one project since August 2016, haven’t published
a notable work since October 2017, and have only been cited once this year.  If
anybody understands the feeling that your career is dead, then surely it is me.
However, now is not the time to be turning on your co-workers(and in many cases
close friends).&lt;/p&gt;
&lt;p&gt;My career is over in its current form, my future is close to non-existent at
this point, and I mourn what now feels like a wasted fifteen years of my life.
Not one of those things would be less true if somebody was now grinding on
projects that they believed to be reprehensible.  In fact, they’d remain true
and I’d feel far worse for having to live with the damage I’m doing to that
person.&lt;/p&gt;
&lt;p&gt;Please, I beg of you, consider the outcome we’ve seen in some other cases over
the past few months.  Nobody you deal with is happy with this, we’re just doing
what can to get through it as best we know how.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="s1"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Yes, that is a terrible bus-factor problem.  The powers that be
&lt;em&gt;should&lt;/em&gt; have seen it coming, but probably missed the point where the
other people with the necessary skills have been moved to Germany.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/thoughts/brexit_through_the_gift_shop.html" rel="alternate"/>
    <summary>This is a public letter to my co-workers, which probably shouldn’t be
public.</summary>
    <category term="work" label="work"/>
    <category term="politics" label="politics"/>
    <published>2018-06-08T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/vim_day_night_colourscheme.html</id>
    <title>Vim with day/night colourschemes</title>
    <updated>2018-09-15T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="vim-with-day-night-colourschemes"&gt;

&lt;p&gt;The fabulous Miss Biddulph asks via our EADS Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I lurve &lt;a class="reference external" href="https://www.vim.org/scripts/script.php?script_id=594"&gt;taqua&lt;/a&gt; in &lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; during the day, but now the days are getting shorter
it is beginning to destroy me.  Is there a way to make &lt;strong class="command"&gt;vim&lt;/strong&gt; use
different colourschemes depending on time?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;So, like most things this can either be &lt;em&gt;really&lt;/em&gt; simple or horribly convoluted
depending on where you wish to draw the usability line.  Because Laura is
asking, we’ll scratch the surface of a few odd ways to do this.&lt;/p&gt;
&lt;section id="the-simple-solution"&gt;
&lt;h2&gt;The simple solution&lt;/h2&gt;
&lt;p&gt;In many ways this is related to my &lt;a class="reference external" href="https://github.com/JNRowe/awesome-timed-wallpaper/"&gt;awesome-timed-wallpaper&lt;/a&gt; hack, and to start
with I’m going to proceed in a similar way.&lt;/p&gt;
&lt;p&gt;The snippet below will configure the &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/options.html#'background'"&gt;background&lt;/a&gt; and &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/syntax.html#:colorscheme"&gt;colourscheme&lt;/a&gt; depending on
the time of day.  You can change the bounds in any way you see fit&lt;a class="footnote-reference brackets" href="#id3" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; hour &lt;span class="p"&gt;=&lt;/span&gt; strftime&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%H&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; hour &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dark&lt;/span&gt;
    &lt;span class="k"&gt;colorscheme&lt;/span&gt; jnrowe  &lt;span class="c"&gt;&amp;quot; Best theme&lt;/span&gt;
&lt;span class="k"&gt;elseif&lt;/span&gt; hour &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;light&lt;/span&gt;
    &lt;span class="k"&gt;colorscheme&lt;/span&gt; taqua
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Midnight to 08:59&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dark&lt;/span&gt;
    &lt;span class="k"&gt;colorscheme&lt;/span&gt; monokai
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you (re-)start &lt;strong class="command"&gt;vim&lt;/strong&gt; regularly this is all you’ll probably need.
If — like me — you have &lt;em&gt;very&lt;/em&gt; long running &lt;strong class="command"&gt;vim&lt;/strong&gt; sessions, you’ll have
to put in some more effort to make it work:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The easiest option would be &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/map.html#:nmap"&gt;binding it to a key&lt;/a&gt; and triggering it when you
notice eye strain&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use vim 8’s new asynchronous timer support, see &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:h&lt;/span&gt; &lt;span class="pre"&gt;timer&lt;/span&gt;&lt;/code&gt;&lt;a class="footnote-reference brackets" href="#id4" id="id2"&gt;2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support pre-v8 vim by adding an &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#:autocmd"&gt;autocmd&lt;/a&gt; on &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#CursorHold"&gt;CursorHold&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Script vim externally using vim’s &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/remote.html#--remote-send"&gt;client server support&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;a class="reference external" href="https://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; user timer that triggers at a given time ;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-ridiculous-solution"&gt;
&lt;h2&gt;The ridiculous solution&lt;/h2&gt;
&lt;p&gt;We’ll need to figure out the actual daylight state.  There are an enormous
number of options available.&lt;/p&gt;
&lt;section id="with-python"&gt;
&lt;h3&gt;With Python&lt;/h3&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://pypi.org/project/upoints/"&gt;upoints&lt;/a&gt; package can calculate sunrise and sunset:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;upoints.point&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;52.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sun_events&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# UTC results&lt;/span&gt;
&lt;span class="go"&gt;(datetime.time(5, 32), datetime.time(18, 15))&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sun_events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zenith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;civil&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# twilight&lt;/span&gt;
&lt;span class="go"&gt;(datetime.time(4, 58), datetime.time(18, 49))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="with-redshift"&gt;
&lt;h3&gt;With &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;redshift&lt;/span&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If you already use &lt;a class="reference external" href="http://jonls.dk/redshift/"&gt;redshift&lt;/a&gt; — and you should — getting the current state is
quite easy.  Below is example output, and a quick &lt;a class="reference external" href="http://sed.sourceforge.net/"&gt;sed&lt;/a&gt;-based method to parse the
output for script usage:&lt;/p&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ redshift -p
Waiting &lt;span class="k"&gt;for&lt;/span&gt; current location to become available...
Location: &lt;span class="m"&gt;52&lt;/span&gt;.2 N, &lt;span class="m"&gt;0&lt;/span&gt;.2 E
Period: Night
Colour temperature: 4500K
Brightness: &lt;span class="m"&gt;1&lt;/span&gt;.00
$ redshift -p &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="p"&gt;|&lt;/span&gt; sed -E &lt;span class="s1"&gt;&amp;#39;/:/s,(.*): (.*),\U\1\E=&amp;quot;\2&amp;quot;, ; s,(\b) (\b),\1_\2,g&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PERIOD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Night&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;COLOUR_TEMPERATURE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4500K&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;BRIGHTNESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.00&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another option might be to use &lt;strong class="command"&gt;redshift&lt;/strong&gt;’s hook support, see the man
page for how to configure hooks.&lt;/p&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/zsh&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;period-changed&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$3&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;day&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; notify-send &lt;span class="s2"&gt;&amp;quot;Make bright&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;night&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; notify-send &lt;span class="s2"&gt;&amp;quot;Make dark&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="camera-input"&gt;
&lt;h3&gt;Camera input&lt;/h3&gt;
&lt;p&gt;Assuming you have access to either a very good or &lt;em&gt;very&lt;/em&gt; bad webcam you could
even script support that takes in to account cloud cover, or occultation caused
by buildings and trees.&lt;/p&gt;
&lt;p&gt;For example, &lt;a class="reference external" href="https://www.imagemagick.org/"&gt;ImageMagick&lt;/a&gt; can be used to &lt;a class="reference external" href="https://www.imagemagick.org/script/escape.php"&gt;extract brightness&lt;/a&gt; from an image.&lt;/p&gt;
&lt;div class="highlight-shell-session notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl &lt;span class="nv"&gt;$cam_url&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; convert - -colorspace Gray -format &lt;span class="s2"&gt;&amp;quot;%[fx:quantumrange*image.mean]&amp;quot;&lt;/span&gt; info:
&lt;span class="go"&gt;38244.2&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; convert pattern:GRAY0 -format &lt;span class="s2"&gt;&amp;quot;%[fx:quantumrange*image.mean]&amp;quot;&lt;/span&gt; info:
&lt;span class="go"&gt;0&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; convert pattern:GRAY100 -format &lt;span class="s2"&gt;&amp;quot;%[fx:quantumrange*image.mean]&amp;quot;&lt;/span&gt; info:
&lt;span class="go"&gt;65535&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;As can be seen from the black(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;GRAY0&lt;/span&gt;&lt;/code&gt;) and white(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;GRAY100&lt;/span&gt;&lt;/code&gt;) examples,
the result on &lt;em&gt;my&lt;/em&gt; system is a value between 0 and 65535.  You should take
note that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;quantumrange&lt;/span&gt;&lt;/code&gt; is a compile time depth setting; it can be
queried with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%q&lt;/span&gt;&lt;/code&gt; escape, or by checking the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Q&lt;/span&gt;&lt;/code&gt; value in the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;convert&lt;/span&gt; &lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/code&gt; output.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The above will only really work with very poor webcams that don’t attempt to
autobalance their images, with reasonable devices it will be close to useless.&lt;/p&gt;
&lt;p&gt;However, if you have a good quality camera image you may be able to extract the
balancing data used from the image tags, and use that to infer the light level.
&lt;a class="reference external" href="http://www.exiv2.org/"&gt;exiv2&lt;/a&gt; is great option to extract that data when available, and also supports
&lt;a class="reference external" href="https://wiki.gnome.org/Projects/GObjectIntrospection"&gt;gobject introspection&lt;/a&gt; making it possible to use it with &lt;a class="reference external" href="https://github.com/pavouk/lgi"&gt;lgi&lt;/a&gt; in &lt;a class="reference external" href="https://awesomewm.org/"&gt;awesomewm&lt;/a&gt;
for desktop colours too!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="thoughts"&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;That is definitely enough of that rabbit hole for me right now… I’m really
looking forward to seeing people code golf some other solutions, be they useful
or [hopefully] intriguing variations.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id3"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;If you need more branches you can also wonder why &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vimscript&lt;/span&gt;&lt;/code&gt; doesn’t
have a switch statement.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;No &lt;abbr title="HyperText Markup Language"&gt;HTML&lt;/abbr&gt; link, as vimdoc is still on vim 7.3&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/vim_day_night_colourscheme.html" rel="alternate"/>
    <summary>The fabulous Miss Biddulph asks via our EADS Linux list:I lurve taqua in vim during the day, but now the days are getting shorter
it is beginning to destroy me.  Is there a way to make vim use
different colourschemes depending on time?</summary>
    <category term="vim" label="vim"/>
    <published>2018-09-15T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tiling_vs_tabbing.html</id>
    <title>Tiling vs tabbing</title>
    <updated>2018-10-08T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="tiling-vs-tabbing"&gt;

&lt;p&gt;A fairly large chunk of my developer friends fawn over &lt;a class="reference external" href="https://tmux.github.io/"&gt;tmux&lt;/a&gt; and &lt;a class="reference external" href="https://tools.suckless.org/tabbed"&gt;tabbed&lt;/a&gt;.
These tools can give &lt;em&gt;the effect&lt;/em&gt; of a multiple window interface to your
terminal sessions, or apply a tabbed interface to any &lt;a class="reference external" href="https://standards.freedesktop.org/xembed-spec/xembed-spec-latest.html"&gt;xembed&lt;/a&gt; supporting
application respectively.  I’ll freely admit they’re pretty awesome at what
they do&lt;a class="footnote-reference brackets" href="#id5" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That said, I’ve never been a fan of them or the plethora of tools like them.
They feel, to me, like they’re attacking the problem from entirely the wrong
side.  Instead of configuring individual applications to behave in a tabbed and
custom way, why not just rely on that behaviour globally?  Allow me to
illustrate with the following examples.&lt;/p&gt;
&lt;img alt="Example of awesomewm’s tile.right layout" src="../_images/2018-10-08-tiling.jpg" /&gt;
&lt;p&gt;If I want two terminals next to each other I’ll just switch to a layout that
supports that(in &lt;a class="reference external" href="https://awesomewm.org/"&gt;awesomewm&lt;/a&gt; I’d probably choose &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tile.right&lt;/span&gt;&lt;/code&gt;) .  If I want
various image viewer windows open and a nice tabbed interface to access them,
I’ll just tag them all and enable a layout that supports that(such as &lt;a class="reference external" href="https://dwm.suckless.org/"&gt;dwm&lt;/a&gt;’s
monocle&lt;a class="footnote-reference brackets" href="#id6" id="id2"&gt;2&lt;/a&gt;).  If I want to vertically split a terminal window and then
horizontally split that to include a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; instance, I can just tag those
three windows and enable a layout that supports it&lt;a class="footnote-reference brackets" href="#id7" id="id3"&gt;3&lt;/a&gt;.  I think the basic
message should be clear by now.&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Window manager choice&lt;/p&gt;
&lt;p&gt;I’ve used both &lt;a class="reference external" href="https://awesomewm.org/"&gt;awesomewm&lt;/a&gt; and &lt;a class="reference external" href="https://dwm.suckless.org/"&gt;dwm&lt;/a&gt; as examples here because I use both
depending on what machine I’m in front of.&lt;/p&gt;
&lt;p&gt;However, you can achieve the same effect with any number of tiling window
managers, or with tools like &lt;a class="reference external" href="https://launchpad.net/winwrangler"&gt;winwrangler&lt;/a&gt;&lt;a class="footnote-reference brackets" href="#id8" id="id4"&gt;4&lt;/a&gt; if your favourite window
manager has weaker layout management.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;You can go further too.  Say you want &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; and a browser window side by side
while reading documentation but need that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; instance next to a terminal
for running tests, then you can simply apply two tags to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; instance
and switch between both layouts with a rattle of the keyboard.  The exact same
interface you’d use for any other layout change too, not one that is specific
to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmux&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tabbed&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It seems strange to me that given the option to perform tasks like this at the
window manager level people would &lt;em&gt;choose&lt;/em&gt; to insert an extra layer in the
middle that does less.  By using actual windows you sidestep the problems with
mouse selection in pseudo-windows in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmux&lt;/span&gt;&lt;/code&gt;, and you can change your mind
about your preference for tabs or tiling mid-session unlike with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tabbed&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also abuse other excellent things like &lt;a class="reference external" href="http://www.semicomplete.com/projects/xdotool/"&gt;xdotool&lt;/a&gt; to fiddle with your
layout or interact with specific clients instead of needing to do application
specific things depending on whether you’re in a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmux&lt;/span&gt;&lt;/code&gt; session or not.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I’m especially impressed with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tabbed&lt;/span&gt;&lt;/code&gt;, as it feels somehow obvious
yet magical.  A rare combination in my eyes.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You’ll probably want a patch such as &lt;a class="reference external" href="http://dwm.suckless.org/patches/fancybar/"&gt;fancybar&lt;/a&gt; if you want to emulate
the appearance of having a tab bar in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dwm&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;And using the window manager’s functionality means that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; session
can be a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gvim&lt;/span&gt;&lt;/code&gt; instance with nice colourful PNGs for &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/sign.html"&gt;signs&lt;/a&gt; instead
of just characters too.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You can find a quick patch to remove the daemon support and along with
it the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gtkhotkey&lt;/span&gt;&lt;/code&gt; dependency &lt;a class="reference external" href="https://github.com/JNRowe/jnrowe-misc/commit/a9249166b917110ecb69714ca08d8ff28870a9c7"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tiling_vs_tabbing.html" rel="alternate"/>
    <summary>A fairly large chunk of my developer friends fawn over tmux and tabbed.
These tools can give the effect of a multiple window interface to your
terminal sessions, or apply a tabbed interface to any xembed supporting
application respectively.  I’ll freely admit they’re pretty awesome at what
they do1.Example of awesomewm’s tile.right layout</summary>
    <category term="desktop" label="desktop"/>
    <category term="tiling" label="tiling"/>
    <category term="tabbed" label="tabbed"/>
    <published>2018-10-08T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/advent_of_code.html</id>
    <title>Advent of Code 2017</title>
    <updated>2018-10-19T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="advent-of-code-2017"&gt;

&lt;p&gt;A very evil friend pointed me to &lt;a class="reference external" href="http://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; last December, and I burnt
a fair chunk of time on it.  I mean… yeah, it &lt;em&gt;was&lt;/em&gt; hugely fun but be warned it
is enormously addictive&lt;a class="footnote-reference brackets" href="#id5" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;I must say that I meant to write this last December, but things got in the
way and writing doesn’t earn me enough valuable Internet points.  Don’t
take this being 10 months late as a knock against &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt;, but more as me
thinking we’re on the cusp of a one month countdown to it beginning
again(hopefully).&lt;/p&gt;
&lt;/div&gt;
&lt;section id="why"&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;This answer should be obvious; puzzles are fun, competitive ones where you
prove yourself against co-workers and &lt;em&gt;total&lt;/em&gt; strangers even more so.  If that
isn’t enough reason to have a go, then I simply don’t want to know you.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lessons"&gt;
&lt;h2&gt;Lessons&lt;/h2&gt;
&lt;p&gt;It is huge fun, but if you want to get on the leaderboards you &lt;em&gt;must&lt;/em&gt; be up
when the puzzle is released.  Sadly, in the UK that means waking up for
a &lt;strong&gt;five in the morning&lt;/strong&gt; start.&lt;/p&gt;
&lt;p&gt;If you look at my completion screenshot, you’ll also see I have the
&lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#module-itertools" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;itertools&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; documentation open.  If you’re going to use Python for &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt;
study up on &lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#module-itertools" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;itertools&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, it will help no end&lt;a class="footnote-reference brackets" href="#id6" id="id2"&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="Ta-da! Calendar complete" src="../_images/2017-12-29-advent_of_code.png" style="width: 800.0px; height: 450.0px;" /&gt;
&lt;p&gt;The other thing you can see in my screenshot is that I didn’t complete the
event on Christmas Day, in fact I took a break and finally mashed through the
final week on the evening of the 28th.  Infinite time, unemployment or being
smarter would be a great help here.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="approach"&gt;
&lt;h2&gt;Approach&lt;/h2&gt;
&lt;p&gt;With the exception of one day — where the answer just jumped out at me — I used
exactly the same approach.  Whack out &lt;em&gt;a&lt;/em&gt; solution for the given samples that
tested green, then chuck in my magic string to get a hopefully correct answer
to submit.  Once successful I’d return to the code to clean it up, and also to
think through the problems a bit more.  As with many things in life, there can
be a lot to learn through posthockery.&lt;/p&gt;
&lt;p&gt;If we look at the description for &lt;a class="reference external" href="https://adventofcode.com/2017/day/1"&gt;day 1&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The captcha requires you to review a sequence of digits (your puzzle input)
and find the sum of all digits that match the next digit in the list. The
list is circular, so the digit after the last digit is the first digit in
the list.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;1122 produces a sum of 3 ( 1 + 2) because the first digit ( 1) matches the
second digit and the third digit (2) matches the fourth digit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1111 produces 4 because each digit (all 1) matches the next.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1234 produces 0 because no digit matches the next.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;91212129 produces 9 because the only digit that matches the next one is
the last digit, 9.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I immediately dumped the samples in to a Python &lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html#module-doctest" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;doctest&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; file as:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; captcha(&amp;#39;1122&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;3&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; captcha(&amp;#39;1111&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;4&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; captcha(&amp;#39;1234&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;0&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; captcha(&amp;#39;91212129&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;9&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we’ll know we’re on the right track when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;doctest&lt;/span&gt; &lt;span class="pre"&gt;day01.py&lt;/span&gt;&lt;/code&gt;
stops spitting out errors.  Looking at my git repository it looks like my first
dirty solution was:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@str_to_ints&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;captcha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You’ll notice I’ve slapped a decorator on the function, with the assumption
that I’ll want to convert an iterable to integers again before the month is
out(I was right).  Its implementation was a rather basic:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;str_to_ints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;ints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Eagle-eyed Pythonistas will spot the horrific error here, I forgot that
decorators will wipe out my docstring and the &lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html#module-doctest" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;doctest&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; runner won’t pick
up my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;captcha&lt;/span&gt;&lt;/code&gt; tests at all.  The solution is to reach for
&lt;a class="reference external" href="https://docs.python.org/3/library/functools.html#functools.wraps" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;functools.wraps()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and a tiny edit:&lt;/p&gt;
&lt;div class="highlight-diff notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- a&lt;/span&gt;
&lt;span class="gi"&gt;+++ b&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1,2 +1,3 @@&lt;/span&gt;
 def str_to_ints(fn):
&lt;span class="gi"&gt;+    @wraps(fn)&lt;/span&gt;
     def wrapper(s):
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I know full well that this is a better solution than diving in to the &lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt;
for me.  I tend toward &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Code_golf"&gt;code golfing&lt;/a&gt; myself in a &lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt;, so I’d end up with
something more like this:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;91212129&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I wish I could say this was made up to prove a point, but that is a chunk from
my &lt;a class="reference external" href="https://pypi.org/project/ptpython/"&gt;ptpython&lt;/a&gt; history when I was playing around trying to think of a “cleaner”
solution after getting the correct answer&lt;a class="footnote-reference brackets" href="#id7" id="id3"&gt;3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I followed the same basic pattern for each puzzle, always using the same file
for part one and part two of the puzzles.  Occasionally needing to refine my
part one solution for an edge case that part two exposed.  I’ll spare you the
blow-by-blow of the other 24 days, as frankly the code is the least interesting
part of the puzzles in my opinion.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;figure class="align-default" id="id9"&gt;
&lt;img alt="Languages used for tasks" src="../_images/2018-10-19-aoc_calendar.png" style="width: 273.5px; height: 181.0px;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Language frequency for &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; puzzles&lt;/span&gt;&lt;/p&gt;
&lt;div class="legend"&gt;
&lt;table class="docutils align-default"&gt;
&lt;colgroup&gt;
&lt;col style="width: 26%" /&gt;
&lt;col style="width: 35%" /&gt;
&lt;col style="width: 39%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Colour&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Language&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Frequency&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;red&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;blue&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;PyPY&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;green&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://nim-lang.org/"&gt;nim&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;yellow&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.lua.org/"&gt;lua&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I used &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; for over half the days, &lt;a class="reference external" href="http://pypy.org/"&gt;PyPY&lt;/a&gt; for a few where my immediate
thought was to reach for brute forcing a solution with a naïve algorithm, &lt;a class="reference external" href="http://www.lua.org/"&gt;lua&lt;/a&gt;
via &lt;a class="reference external" href="https://github.com/dpapavas/luaprompt"&gt;luaprompt&lt;/a&gt; on one day where it was clear all I really needed was
a calculator, and &lt;a class="reference external" href="https://nim-lang.org/"&gt;nim&lt;/a&gt; on five days where I was using my Winterval break to
learn &lt;a class="reference external" href="https://nim-lang.org/"&gt;nim&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;I only made it on to the leaderboard once, and I was excited.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Got myself on the #aoc leaderboard this morning(#91)… now back to sleep
as its 5am 😴 &lt;a class="reference external" href="http://adventofcode.com/2017/leaderboard/day/9"&gt;http://adventofcode.com/2017/leaderboard/day/9&lt;/a&gt;&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://jnrowe.github.io/mnotes/#2017-12-09T05:22:29+00:00"&gt;2017-12-09T05:22:29+00:00&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I like to think I could have done better if it didn’t require getting up at
five in the morning to compete, but that is the just the lie I’m telling myself
to feel better.&lt;/p&gt;
&lt;p&gt;All told, I spent nine hours on &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; and those hours were spread pretty evenly
between the “live” 2017 puzzles and the previous years.  I’m up for calling it
personal development, and I’m hoping it returns this year!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tips"&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;p&gt;Honestly, I’m going to push against the grain on this.  All my co-workers who
have commented on this have said &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; is a great way to learn a new language,
but I massively disagree.  Even if you ignore the leaderboard, you’re only
making tiny little one-off programs without the need for any real design.
Granted you can learn some of the basics quite well, but it feels closer to
doing a few &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/%22Hello,_World!%22_program"&gt;“hello world”&lt;/a&gt; implementations.  The puzzles themselves are more
in depth than “Hello world” for sure, but the implementations aren’t likely to
be very interesting or didactically useful.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read&lt;/em&gt; the problems and &lt;em&gt;think&lt;/em&gt; first, obvious I know… but when the stopwatch
is running it is easy to jump to the editor.  For example, &lt;a class="reference external" href="https://adventofcode.com/2017/day/12"&gt;day 12&lt;/a&gt; is clearly
pretty easy to solve by reaching for new code, but even easier to solve with
&lt;a class="reference external" href="https://www.graphviz.org/"&gt;graphviz&lt;/a&gt;.  In this specific instance you can use &lt;a class="reference external" href="http://sed.sourceforge.net/"&gt;sed&lt;/a&gt; to fiddle the input,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccomps&lt;/span&gt;&lt;/code&gt; to filter the input for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0&lt;/span&gt;&lt;/code&gt; node, and finally use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gc&lt;/span&gt;&lt;/code&gt; to
count the nodes&lt;a class="footnote-reference brackets" href="#id8" id="id4"&gt;4&lt;/a&gt;.  I’ll admit here the code I used to submit my answer was
all new, and I didn’t use &lt;a class="reference external" href="https://www.graphviz.org/"&gt;graphviz&lt;/a&gt; until I thought about how to refactor my
20 lines of Python.  I did use &lt;a class="reference external" href="https://www.graphviz.org/"&gt;graphviz&lt;/a&gt; to solve &lt;a class="reference external" href="https://adventofcode.com/2017/day/24"&gt;day 24&lt;/a&gt;’s puzzle, so
even I &lt;em&gt;can&lt;/em&gt; learn from my own advice on occasion.&lt;/p&gt;
&lt;p&gt;I used &lt;a class="reference external" href="https://github.com/leafo/moonscript/"&gt;moonscript&lt;/a&gt; for &lt;a class="reference external" href="https://adventofcode.com/2017/day/21"&gt;day 21&lt;/a&gt;, which was a mistake because the syntax wasn’t
a good fit.  It would have been faster, shorter and cleaner to use Haskell, as
I did when I reworked it after submitting.  Really, this is the same point as
the last but should be repeated: &lt;em&gt;think&lt;/em&gt; first, &lt;em&gt;appropriate&lt;/em&gt; tools matter.&lt;/p&gt;
&lt;p&gt;If you’re going for the leaderboard you need to be &lt;em&gt;really&lt;/em&gt; fast, so: Use fast
languages, be &lt;em&gt;all over&lt;/em&gt; your chosen weapon’s standard library, and use your
editor’s &lt;a class="reference external" href="https://github.com/SirVer/ultisnips"&gt;snippets&lt;/a&gt; well.  &lt;strong&gt;Every&lt;/strong&gt;. &lt;strong&gt;Second&lt;/strong&gt;. &lt;strong&gt;Counts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And finally, keep your old solutions around either in files or in your &lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt;’s
history as you might end up revisiting them, as was the case with &lt;a class="reference external" href="https://adventofcode.com/2017/day/14"&gt;day 14&lt;/a&gt; for
example.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hopes-for-2018"&gt;
&lt;h2&gt;Hopes for 2018?&lt;/h2&gt;
&lt;p&gt;Number one?  That it returns.  It was a great deal of fun.  It spawned a fair
amount of interesting water cooler chat too.&lt;/p&gt;
&lt;p&gt;Number two?  That the options to pay for it are better this year.  Last year
I had a friend tip some money towards the AOC++ scheme in my place, as the
available options wouldn’t work for me at all.&lt;/p&gt;
&lt;p&gt;If I had a number three it would be to figure out a way to make it work without
having to get up at five, I just can’t even imagine what that could be.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;More so as the puzzles from previous years are still online, so you can
end up sucked in to old puzzles very easily.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Frankly, I’m of the strong opionion that you should be studying up on
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;itertools&lt;/span&gt;&lt;/code&gt; &lt;em&gt;all&lt;/em&gt; the time anyway.  It just that other Python
developers aren’t always familiar enough with the module for use in
large shared code bases, so help to make this a reality!&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;For some value of “cleaner” which is both unique to me and a totally
untrue.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;In fact, this tip isn’t specific to &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; at all.  Just stop reading
now and learn to use &lt;a class="reference external" href="https://www.graphviz.org/"&gt;graphviz&lt;/a&gt;, it can be used to solve so &lt;em&gt;many&lt;/em&gt;
engineering problems.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/advent_of_code.html" rel="alternate"/>
    <summary>A very evil friend pointed me to Advent of Code last December, and I burnt
a fair chunk of time on it.  I mean… yeah, it was hugely fun but be warned it
is enormously addictive1.Ta-da! Calendar complete</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="coding" label="coding"/>
    <category term="puzzles" label="puzzles"/>
    <published>2018-10-19T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/readline_rename_imv.html</id>
    <title>File renaming for the lazy</title>
    <updated>2018-10-26T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="file-renaming-for-the-lazy"&gt;

&lt;p&gt;Over at HN in a &lt;a class="reference external" href="https://news.ycombinator.com/item?id=18290344"&gt;stolen topic&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;however, i miss one feature for which i’d use a filemanager: in-place file
renaming. in most cases when i want to rename a file, i want to change
a small part of it, and i don’t want to have to retype the whole filename.&lt;/p&gt;
&lt;p&gt;i have yet to find a commandline utility (emacs doesn’t count ;-) that
offers that.&lt;/p&gt;
&lt;p class="attribution"&gt;—em-bee&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;There a few interesting replies there, but I want to flesh out my replies
a little after the fact.&lt;/p&gt;
&lt;section id="the-new-tool-solution"&gt;
&lt;h2&gt;The new tool solution&lt;/h2&gt;
&lt;p&gt;My initial reply was&lt;a class="footnote-reference brackets" href="#id3" id="id1"&gt;1&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If I’m understanding you correctly, then &lt;a class="reference external" href="http://www.nongnu.org/renameutils/"&gt;renameutils&lt;/a&gt;’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; is a great
tool for this.  &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt; &lt;span class="pre"&gt;$filename&lt;/span&gt;&lt;/code&gt; pops you in to a &lt;a class="reference external" href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html"&gt;readline&lt;/a&gt; enabled prompt
to edit &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$filename&lt;/span&gt;&lt;/code&gt;.  Given that it is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readline&lt;/span&gt;&lt;/code&gt; you can even add
extra options in your &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.inputrc&lt;/span&gt;&lt;/code&gt; to add additional features to it,
I have mappings for custom directory prefixes for example.&lt;/p&gt;
&lt;p&gt;It also comes with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;qmv&lt;/span&gt;&lt;/code&gt;, which will pop open an editor for you to
perform inplace edits on filenames.   Which is kinda like &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Dired"&gt;dired&lt;/a&gt; as an
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt; comparison, at least if you squint an awful lot.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I recommend &lt;a class="reference external" href="http://www.nongnu.org/renameutils/"&gt;renameutils&lt;/a&gt; a lot.  I’ve given talks that have digressed in to
“why you should use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;qmv&lt;/span&gt;&lt;/code&gt;”, I’ve mocked co-workers when I’ve spotted them
doing things &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; would be a billion times better for, and it looks like
I even &lt;a class="reference external" href="https://bugs.gentoo.org/show_bug.cgi?id=64479"&gt;pimped it&lt;/a&gt; to distro folks in the past&lt;a class="footnote-reference brackets" href="#id4" id="id2"&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I sped across the usage in the HN comment, but there is some interesting
functionality hidden in there.  As stated, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readline&lt;/span&gt;&lt;/code&gt; so you
have an enormous amount of &lt;a class="reference external" href="https://tiswww.cwru.edu/php/chet/readline/rluserman.html"&gt;editing power&lt;/a&gt; at your disposal, and it is all the
same stuff you have in your shell; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;M-{b,f}&amp;gt;&lt;/span&gt;&lt;/code&gt; word jumps, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;M-C-]&amp;gt;&lt;/span&gt;&lt;/code&gt;
character searches, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-t&amp;gt;&lt;/span&gt;&lt;/code&gt; to transpose typo fixes, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;M-[count]&amp;gt;&lt;/span&gt;&lt;/code&gt; repeats,
and many more.&lt;/p&gt;
&lt;p&gt;I also hinted at config file support.  &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.inputrc&lt;/span&gt;&lt;/code&gt;, or whatever
&lt;span class="target" id="index-0"&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal notranslate"&gt;&lt;span class="pre"&gt;$INPUTRC&lt;/span&gt;&lt;/code&gt; points at, can be used to change the behaviour of all
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readline&lt;/span&gt;&lt;/code&gt; using tools.  Excitingly though, it can also be used to change the
behaviour of specific tools only.&lt;/p&gt;
&lt;p&gt;For example, I often find myself writing throwaway scripts that I suddenly
decide I’ll want again in the future.  When that happens they move to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt;, and I can do that with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; by tapping &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-v&amp;gt;&lt;/span&gt;&lt;/code&gt; at the
prompt.  This is really useful when I want to rename &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;foo.sh&lt;/span&gt;&lt;/code&gt; to
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.local/bin/change_the_world.sh&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$if imv
    set expand-tilde on
    C-v: &amp;#39;\C-a~/.local/bin\C-i&amp;#39;
$endif
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The above snippet might deserve a little explanation.  The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-v&amp;gt;&lt;/span&gt;&lt;/code&gt; mapping
inputs &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-a&amp;gt;&lt;/span&gt;&lt;/code&gt; to move to the beginning of the line, the literal string
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt;, and finally the tab character(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;C-i&amp;gt;&lt;/span&gt;&lt;/code&gt;)  to expand the tilde
for me.&lt;/p&gt;
&lt;p&gt;Obviously, you can place whatever you want in there.  And if you take advantage
of the application guard as above, you can even override bindings that you
won’t find yourself using in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imv&lt;/span&gt;&lt;/code&gt; without breaking your shell or other
tools.&lt;/p&gt;
&lt;figure class="align-default" id="id5"&gt;
&lt;a class="reference external image-reference" href="https://xkcd.com/1806/"&gt;&lt;img alt="Borrow Your Laptop" src="../_images/borrow_your_laptop.png" style="width: 167.0px; height: 246.5px;" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;As always, &lt;a class="reference external" href="https://xkcd.com/"&gt;xkcd&lt;/a&gt; has a pre-canned explanation for why you shouldn’t listen
to me.  Image: &lt;a class="reference external" href="http://creativecommons.org/licenses/by-nc/2.5/"&gt;CC by-nc&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="the-old-tool-solution"&gt;
&lt;h2&gt;The old tool solution&lt;/h2&gt;
&lt;p&gt;My other comment there was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If you’re a &lt;a class="reference external" href="https://www.zsh.org/"&gt;zsh&lt;/a&gt; user you can also use the other &lt;a class="reference external" href="https://linux.die.net/man/1/zshexpn"&gt;zshexpn(1)&lt;/a&gt; stuff too.
Like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mv&lt;/span&gt; &lt;span class="pre"&gt;file.ext{,(:r)}&lt;/span&gt;&lt;/code&gt; to perform &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mv&lt;/span&gt; &lt;span class="pre"&gt;file.ext&lt;/span&gt; &lt;span class="pre"&gt;file&lt;/span&gt;&lt;/code&gt;, or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:l&lt;/span&gt;&lt;/code&gt; to
lowercase a filename, or any number of other sometimes useful(and often
pointless things).  I’ve used &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:l&lt;/span&gt;&lt;/code&gt; a number of times, but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:s&lt;/span&gt;&lt;/code&gt; for
substitution is probably the most useful in general.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;If you’re already using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt; (and you should be!), you have an enormously
powerful suite of functionality at your fingertips for every task including
simple renames.&lt;/p&gt;
&lt;p&gt;I’ll show a few examples from a &lt;a class="reference external" href="https://linux.die.net/man/1/script"&gt;quick interactive session&lt;/a&gt; to hopefully make
the point.&lt;/p&gt;
&lt;div class="highlight-zsh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$   &lt;span class="c1"&gt;# Real file names from my shared tips folder; co-workers look at&lt;/span&gt;
$   &lt;span class="c1"&gt;# ``~JNRowe/public/tips`` for the actual content ;)&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; xclip.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:r&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Remove extension&lt;/span&gt;
xclip.rst xclip
$ &lt;span class="nb"&gt;echo&lt;/span&gt; tile_in_60_seconds.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:u&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Change to all caps&lt;/span&gt;
tile_in_60_seconds.rst TILE_IN_60_SECONDS.RST
$ &lt;span class="nb"&gt;echo&lt;/span&gt; fzf_pkg_manager.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:u:A&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Change to all caps, and make path absolute&lt;/span&gt;
fzf_pkg_manager.rst /home/jay/export/public/tips/FZF_PKG_MANAGER.RST
$ &lt;span class="nb"&gt;echo&lt;/span&gt; dc.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:e&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Extract only extension&lt;/span&gt;
dc.rst rst
$ &lt;span class="nb"&gt;echo&lt;/span&gt; ogrmerge_layer_cake.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:A:h:h&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Extract parent directory from file&lt;/span&gt;
ogrmerge_layer_cake.rst /home/jay/export/public
$ &lt;span class="nb"&gt;echo&lt;/span&gt; xclip.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:s/clip/sel&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Apply substitution of “clip” to “sel”&lt;/span&gt;
xclip.rst xsel.rst
$ &lt;span class="nb"&gt;echo&lt;/span&gt; emacs_explore.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:s/e/X&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# Apply substitution of “e” to “X”&lt;/span&gt;
emacs_explore.rst Xmacs_explore.rst
$ &lt;span class="nb"&gt;echo&lt;/span&gt; emacs_explore.rst&lt;span class="o"&gt;{&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;:gs/e/X&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;# … add the g flag for global replace&lt;/span&gt;
emacs_explore.rst Xmacs_XxplorX.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Order matters.  For example: in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(:u:A)&lt;/span&gt;&lt;/code&gt; example above we apply the
uppercase filter first, and then convert to an absolute path.  If we’d
reversed the modifiers the &lt;em&gt;entire&lt;/em&gt; path would be converted to uppercase.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The modifiers are &lt;em&gt;hugely&lt;/em&gt; powerful, and are definitely worth the effort to
learn in my opinion.  Combined with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readline&lt;/span&gt;&lt;/code&gt; emulation that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt;
provides you can do some amazing things at the prompt.&lt;/p&gt;
&lt;p&gt;They’re also available in non-interactive mode when writing scripts, and that
is probably when they’re at their most useful as you can apply them to other
constructs such as arrays as well.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;If you become accustomed to working with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt; and its advanced
modifiers, then be sure to take a look at &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zmv&lt;/span&gt;&lt;/code&gt; which is bundled with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt;.  It provides a nice interface to copying and moving files that
makes heavy use of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zsh&lt;/span&gt;&lt;/code&gt;’s advanced features.  You may find it suits your
way of working better than &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;qmv&lt;/span&gt;&lt;/code&gt; for example.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="thoughts"&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Small tools that do incredible things are &lt;em&gt;everywhere&lt;/em&gt;, I clearly love
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;renameutils&lt;/span&gt;&lt;/code&gt; but I’d also like to hear about those things you enjoy too.
Drop me a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;, link me a blog post or stop me in the corridor to tell me
about them.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id3"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Lightly edited, because useful markup exists outside of HN.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;So long ago that &lt;em&gt;I&lt;/em&gt; was surprised to find that out from a &lt;a class="reference external" href="http://www.rpcurnow.force9.co.uk/mairix/"&gt;mairix&lt;/a&gt;
search to look for times when I’ve mentioned it.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/readline_rename_imv.html" rel="alternate"/>
    <summary>Over at HN in a stolen topic:however, i miss one feature for which i’d use a filemanager: in-place file
renaming. in most cases when i want to rename a file, i want to change
a small part of it, and i don’t want to have to retype the whole filename.Borrow Your Laptop</summary>
    <category term="readline" label="readline"/>
    <category term="imv" label="imv"/>
    <category term="qmv" label="qmv"/>
    <category term="renameutils" label="renameutils"/>
    <published>2018-10-26T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/evil_emacs_steals_my_heart.html</id>
    <title>Evil Emacs steals my heart</title>
    <updated>2018-11-05T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="evil-emacs-steals-my-heart"&gt;

&lt;p&gt;&lt;em&gt;Many&lt;/em&gt; of my co-workers use &lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;, it is probably the most popular editor on
our team and I understand why.&lt;/p&gt;
&lt;img alt="Editor icons" class="align-right" src="../_images/standoff.png" /&gt;
&lt;p&gt;I was an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; user — via &lt;a class="reference external" href="ftp://ftp.cs.helsinki.fi/pub/Software/Local/uEmacs-PK/"&gt;MicroEMACS&lt;/a&gt; and later &lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;GNU Emacs&lt;/a&gt; — for many
years but at some point I switched to &lt;a class="reference external" href="https://vim.sourceforge.io/"&gt;vim&lt;/a&gt;.  I can’t even remember the exact
catalyst for change, but I am pretty fickle so it may not have even been all
that important.&lt;/p&gt;
&lt;p&gt;Lately, I’ve found myself diving back in to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;.  In large part this is
because of &lt;a class="reference external" href="https://github.com/emacs-evil/evil"&gt;evil&lt;/a&gt;; I can be &lt;em&gt;in&lt;/em&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;, but &lt;em&gt;live&lt;/em&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;section id="evil-isnt-always-evil"&gt;
&lt;h2&gt;Evil isn’t always evil&lt;/h2&gt;
&lt;p&gt;So, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;evil-mode&lt;/span&gt;&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; awesome.&lt;/p&gt;
&lt;p&gt;The kindest thing I can think to say about it is this: You’ll be angry when it
doesn’t work&lt;/p&gt;
&lt;p&gt;This isn’t because it often breaks, quite the contrary.  It is simply because
it feels largely seamless.  I’ll give an example that mimics a recent session
to make my point.  For example, you’re hovering over a number you need to
change:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;magic_const&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;974&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;, you can execute &lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;ciw&amp;lt;C&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;r&amp;gt;=&amp;#64;&amp;quot;/2&amp;lt;CR&amp;gt;&lt;/kbd&gt;&lt;/kbd&gt; to cleave the number.  The
command itself is saying:&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;ciw&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change the word my cursor is on(&lt;kbd class="kbd docutils literal notranslate"&gt;c&lt;/kbd&gt;hange &lt;kbd class="kbd docutils literal notranslate"&gt;i&lt;/kbd&gt;nner &lt;kbd class="kbd docutils literal notranslate"&gt;w&lt;/kbd&gt;ord)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;&amp;lt;C&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;r&amp;gt;=&lt;/kbd&gt;&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Insert the result of an expression(see &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:h&lt;/span&gt; &lt;span class="pre"&gt;i_CTRL-R_=&lt;/span&gt;&lt;/code&gt; for awesomeness)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;&amp;#64;&amp;quot;&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use the text from last filled register, ie the text we just marked to be
changed&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;/2&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Half it&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;&amp;lt;CR&amp;gt;&lt;/kbd&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Wow.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;magic_const&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;487&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Whilst performing the same task thing in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;evil-mode&lt;/span&gt;&lt;/code&gt; I receive an error.
Emacs — quite rightly — expects you to write an &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Elisp"&gt;elisp&lt;/a&gt; expression.  There is
nothing wrong with this, but it is a sign of how good &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;evil-mode&lt;/span&gt;&lt;/code&gt; is.  It is
literally &lt;em&gt;so&lt;/em&gt; good I forget I’m not using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Oftentimes a tool’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; emulation can be summed up as needing to press
a key that kind of matches what something in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; might be, assuming you
didn’t really know what the key might be or when you’d use it.  Be that
&lt;a class="reference external" href="https://www.sublimetext.com"&gt;sublimetext&lt;/a&gt;’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vintage&lt;/span&gt;&lt;/code&gt; package that isn’t much more than normal and insert
mode, or &lt;a class="reference external" href="https://github.com/gentoo/elogv"&gt;elogv&lt;/a&gt;’s bindings that mean you have to issue &lt;kbd class="kbd docutils literal notranslate"&gt;dd&lt;/kbd&gt; to kill an
entry.  Frankly, many of the emulation layers often feel like you’re just
doubling the number of keys you have to press without any benefits&lt;a class="footnote-reference brackets" href="#id4" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="quirking-the-quirky"&gt;
&lt;h2&gt;Quirking the quirky&lt;/h2&gt;
&lt;img alt="Emacs screenshot" class="align-right" src="../_images/evil_emacs.png" style="width: 407.5px; height: 270.0px;" /&gt;
&lt;p&gt;I’ll freely admit I’ve &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;ified my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;.  I use &lt;a class="reference external" href="https://github.com/emacs-evil/evil"&gt;evil&lt;/a&gt;, my mode line
uses &lt;a class="reference external" href="http://github.com/milkypostman/powerline/"&gt;powerline&lt;/a&gt; to match &lt;a class="reference external" href="https://github.com/vim-airline/vim-airline"&gt;vim-airline&lt;/a&gt;.  I have &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zap-up-to-char&lt;/span&gt;&lt;/code&gt; mapped so
that I can mimic &lt;kbd class="kbd docutils literal notranslate"&gt;dt&lt;/kbd&gt; when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;evil-mode&lt;/span&gt;&lt;/code&gt; is disabled.&lt;/p&gt;
&lt;p&gt;Screenshots for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; really aren’t all that useful, because it
is the workflow that makes these tools powerful… but, above is my current
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; and below is my current &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;img alt="vim screenshot" class="align-left" src="../_images/delinquent_vim.png" style="width: 422.0px; height: 263.5px;" /&gt;
&lt;p&gt;The big thing you’ll notice is the fonts.  In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; I’m using scaled text
for headings in &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/rst/"&gt;reST&lt;/a&gt; files.  I’m close to believing that headings,
proportional fonts for comments and the occasional inline image are enough to
switch to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;img alt="Inline images in Emacs" class="align-right" src="../_images/misfeasant_emacs.png" style="width: 398.5px; height: 225.0px;" /&gt;
&lt;p&gt;In the third image you can see &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; is &lt;em&gt;displaying&lt;/em&gt; the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;
screenshot in the buffer for &lt;em&gt;this&lt;/em&gt; post.  This example may be quite pointless&lt;a class="footnote-reference brackets" href="#id5" id="id2"&gt;2&lt;/a&gt;, but it can be nice to have &lt;a class="reference external" href="https://www.graphviz.org/"&gt;graphviz&lt;/a&gt; output class hierarchies in to
a buffer or database schema popups(like below).&lt;/p&gt;
&lt;img alt="Schema diagram" class="align-left" src="../_images/immoral_model.png" style="width: 174.5px; height: 141.5px;" /&gt;
&lt;/section&gt;
&lt;section id="walking-the-branches"&gt;
&lt;h2&gt;Walking the branches&lt;/h2&gt;
&lt;p&gt;I’ve decided to really dig in this time, not just switch on a whim.  I’m using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; and &lt;em&gt;only&lt;/em&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; for a month, followed by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; and &lt;em&gt;only&lt;/em&gt;
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; for a month.  I’m busily writing a document of bugbears about both&lt;a class="footnote-reference brackets" href="#id6" id="id3"&gt;3&lt;/a&gt;, and then figuring out which I want to fully invest in to.  I need to stop
flip-flopping.&lt;/p&gt;
&lt;p&gt;I will say that there isn’t much in it.  With a converging setup there are
fewer and fewer differences to care about.  Things like the expression register
usage above, or built-in versus external &lt;abbr title="HyperText Markup Language"&gt;HTML&lt;/abbr&gt; preview for documents like
this.&lt;/p&gt;
&lt;p&gt;I’m actually wondering whether a &lt;a class="reference external" href="https://neovim.io"&gt;neovim&lt;/a&gt; client &lt;em&gt;in&lt;/em&gt; a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt; frame would be
the golden option.  If you know of such a thing or a better option, drop me
a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;!&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/gentoo/elogv"&gt;elogv&lt;/a&gt; for Gentoo is probably the worst example of this, as &lt;kbd class="kbd docutils literal notranslate"&gt;d&lt;/kbd&gt;
&lt;em&gt;almost&lt;/em&gt; works like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt;&lt;/code&gt; but nothing else does.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Okay, completely pointless.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.orgmode.org/"&gt;org-mode&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/jceb/vim-orgmode"&gt;vim-orgmode&lt;/a&gt; allows me to keep this across editors.  There
is very little point publishing it, as it can be summed up as “James
pressed &lt;kbd class="kbd compound docutils literal notranslate"&gt;&lt;kbd class="kbd docutils literal notranslate"&gt;&amp;lt;C&lt;/kbd&gt;-&lt;kbd class="kbd docutils literal notranslate"&gt;x&amp;gt;$something&lt;/kbd&gt;&lt;/kbd&gt; and was surprised.”&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/evil_emacs_steals_my_heart.html" rel="alternate"/>
    <summary>Many of my co-workers use emacs, it is probably the most popular editor on
our team and I understand why.Emacs screenshot</summary>
    <category term="emacs" label="emacs"/>
    <category term="vim" label="vim"/>
    <category term="evil" label="evil"/>
    <published>2018-11-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/march_toward_death.html</id>
    <title>Visualising the progress of time</title>
    <updated>2018-11-13T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="visualising-the-progress-of-time"&gt;

&lt;a class="reference external image-reference" href="https://www.progressbarosx.com/"&gt;&lt;img alt="Screenshot of Progress Bar OSX in action" src="../_images/time_progress.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;A co-worker was demoing a user session today, and pointed out a neat tool for
MacOS that displays the “continual march toward death”.  That tool was
&lt;a class="reference external" href="https://www.progressbarosx.com/"&gt;Progress Bar OSX&lt;/a&gt;, and it is pretty cool.  Sadly it is only available for
MacOS, so we’ll need to make something similar.&lt;/p&gt;
&lt;div class="h-review"&gt;
    &lt;p&gt;
        &lt;span class="p-name"&gt;
            &lt;em&gt;All&lt;/em&gt; popup problems on
            &lt;span class="p-category"&gt;Linux&lt;/span&gt;
            should be solved with
            &lt;a href="https://github.com/robm/dzen" class"p-item h-item"&gt;
                dzen
            &lt;/a&gt;
        &lt;/span&gt;, it is
        &lt;data class="p-rating" value="5"&gt;awesome&lt;/data&gt;.
        &lt;span class="e-content"&gt;
            You know this because it comes equipped with the option to
            produce
            &lt;abbr title="Knight Industries Two Thousand"&gt;KITT&lt;/abbr&gt;
            &lt;a href="https://en.m.wikipedia.org/wiki/KITT"&gt;
                Anamorphic Equalizer&lt;/a&gt;
            emulation.
        &lt;/span&gt;
    &lt;/p&gt;
&lt;/div&gt;&lt;figure class="align-default" id="id3"&gt;
&lt;a class="reference external image-reference" href="../_static/kitt.gif"&gt;&lt;img alt="Multi-band scanner in action" src="../_images/kitt06.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Click the image for an animated GIF, I’ll spare you the flashing lights in
case you wish to read on.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;section id="step-one"&gt;
&lt;h2&gt;Step one&lt;/h2&gt;
&lt;p&gt;First we’ll want to display the year:&lt;/p&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gdbar -w &lt;span class="m"&gt;1500&lt;/span&gt; -h &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;$(($(&lt;/span&gt;date +%j&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;date -d&lt;span class="s1"&gt;&amp;#39;Dec 31&amp;#39;&lt;/span&gt; +%j&lt;span class="k"&gt;)&lt;/span&gt;.0 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="p"&gt;|&lt;/span&gt; dzen2 -p &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;which results in:&lt;/p&gt;
&lt;img alt="Screenshot of simple day of year bar on 2018-11-13" src="../_images/day_bar.png" /&gt;
&lt;p&gt;The logic should be simple enough to follow(if you’re familiar with
&lt;strong class="command"&gt;date&lt;/strong&gt;’s &lt;a class="reference internal" href="../articles/march_toward_death.html#cmdoption-date-arg-j"&gt;&lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;%j&lt;/span&gt; &lt;span class="pre"&gt;formatter&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;current&lt;/span&gt; &lt;span class="pre"&gt;day&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt; &lt;span class="pre"&gt;year&lt;/span&gt;&lt;/code&gt; / &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;number&lt;/span&gt; &lt;span class="pre"&gt;of&lt;/span&gt; &lt;span class="pre"&gt;days&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt; &lt;span class="pre"&gt;year&lt;/span&gt;&lt;/code&gt;&lt;a class="footnote-reference brackets" href="#id2" id="id1"&gt;1&lt;/a&gt; * &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;100&lt;/span&gt;&lt;/code&gt; for
position in year as percentage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate the &lt;strong class="command"&gt;dzen2&lt;/strong&gt; markup for a bar of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1500&lt;/span&gt;&lt;/code&gt; pixels wide and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;20&lt;/span&gt;&lt;/code&gt; pixels high&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display it for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;5&lt;/span&gt;&lt;/code&gt; seconds&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;Be sure to notice that we force &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;number&lt;/span&gt; &lt;span class="pre"&gt;of&lt;/span&gt; &lt;span class="pre"&gt;days&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt; &lt;span class="pre"&gt;year&lt;/span&gt;&lt;/code&gt; to be a float
with the addition of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.0&lt;/span&gt;&lt;/code&gt;.  Without it the result would be rounded toward
zero, ie zero on every day but December 31ˢᵗ.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can repeat the same process for day ratio; using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;date&lt;/span&gt; &lt;span class="pre"&gt;-d&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;00:00&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;+%s&lt;/span&gt;&lt;/code&gt; to
calculate number of seconds passed from the 86400 we’ll see today.  And then
simply using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;date&lt;/span&gt; &lt;span class="pre"&gt;+%m&lt;/span&gt;&lt;/code&gt; to get today’s month as a number.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step-two"&gt;
&lt;h2&gt;Step two&lt;/h2&gt;
&lt;p&gt;We can definitely up our game here.  Why not use colours?  We’ll switch to
&lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; now, as the gigantic standard library allows us to be lazy.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pcnt_colour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;02x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
                         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colorsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hls_to_rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The function above converts a percentage value in to a hex triplet across
a green to red gradient, we use &lt;a class="reference external" href="https://docs.python.org/3/library/colorsys.html#colorsys.hls_to_rgb" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;hls_to_rgb()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; here as the &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/HLS_color_space"&gt;HLS
colour space&lt;/a&gt; is more amenable to generating smooth gradients.&lt;/p&gt;
&lt;p&gt;Now that we’re using &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; we may as well take advantage of its
&lt;a class="reference external" href="https://docs.python.org/3/library/calendar.html#module-calendar" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;calendar&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; module:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;month_days&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monthrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.python.org/3/library/calendar.html#calendar.monthrange" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;monthrange()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function returns a tuple where the second item
is the number of days in the current month.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;days_in_year&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isleap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;366&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;365&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/calendar.html#calendar.isleap" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;isleap()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; allows us to offload figuring out whether 2700 is
a leap year once senility begins to set in.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gdbar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;pcnt_colour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
                   &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll also create a utility function to generate the &lt;strong class="command"&gt;dzen2&lt;/strong&gt; markup
required to output our little blocks of data.&lt;/p&gt;
&lt;p&gt;Putting it altogether we can display our pretty little blocks with something
like the following:&lt;/p&gt;
&lt;div class="highlight-shell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./time_progress.py -w &lt;span class="m"&gt;1500&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; dzen2 -l &lt;span class="m"&gt;3&lt;/span&gt; -p &lt;span class="m"&gt;3&lt;/span&gt; -fn monospace-15 -e &lt;span class="s1"&gt;&amp;#39;onstart=uncollapse&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This creates the markup and makes &lt;strong class="command"&gt;dzen2&lt;/strong&gt; display the output for
3 seconds.&lt;/p&gt;
&lt;img alt="Screenshot of colourful progress in time" src="../_images/progress_bar.png" /&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;onstart=uncollapse&lt;/span&gt;&lt;/code&gt; attribute tell &lt;strong class="command"&gt;dzen2&lt;/strong&gt; that we want to see
the full output on startup, without it we’d see just the title bar until we
moved our pointer over the header.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step-four"&gt;
&lt;h2&gt;Step four&lt;/h2&gt;
&lt;p&gt;You can find the script I used &lt;a class="reference download internal" download="" href="../_downloads/8bb0952b2cf5d96d60e8d4457de4c840/time_progress.py"&gt;&lt;code class="xref download docutils literal notranslate"&gt;&lt;span class="pre"&gt;here&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  It isn’t
pretty, but it will do.  If I come to depend on it I’m sure that I’ll make
something better.&lt;/p&gt;
&lt;p&gt;I think it is important to note that if you’ve got this far and you’re thinking
about doing this yourself you should consider buying the &lt;a class="reference external" href="https://www.progressbarosx.com/"&gt;Progress Bar OSX&lt;/a&gt;
app.  This document wouldn’t exist without it and rewarding creators is
important, even when they ignore your chosen platform ;)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step"&gt;
&lt;h2&gt;Step ∞&lt;/h2&gt;
&lt;p&gt;As always with any code that touches dates &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Here_be_dragons"&gt;“Here be dragons”&lt;/a&gt;.  For example,
I’ll leave it as an exercise for the reader how to handle calculations for days
with &lt;abbr title="Daylight Saving Time"&gt;DST&lt;/abbr&gt; transitions.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id2"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Calculating the day of year for December 31ˢᵗ allows one to work in leap
years.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;dl class="std option"&gt;
&lt;dt class="sig sig-object std" id="cmdoption-date-arg-j"&gt;
&lt;span class="sig-name descname"&gt;&lt;span class="pre"&gt;%j&lt;/span&gt;&lt;/span&gt;&lt;span class="sig-prename descclassname"&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Displays the day number of the given year, see &lt;em class="manpage"&gt;strftime(3)&lt;/em&gt; if
this is new to you.&lt;/p&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/march_toward_death.html" rel="alternate"/>
    <summary>A co-worker was demoing a user session today, and pointed out a neat tool for
MacOS that displays the “continual march toward death”.  That tool was
Progress Bar OSX, and it is pretty cool.  Sadly it is only available for
MacOS, so we’ll need to make something similar.Screenshot of colourful progress in time</summary>
    <category term="linux" label="linux"/>
    <category term="dzen" label="dzen"/>
    <published>2018-11-13T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/redo_ninja_make.html</id>
    <title>while $sun; do make hay; done</title>
    <updated>2018-11-23T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="while-sun-do-make-hay-done"&gt;

&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;This is a &lt;strong&gt;massive&lt;/strong&gt; brain dump, which I plan to rewrite in to a series at
some point.  However, until that imaginary date arrives…&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have a fondness for &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Make_(software)"&gt;make&lt;/a&gt;, but don’t quite know why.  On some days it is
&lt;em&gt;the&lt;/em&gt; bane of my life, and I feel we could do better.  It is, however,
incredibly useful and allows us to easily perform so many of the repetitive
tasks we in the software world have lucked ourselves in to.&lt;/p&gt;
&lt;p&gt;One project that I’ve worked on for a decade has &lt;em&gt;ten thousand&lt;/em&gt; lines of hand
written &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt;s, which is just plain ridiculous.  Nobody should be
hand writing that much build infrastructure, even if it started with good
intentions and a scant 120 lines.&lt;/p&gt;
&lt;section id="which-make"&gt;
&lt;h2&gt;Which &lt;strong class="command"&gt;make&lt;/strong&gt;?&lt;/h2&gt;
&lt;p&gt;A hardly insignificant number of those 10,000 lines are to workaround
incompatibilities in various tools that advertise themselves as &lt;strong class="command"&gt;make&lt;/strong&gt;.
Forcing a dependency on &lt;a class="reference external" href="https://www.gnu.org/software/make/make.html"&gt;GNU make&lt;/a&gt; wouldn’t suddenly drop the line count by
60% or magically transform the robustness of our builds, but it would help.&lt;/p&gt;
&lt;p&gt;I’ll take a tiny example from the project I’m working on right now.  Which
common versions of &lt;strong class="command"&gt;make&lt;/strong&gt; will it fail on and why?&lt;/p&gt;
&lt;div class="highlight-make notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;MAKE_SUBDIRS &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;= …

&lt;span class="nf"&gt;m/clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;subst&lt;/span&gt; &lt;span class="nv"&gt;m&lt;/span&gt;/&lt;span class="nv"&gt;clean&lt;/span&gt;,,&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;MAKE_SUBDIRS&lt;/span&gt;:%=%/&lt;span class="nv"&gt;clean&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
    +echo &lt;span class="s2"&gt;&amp;quot;Don’t use &amp;#39;make -n&amp;#39; to test without side effects either&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We even have a 800 line &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile.debug&lt;/span&gt;&lt;/code&gt; include which defines
a namespace of subcommands(like the &lt;strong&gt;m&lt;/strong&gt;aintainer namespace above) to aid
when the inevitable errors show up.  Most of the stuff in that file is
&lt;em&gt;absolutely amazing&lt;/em&gt;, I’m working with a few genuine &lt;strong class="command"&gt;make&lt;/strong&gt; masters.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I am not a&lt;/em&gt; &lt;strong class="command"&gt;make&lt;/strong&gt; &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I often find myself forgetting which &lt;strong class="command"&gt;make&lt;/strong&gt; supports some feature, or which one
fails horribly when you use that one “standard” feature every &lt;strong class="command"&gt;make&lt;/strong&gt; supports.
Even in the minutia of the build there are things that are subobtimal, for
example in the previously mentioned project there are a variety of suffix rules
&lt;em&gt;and&lt;/em&gt; pattern rules which &lt;em&gt;could&lt;/em&gt; be uniform if only we’d managed to force
a specific style&lt;a class="footnote-reference brackets" href="#id8" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Late last year I posted the following note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Just finished my 1º &lt;strong&gt;#guile&lt;/strong&gt; &lt;strong&gt;make&lt;/strong&gt; extension… &lt;abbr title="Today I Learned"&gt;TIL&lt;/abbr&gt; none of our &lt;abbr title="Continuous Integration"&gt;CI&lt;/abbr&gt; servers have
&lt;strong&gt;#make&lt;/strong&gt; with &lt;strong&gt;#guile&lt;/strong&gt; support, and many devs have pre-GPL3 make.&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://jnrowe.github.io/mnotes/#2017-12-07T17:40:14+00:00"&gt;2017-12-07T17:40:14+00:00&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;It is still mostly true, our build servers and many developers still don’t have
a &lt;a class="reference external" href="https://www.gnu.org/software/guile/"&gt;guile&lt;/a&gt; enabled &lt;a class="reference external" href="https://www.gnu.org/software/make/make.html"&gt;GNU make&lt;/a&gt;.  The build servers don’t because &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;guile&lt;/span&gt;&lt;/code&gt;
support isn’t enabled in the packages for some reason, and the devs that use
systems which refuse to ship a recent enough versions of &lt;a class="reference external" href="https://www.gnu.org/software/make/make.html"&gt;GNU make&lt;/a&gt; to avoid
the GPLv3&lt;a class="footnote-reference brackets" href="#id9" id="id2"&gt;2&lt;/a&gt; don’t have it either.&lt;/p&gt;
&lt;p&gt;There has to be a better way…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="redo"&gt;
&lt;h2&gt;&lt;strong class="command"&gt;redo&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;abbr title="Daniel J. Bernstein"&gt;djb&lt;/abbr&gt;’s &lt;strong class="command"&gt;redo&lt;/strong&gt; is a &lt;em&gt;huge&lt;/em&gt; step in the right
direction&lt;a class="footnote-reference brackets" href="#id10" id="id3"&gt;3&lt;/a&gt;, but its various implementations are plagued by many of the
problems that &lt;strong class="command"&gt;make&lt;/strong&gt; has.  There is &lt;em&gt;no&lt;/em&gt; single tool that can uniformly be
recognised as &lt;strong class="command"&gt;redo&lt;/strong&gt;, in fact it feels like somehow there are as many
implementations of &lt;strong class="command"&gt;redo&lt;/strong&gt; floating around as there are of &lt;strong class="command"&gt;make&lt;/strong&gt; even though it
is &lt;em&gt;thirty years younger&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While &lt;strong class="command"&gt;redo&lt;/strong&gt; is awesome in many of its implementations you find yourself having
to remember the idiosyncrasies of yet another collection of slightly
incompatible tools.  If you’re using Avery Pennarun’s popular &lt;a class="reference external" href="https://github.com/apenwarr/redo/"&gt;Python
implementation&lt;/a&gt; then you may not remember to make your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.do&lt;/span&gt;&lt;/code&gt; files
executable or to give them a proper &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#!&lt;/span&gt;&lt;/code&gt; line, as it doesn’t necessarily
require them.  If you using Jonathan de Boyne Pollard’s impressive &lt;a class="reference external" href="http:/homepage.ntlworld.com./j.deboynepollard/Softwares/redo/"&gt;C
implementation&lt;/a&gt; you may not remember that you don’t have &lt;strong class="command"&gt;redo-stamp&lt;/strong&gt;
available to you.  As &lt;strong class="command"&gt;redo&lt;/strong&gt; is less common specifying the &lt;em&gt;exact&lt;/em&gt; tool you’re
calling &lt;strong class="command"&gt;redo&lt;/strong&gt; is &lt;em&gt;far&lt;/em&gt; easier than with &lt;strong class="command"&gt;make&lt;/strong&gt; though, and I’m yet to see an
angry issue reported in projects that do so&lt;a class="footnote-reference brackets" href="#id11" id="id4"&gt;4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, once you’ve managed to keep your eyes on the shifting landscape — or have
forced a specific implementation of &lt;strong class="command"&gt;redo&lt;/strong&gt; — you have to turn your attention to
your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.do&lt;/span&gt;&lt;/code&gt; files.  Is &lt;strong class="command"&gt;/bin/sh&lt;/strong&gt; &lt;a class="reference external" href="http://tiswww.case.edu/php/chet/bash/bashtop.html"&gt;bash&lt;/a&gt;, &lt;a class="reference external" href="http://gondor.apana.org.au/~herbert/dash/"&gt;dash&lt;/a&gt;, or something else
entirely?  Is that large &lt;strong class="command"&gt;find&lt;/strong&gt; to &lt;strong class="command"&gt;xargs&lt;/strong&gt; pipe you’re using
to pump &lt;strong class="command"&gt;redo-ifchange&lt;/strong&gt; going to fail because some platform’s
&lt;strong class="command"&gt;find&lt;/strong&gt; treats links differently?  Do you need to specify
&lt;strong class="command"&gt;gsed&lt;/strong&gt; on MacOS to work around issues with the default &lt;strong class="command"&gt;sed&lt;/strong&gt;
command?  As a first port of call &lt;em&gt;at least&lt;/em&gt; run &lt;strong class="command"&gt;checkbashisms&lt;/strong&gt; from
the &lt;a class="reference external" href="https://packages.debian.org/devscripts"&gt;devscripts&lt;/a&gt; package on your public &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.do&lt;/span&gt;&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;I mean — to an extent — you need to be on top of these things in your &lt;strong class="command"&gt;make&lt;/strong&gt;
usage too, but you’re likely to have far more complex &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.do&lt;/span&gt;&lt;/code&gt; files than the
shell incantations in your rule’s recipes.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;If you’re using the Python &lt;strong class="command"&gt;redo&lt;/strong&gt; implementation you should be considering
the speed of the tools too, so as to not adversely affect your build times.
For example, it is good practice to collect &lt;em&gt;all&lt;/em&gt; dependencies before
calling &lt;strong class="command"&gt;redo-ifchange&lt;/strong&gt; instead of staggering their addition
throughout your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.do&lt;/span&gt;&lt;/code&gt; file as you encounter them.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All this is worth the cost though.  You end up with stable, self encapsulated
build rules such as the following:&lt;/p&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redo-ifchange ./.meta/cc ./.meta/cflags
&lt;span class="nb"&gt;read&lt;/span&gt; cc &amp;lt; ./.meta/cc
&lt;span class="nb"&gt;read&lt;/span&gt; ccflags &amp;lt; ./.meta/cflags
&lt;span class="nv"&gt;$cc&lt;/span&gt; &lt;span class="nv"&gt;$cflags&lt;/span&gt; -o &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$3&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;.c&amp;quot;&lt;/span&gt; -MD -MF &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;.d&amp;quot;&lt;/span&gt;
sed -e &lt;span class="s2"&gt;&amp;quot;s|^&lt;/span&gt;&lt;span class="nv"&gt;$3&lt;/span&gt;&lt;span class="s2"&gt;:||&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;.d&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs redo-ifchange
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That is a cropped excerpt from a project’s &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;default.o.do&lt;/span&gt;&lt;/code&gt;.  It defines
a rule that builds &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.o&lt;/span&gt;&lt;/code&gt; files from their corresponding &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.c&lt;/span&gt;&lt;/code&gt; file, and it
makes sure those files are rebuilt in the event that you change the value of
&lt;span class="target" id="index-0"&gt;&lt;/span&gt;&lt;a class="reference internal" href="../glossary.html#envvar-CC"&gt;&lt;code class="xref std std-envvar docutils literal notranslate"&gt;&lt;span class="pre"&gt;CC&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; or &lt;span class="target" id="index-1"&gt;&lt;/span&gt;&lt;a class="reference internal" href="../glossary.html#envvar-CFLAGS"&gt;&lt;code class="xref std std-envvar docutils literal notranslate"&gt;&lt;span class="pre"&gt;CFLAGS&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  It also handles &lt;em&gt;all&lt;/em&gt; the dependencies your
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#include&lt;/span&gt;&lt;/code&gt; directives gave by taking advantage of the compiler’s knowledge of
the build.  Implementing the same functionality with &lt;strong class="command"&gt;make&lt;/strong&gt; is far more
convoluted, and requires a heap of code if you wish to use finer grained
controls than simply rebuilding &lt;em&gt;everything&lt;/em&gt; by depending on your
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt; from within your rules.&lt;/p&gt;
&lt;p&gt;Still &lt;strong class="command"&gt;redo&lt;/strong&gt; is a big leap forward from plain &lt;strong class="command"&gt;make&lt;/strong&gt;, and I do recommend it.
I even gave a talk on it at &lt;abbr title="London Functional"&gt;LoFu&lt;/abbr&gt; ‘16, and I know
some people switched after hearing that as I’ve been fielding informal support
requests ever since ;)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="gup"&gt;
&lt;h2&gt;&lt;strong class="command"&gt;gup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I want to give &lt;a class="reference external" href="https://github.com/timbertson/gup/"&gt;Tim Cuthbertson’s gup&lt;/a&gt; an honourable mention here.  &lt;strong class="command"&gt;gup&lt;/strong&gt; is
an improved &lt;strong class="command"&gt;redo&lt;/strong&gt; implementation, but is wholly incompatible with it.  It is
available in both a &lt;a class="reference external" href="https://github.com/timbertson/gup/tree/master/python"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/timbertson/gup/tree/master/ocaml"&gt;ocaml&lt;/a&gt; version.  It fixes a few of the most
annoying problems in &lt;strong class="command"&gt;redo&lt;/strong&gt;, but operates in largely the same way conceptually.
Any of the skills you’ve learnt with &lt;strong class="command"&gt;redo&lt;/strong&gt; are easy to transfer, and you can
update your builds to use &lt;strong class="command"&gt;gup&lt;/strong&gt; with very little effort.&lt;/p&gt;
&lt;p&gt;I’m a big fan of &lt;strong class="command"&gt;gup&lt;/strong&gt;, and for a couple of years I even used it to power my
home directory having &lt;span class="xref std std-doc"&gt;moved on from make&lt;/span&gt;.  An
excerpt from my homedir’s debug support can perhaps serve as an example of its
usage:&lt;/p&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!sh&lt;/span&gt;

&lt;span class="nv"&gt;self&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;realpath &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/gup/lib.sh &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;: Only for use within a gup file&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUP_XTRACE&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -eq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; -x
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$GUP_VERBOSE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -ge &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; -v

&lt;span class="nb"&gt;set&lt;/span&gt; -eu

gup -u &lt;span class="nv"&gt;$self&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Outside of my own projects I’ve never seen &lt;strong class="command"&gt;gup&lt;/strong&gt; in use, which anecdotally
makes it even less common than &lt;strong class="command"&gt;redo&lt;/strong&gt;.  Whether that is a deal breaker for you
isn’t for me to decide, but I would recommend that you check it out if you’re
considering using &lt;strong class="command"&gt;redo&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I want to add a final note that Tim is nice to work with.  I’ve filed bugs in
other projects that he maintains and it has been a good experience each time.
I’m sure you’ll get the same great service if you were to find a problem in
&lt;strong class="command"&gt;gup&lt;/strong&gt;!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ninja"&gt;
&lt;h2&gt;&lt;strong class="command"&gt;ninja&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Enter the &lt;a class="reference external" href="https://ninja-build.org/"&gt;ninja&lt;/a&gt;.  I’ve switched many projects to
&lt;strong class="command"&gt;ninja&lt;/strong&gt;, but not because it is my new favourite tool.  I’ve switched entirely
because it &lt;em&gt;feels&lt;/em&gt; like it has the momentum to supplant &lt;strong class="command"&gt;make&lt;/strong&gt;.  Given the
choice I’d honestly rather see a &lt;strong class="command"&gt;redo&lt;/strong&gt; implementation such as &lt;strong class="command"&gt;gup&lt;/strong&gt; succeed,
but &lt;strong class="command"&gt;ninja&lt;/strong&gt; is a great alternative.&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Implementations&lt;/p&gt;
&lt;p&gt;In a &lt;em&gt;massive&lt;/em&gt; change from the previous sections I can mention a tool with
alternatives where compatibility is &lt;strong&gt;100%&lt;/strong&gt;.  &lt;a class="reference external" href="https://github.com/michaelforney/samurai/"&gt;samurai&lt;/a&gt; is an alternative
&lt;strong class="command"&gt;ninja&lt;/strong&gt; implementation which is drop-in replacement, without any
incompatible feature changes.  &lt;a class="reference external" href="http://shakebuild.com/"&gt;shake&lt;/a&gt; is an alternative build tool with
support for processing &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;build.ninja&lt;/span&gt;&lt;/code&gt; baked in, and has some
interesting functionality for inspecting your builds that &lt;strong class="command"&gt;ninja&lt;/strong&gt; itself
doesn’t provide.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I’ll make a confession here, my home directory now requires &lt;strong class="command"&gt;ninja&lt;/strong&gt;.  Yes, my
config files have made the progression from &lt;strong class="command"&gt;make&lt;/strong&gt; to &lt;strong class="command"&gt;redo&lt;/strong&gt; to &lt;strong class="command"&gt;gup&lt;/strong&gt; and now
to &lt;strong class="command"&gt;ninja&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; homeninja
&lt;span class="go"&gt;homeninja=&amp;#39;ninja -C ~ -j1&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; homeninja -t targets &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;span class="go"&gt;423&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;figure class="align-default" id="id15"&gt;
&lt;img alt="Digraph of home directory’s top level build" src="../_images/homeninja.png" style="width: 390.25px; height: 186.25px;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;A chunk of the &lt;abbr title="Directed Acyclic Graph"&gt;DAG&lt;/abbr&gt; for my home directory under &lt;strong class="command"&gt;ninja&lt;/strong&gt;.  The full image is
both &lt;em&gt;chock full&lt;/em&gt; of private data and 9 &lt;abbr title="MegaBytes"&gt;MB&lt;/abbr&gt;(29000 pixels
tall), so I’ll save all of us from that.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We’ve already seen a benefit of &lt;strong class="command"&gt;ninja&lt;/strong&gt; here, it can immediately display
a &lt;abbr title="Directed Acyclic Graph"&gt;DAG&lt;/abbr&gt; to help in debugging by giving the option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt; &lt;span class="pre"&gt;graph&lt;/span&gt;&lt;/code&gt;.  While both
&lt;strong class="command"&gt;gup&lt;/strong&gt; and &lt;strong class="command"&gt;redo&lt;/strong&gt; can be easily tamed to produce a simple &lt;a class="reference external" href="https://www.graphviz.org/"&gt;graphviz&lt;/a&gt; image as
above&lt;a class="footnote-reference brackets" href="#id12" id="id5"&gt;5&lt;/a&gt;, doing so with &lt;strong class="command"&gt;make&lt;/strong&gt; is very difficult&lt;a class="footnote-reference brackets" href="#id13" id="id6"&gt;6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong class="command"&gt;ninja&lt;/strong&gt; shares a lot in common with &lt;strong class="command"&gt;redo&lt;/strong&gt;.  It automatically depends on its
build rules, and any changes to them cleanly ripple out through the build.  It
also makes adding computed dependencies very easy, although you need to mangle
them &lt;em&gt;in to&lt;/em&gt; &lt;strong class="command"&gt;make&lt;/strong&gt; format instead of extracting &lt;em&gt;from&lt;/em&gt; &lt;strong class="command"&gt;make&lt;/strong&gt; format as you
would have with &lt;strong class="command"&gt;redo&lt;/strong&gt;.  A quick example of how to make &lt;a class="reference external" href="http://docutils.sourceforge.net/"&gt;docutils&lt;/a&gt; dependencies
work is below:&lt;/p&gt;
&lt;div class="highlight-ini notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;rst2html.py --record-dependencies $out.d.tmp $in $out; $&lt;/span&gt;
&lt;span class="s"&gt;    [ -f $out.d.tmp ] &amp;amp;&amp;amp; echo $out: $$(cat $out.d.tmp) &amp;gt; $out.d; $&lt;/span&gt;
&lt;span class="s"&gt;    rm -f $out.d.tmp&lt;/span&gt;
&lt;span class="na"&gt;depfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$out.d&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;gcc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Of course we’re making trade offs at this point, and they are basically:&lt;/p&gt;
&lt;table class="docutils align-default"&gt;
&lt;colgroup&gt;
&lt;col style="width: 19%" /&gt;
&lt;col style="width: 29%" /&gt;
&lt;col style="width: 52%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Tool&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Simple tasks&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Complex tasks&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;&lt;strong class="command"&gt;make&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Easy&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Tricky, and brittle&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;&lt;strong class="command"&gt;redo&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Easy&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Repetitive, but simple&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;&lt;strong class="command"&gt;ninja&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Easy&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Offload to another tool&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong class="command"&gt;ninja&lt;/strong&gt; really does make the easy parts easy, and there are a variety of tools
to work with more complex builds.  You might even find you can get away with
a tiny bit of scripting around &lt;a class="reference external" href="https://pypi.python.org/pypi/ninja_syntax"&gt;ninja_syntax&lt;/a&gt;, but the manual work will
quickly build up with that approach.&lt;/p&gt;
&lt;section id="meson"&gt;
&lt;h3&gt;&lt;strong class="command"&gt;meson&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://mesonbuild.com/"&gt;meson build system&lt;/a&gt; is probably the frontrunner today.&lt;/p&gt;
&lt;p&gt;In a move that feels like it is simply meant to &lt;a class="reference external" href="http://suckless.org/philosophy/"&gt;annoy the people behind
suckless&lt;/a&gt; I use &lt;strong class="command"&gt;meson&lt;/strong&gt; to build my &lt;a class="reference external" href="https://dwm.suckless.org/"&gt;dwm&lt;/a&gt; configuration.  Not because it is in
an important choice, but solely because it was a small and simple package that
made learning the basics of &lt;strong class="command"&gt;meson&lt;/strong&gt; easier.  A trimmed down version of the
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;meson.build&lt;/span&gt;&lt;/code&gt; is below:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dwm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;default_options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;std=c99&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fontconfig_dep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fontconfig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x11_dep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x11&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xft_dep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xinerama_dep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xinerama&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;xinerama_dep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;add_project_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-DXINERAMA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;endif&lt;/span&gt;

&lt;span class="n"&gt;config_h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;custom_target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gen-config&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;config.def.h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;config.h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--no-clobber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@INPUT@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="s1"&gt;&amp;#39;@OUTPUT@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dwm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;drw.c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dwm.c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;util.c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config_h&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fontconfig_dep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x11_dep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xft_dep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xinerama_dep&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;install_man&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dwm.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is broadly comparable with an &lt;a class="reference external" href="https://www.gnu.org/software/autoconf/"&gt;autoconf&lt;/a&gt; and &lt;a class="reference external" href="https://www.gnu.org/software/automake/"&gt;automake&lt;/a&gt; solution for
a similar task, albeit with far less behind the scenes complexity.  It is
a superior solution to upstream’s choice of hand editing a &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt;, as
it handles rebuilds when you change options automatically too.&lt;/p&gt;
&lt;p&gt;&lt;strong class="command"&gt;meson&lt;/strong&gt; supports many languages out of the box; C, C++, &lt;a class="reference external" href="https://wiki.gnome.org/Projects/Vala"&gt;vala&lt;/a&gt;, &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;rust&lt;/a&gt;, &amp;amp;c.  If
you find yourself needing to add your own it is quite simple, just subclass
&lt;a class="reference external" href="https://github.com/mesonbuild/meson/blob/master/mesonbuild/compilers/compilers.py"&gt;Compiler&lt;/a&gt; and set a few methods.  It took less than five minutes to add support
for the transpiler we use on some of our projects&lt;a class="footnote-reference brackets" href="#id14" id="id7"&gt;7&lt;/a&gt;, and probably another 10
a few weeks later to tighten it up and add tests when &lt;strong class="command"&gt;meson&lt;/strong&gt; support was
merged.&lt;/p&gt;
&lt;p&gt;In fact because &lt;strong class="command"&gt;meson&lt;/strong&gt; is such a well defined wrapper around &lt;strong class="command"&gt;ninja&lt;/strong&gt; I’d
recommend it &lt;em&gt;after&lt;/em&gt; &lt;strong class="command"&gt;ninja&lt;/strong&gt;.  If you start a small project where a simple
static &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;build.ninja&lt;/span&gt;&lt;/code&gt; is enough, then “upgrading” to &lt;strong class="command"&gt;meson&lt;/strong&gt; &lt;em&gt;iff&lt;/em&gt; the
need arises at some point is really easy.&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;Hint&lt;/p&gt;
&lt;p&gt;Co-workers can see this in action in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zephyr_ground_station&lt;/span&gt;&lt;/code&gt;
repository.  I started out with mock up graphics from the Zephyr spec,
added a manual &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;build.ninja&lt;/span&gt;&lt;/code&gt; as I started to code the interface,
switched to a simple generated file using &lt;strong class="command"&gt;ninja&lt;/strong&gt;’s &lt;a class="reference external" href="https://pypi.python.org/pypi/ninja_syntax"&gt;ninja_syntax&lt;/a&gt;
module when the project grew, and eventually changed to &lt;strong class="command"&gt;meson&lt;/strong&gt; with a few
edits when the project was eventually greenlit.  It was a really clean
process, and one I’d follow again.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="googles-kati"&gt;
&lt;h3&gt;Google’s kati&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/google/kati/"&gt;kati&lt;/a&gt; is a nice first step if you’re currently using &lt;strong class="command"&gt;make&lt;/strong&gt; and want to try out
&lt;strong class="command"&gt;ninja&lt;/strong&gt;.  It will generate a &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;build.ninja&lt;/span&gt;&lt;/code&gt; from your &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt;,
but it won’t be very idiomatic.&lt;/p&gt;
&lt;p&gt;It does serve as an immediate example of the difference you get with a no-op
build from &lt;strong class="command"&gt;make&lt;/strong&gt; and &lt;strong class="command"&gt;ninja&lt;/strong&gt; though, and sometimes that alone feels like
enough to integrate &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;kati&lt;/span&gt;&lt;/code&gt; in to your build.&lt;/p&gt;
&lt;p&gt;Because it mechanically converts rules from &lt;strong class="command"&gt;make&lt;/strong&gt; to &lt;strong class="command"&gt;ninja&lt;/strong&gt; it is incredibly
verbose, but it does so in such a manner that it is easy to use the output as
a basis for full switch.&lt;/p&gt;
&lt;div class="admonition attention"&gt;
&lt;p class="admonition-title"&gt;Attention&lt;/p&gt;
&lt;p&gt;I should mention &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmake&lt;/span&gt;&lt;/code&gt; at least once, just so that readers know that
I’m aware of it.  I’m ignoring it because of its inscrutable syntax, its
&lt;em&gt;interesting&lt;/em&gt; &lt;a class="reference external" href="https://pkgconfig.freedesktop.org/wiki/"&gt;pkg-config&lt;/a&gt; story, its propensity for creating ten minute
multi-pass pre-build steps, and its love for running the &lt;strong class="command"&gt;cmake&lt;/strong&gt;
binary thousands of times in each build.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;There are a lot of options available if you’re feeling growing pains with
&lt;strong class="command"&gt;make&lt;/strong&gt;, or are just looking to tighten up builds.  I’ve covered a few here, but
there are many more out there.  I’ve ignored a few excellent options that
fit within the realms of what we commonly refer to as a build system(&lt;a class="reference external" href="https://premake.github.io/"&gt;premake&lt;/a&gt;
and &lt;a class="reference external" href="http://gittup.org/tup"&gt;tup&lt;/a&gt; both spring to mind), in part because I don’t have enough real world
experience to comment on them.&lt;/p&gt;
&lt;p&gt;This has turned in to a much longer document than I had originally envisioned,
but I hope there is enough meat in to make that worthwhile.&lt;/p&gt;
&lt;p&gt;Finally, in much the same way I tend to finish my build system talks with an
offer to help in the final slide, I’ll add one here too.  If you’ve made it
this far and need a little help, don’t hesitate to get in &lt;a class="reference internal" href="../contact.html"&gt;&lt;span class="doc"&gt;contact&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;From today that should be no more.  I’ve added a rule to break the build
if you add a suffix rule, but I’m sure we’ll see some commentary on
whether that was the right way to pin it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id9"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;For the projects I’m currently working the number of devs using systems
with pre-GPLv3 make is very low, but it is &lt;em&gt;entirely&lt;/em&gt; dependent on the
ecosystem of a given project.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id10"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;It is defined only in &lt;a class="reference external" href="http://cr.yp.to/redo.html"&gt;a collection of short descriptions&lt;/a&gt; on djb’s
website, and there is no known reference implementation.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id11"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This is defintely not true of &lt;strong class="command"&gt;make&lt;/strong&gt; requirements, I’ve seen many
ridiculously angry bugs filed when builds only work with &lt;a class="reference external" href="https://www.gnu.org/software/make/make.html"&gt;GNU make&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id12"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id5"&gt;5&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Avery Pennarun’s &lt;a class="reference external" href="https://github.com/apenwarr/redo/"&gt;Python implementation&lt;/a&gt; of &lt;strong class="command"&gt;redo&lt;/strong&gt; stores it dependency
data in a &lt;a class="reference external" href="https://sqlite.org/"&gt;sqlite&lt;/a&gt; database named &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;.redo/redo.sqlite3&lt;/span&gt;&lt;/code&gt;, making it
is easy to transform in to a &lt;strong class="command"&gt;dot&lt;/strong&gt; compliant input.  For
instance, here is my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dzen2&lt;/span&gt;&lt;/code&gt; tree as built by &lt;strong class="command"&gt;redo&lt;/strong&gt;:&lt;/p&gt;
&lt;img alt="Digraph of dzen2 build with redo" src="../_images/dzen.png" style="width: 487.41px; height: 163.68px;" /&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id13"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id6"&gt;6&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A search yields a few attempts to do so, many requiring large runtimes
and all with a list of limitations likely to fall far below a projects
actual usage of &lt;strong class="command"&gt;make&lt;/strong&gt;.  The two I popped open rely on parsing the
output from &lt;strong class="command"&gt;make -pn&lt;/strong&gt; for example, and neither took in to
account &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; code execution either.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id14"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id7"&gt;7&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;If you need a custom compiler the &lt;a class="reference external" href="https://github.com/mesonbuild/meson/blob/master/mesonbuild/compilers/vala.py"&gt;vala support&lt;/a&gt; is probably a good
starting point as it is not too complex, and implements a good subset of
required interface.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/redo_ninja_make.html" rel="alternate"/>
    <summary>This is a massive brain dump, which I plan to rewrite in to a series at
some point.  However, until that imaginary date arrives…Digraph of home directory’s top level build</summary>
    <category term="tools" label="tools"/>
    <category term="build" label="build"/>
    <category term="make" label="make"/>
    <category term="ninja" label="ninja"/>
    <category term="redo" label="redo"/>
    <published>2018-11-23T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/new_love_giddiness.html</id>
    <title>Giddy new project love</title>
    <updated>2018-12-04T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="giddy-new-project-love"&gt;

&lt;p&gt;I’ve recently inherited a new tier-one project, which is great news!  Sadly, it
is in real need of some Tender Loving Care™.  Was there ever an inherited
project that wasn’t?&lt;/p&gt;
&lt;p&gt;The project is our semi-custom transpiler for &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; affectionately called
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt;.  I say semi-custom as it was spun out from a consortium effort to
“facilitate reliability and improve portability” of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; projects, which is
a far loftier sounding goal than it need be.  In essence, it is the
codification of rules and guidelines we’ve adhered to since a partner meeting
in &lt;em&gt;1996&lt;/em&gt;, and that we find ourselves still following today&lt;a class="footnote-reference brackets" href="#id4" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wasn’t around back when the original group was formed, and it was disbanded
before I’d even heard of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt;.  This project is genuinely
multi-generational, which &lt;em&gt;feels&lt;/em&gt; nice.  All too often our work in software can
feel ephemeral; squeaked on a whiteboard in the morning, tapped in to
a computer in the afternoon and swept away by the janitors as night falls.&lt;/p&gt;
&lt;section id="hopes-and-dreams"&gt;
&lt;h2&gt;Hopes and dreams&lt;/h2&gt;
&lt;p&gt;As the project &lt;em&gt;should&lt;/em&gt; have significant longevity I find myself pondering the
future.  &lt;em&gt;If&lt;/em&gt; I could change things for the next 20 years, what should I do to
make that experience better?  Should I do &lt;em&gt;nothing at all&lt;/em&gt; and just chug along
reducing the anxiety that even small changes will evoke?&lt;/p&gt;
&lt;p&gt;I also find myself pondering the present.  Could a truly radical change &lt;em&gt;today&lt;/em&gt;
obviate the need for this project entirely before the next maintainer grabs the
reins for their reign of anxiety?  Would that necessarily be a good thing?&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Common errors&lt;/p&gt;
&lt;p&gt;I’ve always considered it odd that we can choose to attach a listing of
common errors to a product and expect people to use it.  If we know it is
common for users to make critical errors because of a design decision we
need to make a new design, not a new bullet point on the list.&lt;/p&gt;
&lt;p&gt;Even simple things like watching an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; beginner make the classic
“atomic means atomic” mistake should be designed out, and not &lt;em&gt;solved&lt;/em&gt; with
an addendum of “protected objects mean atomic” chicanery.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Many of the advantages that we associate with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; — such as its mighty type
safety — no longer feel that advanced or remotely unique.  Even “hobby”
languages such as &lt;a class="reference external" href="https://nim-lang.org/"&gt;nim&lt;/a&gt; implement many of the safety features we expect from
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; implementations&lt;a class="footnote-reference brackets" href="#id5" id="id2"&gt;2&lt;/a&gt;; subrange types being a fine example where the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nim&lt;/span&gt;&lt;/code&gt; designers have absorbed an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; feature.  And standard everyday
languages now often have tooling that is capable of providing &lt;em&gt;many&lt;/em&gt; of the
benefits of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt;, and one should really only expect this to increase.&lt;/p&gt;
&lt;p&gt;What really hammers home the point here is that a good number of the features
one thinks about weren’t even available in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; began; fex
contracts are from &lt;a class="reference external" href="http://www.ada2012.org/"&gt;Ada 2012&lt;/a&gt;.  Will languages leapfrog &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt; in its niche
by borrowing and then sprint away by innovating as their uptake increases?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="benefits-of-transpilation"&gt;
&lt;h2&gt;Benefits of transpilation&lt;/h2&gt;
&lt;p&gt;The original &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; authors implemented a transpiler because it made
various checks simpler to carry out.  According to the documentation, it was
never intended to become a full blown language in its own right… which of
course it has.&lt;/p&gt;
&lt;p&gt;Maybe we should take the opportunity to stay on top of the changing language
landscape thanks to the side effect of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt;’s implementation details.
Given that we’re already transpiling should we consider alternative targets?
&lt;a class="reference external" href="http://www.ocaml.org/"&gt;ocaml&lt;/a&gt; is the language that immediately jumps to mind, as it is syntactically
close to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; and it has an excellent type system.  And once you have
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ocaml&lt;/span&gt;&lt;/code&gt; it is a smaller step to &lt;a class="reference external" href="http://fsharp.org/"&gt;F#&lt;/a&gt; thanks to its legacy &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ocaml&lt;/span&gt;&lt;/code&gt; mode.&lt;/p&gt;
&lt;p&gt;The code base is amenable to multiple targets already.  A couple of years ago
I implemented support for testing without relying on the support kernel
supplied by our compiler vendor&lt;a class="footnote-reference brackets" href="#id6" id="id3"&gt;3&lt;/a&gt;.  At its base &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; will optionally
generate &lt;a class="reference external" href="http://www.lua.org/"&gt;lua&lt;/a&gt; bytecode that is loaded in to a tiny emulator which can be driven
by other &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lua&lt;/span&gt;&lt;/code&gt; scripts to test an implementation.  Its main purpose was to
allow early experimentation without the expense and time of waiting for
hardware re-fabrication.&lt;/p&gt;
&lt;figure class="align-default" id="id7"&gt;
&lt;img alt="sandfly debug architecture" src="../_images/sandfly_use.png" style="width: 279.5px; height: 358.0px;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;As you can see from example usage, it’s source-to-source all the way down.
If I’m writing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lua&lt;/span&gt;&lt;/code&gt; I’m using &lt;a class="reference external" href="https://github.com/leafo/moonscript/"&gt;moonscript&lt;/a&gt;, and so should you!&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I’m not sure it would even be a great stretch to change the main target, there
would likely be significant support for it in fact.  It has already been
suggested that we should exclusively switch to &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/SPARK_(programming_language)"&gt;spark&lt;/a&gt; on a number of occasions,
especially since the reformation in Spark 2014.  If we could figure out the
safety certification story I’m sure there would be a lot of traction for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;F#&lt;/span&gt;&lt;/code&gt;
as default.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="final-thoughts"&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Open Sourcing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There have been a few enquiries as to whether this work is Open Source, and
sadly it isn’t.  However, if you work for one of the Atlas Consortium
companies(or a significant partner of one) it is easy to arrange “source
available” access.  I &lt;em&gt;know&lt;/em&gt; this isn’t the same thing, but it is the
current situation.&lt;/p&gt;
&lt;p&gt;The good news is that I’ve added an item to the issue tracker that includes
making it Open Source, the bad news is that there is a lot of work needed
— both by me and &lt;em&gt;many&lt;/em&gt; others — to make that happen.  I’ve kicked the
initial process off by contacting legal for guidance, we’ll see what
happens.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I’ve always really appreciated &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Vala_(programming_language)"&gt;vala&lt;/a&gt;’s alternative syntax support; &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/C_Sharp_(programming_language)"&gt;C#&lt;/a&gt; by
default, but with first class support for &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Genie_(programming_language)"&gt;genie&lt;/a&gt;’s &lt;a class="reference external" href="http://boo-lang.org/"&gt;boo&lt;/a&gt;-inspired syntax.
I find myself thinking how nice it would be to emulate that and have multiple
frontends, &lt;em&gt;and&lt;/em&gt; the previously described backends.&lt;/p&gt;
&lt;p&gt;In fact I find myself thinking about &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vala&lt;/span&gt;&lt;/code&gt; a lot as I write this.  It never
had the uptake I would have hoped for when I first read about it.  It has
however had a &lt;em&gt;huge&lt;/em&gt; impact in the places where it has been used.  That surely
makes it a great role model for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sandfly&lt;/span&gt;&lt;/code&gt; going forward.  It is better to be
an elusive Aston Martin &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Aston_Martin_DB5"&gt;DB-5&lt;/a&gt; than a common as muck &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Ford_Focus"&gt;Ford Focus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, I’m deep in a pre-reality dream state where I want to add heaps of amazing
new features and functionality, coupled with a cold light of day feeling that
it could be nice to kill the project by transforming it in to a gateway out of
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ada&lt;/span&gt;&lt;/code&gt;.  It could be the best &lt;em&gt;or&lt;/em&gt; worst project in the history of the world!
I’m genuinely excited.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;It should be easy to guess why this project is being handed on, given
that we’re talking about a twenty-one year old endeavour.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This isn’t meant to disparage &lt;a class="reference external" href="https://nim-lang.org/"&gt;nim&lt;/a&gt;, as it is really quite interesting.
I mean it purely in the sense that we haven’t &lt;em&gt;yet&lt;/em&gt; seen large industry
adoption.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I’m of the &lt;em&gt;strong&lt;/em&gt; opinion that vendors who forbid you from naming,
shaming and even benchmarking them should be avoided at &lt;em&gt;all costs&lt;/em&gt;.
However, I’m not on the procurement board and didn’t get to make that
decision.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/new_love_giddiness.html" rel="alternate"/>
    <summary>I’ve recently inherited a new tier-one project, which is great news!  Sadly, it
is in real need of some Tender Loving Care™.  Was there ever an inherited
project that wasn’t?sandfly debug architecture</summary>
    <category term="tools" label="tools"/>
    <category term="projects" label="projects"/>
    <category term="languages" label="languages"/>
    <published>2018-12-04T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/advent_of_code_2018.html</id>
    <title>Advent of Code 2018</title>
    <updated>2018-12-15T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="advent-of-code-2018"&gt;

&lt;p&gt;I’ve given up on &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; for this year, so we’ll have a ten day early
retrospective.  I’m writing this as a journal entry, more for myself than
others.  You’ve been warned!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;As always &lt;a class="reference external" href="http://adventofcode.com/2018"&gt;Advent of Code&lt;/a&gt; is fun, even when it doesn’t always feel like
it.  If you’re enjoying it, &lt;em&gt;or&lt;/em&gt; currently screaming at it, &lt;a class="reference external" href="https://adventofcode.com/2018/support"&gt;tip the
creator&lt;/a&gt; so that we can smile and shout at it next year.&lt;/p&gt;
&lt;/div&gt;
&lt;section id="why-quit"&gt;
&lt;h2&gt;Why quit?&lt;/h2&gt;
&lt;p&gt;First up, I’m struggling with motivation a bit this year.  Added to that I’ve
floundered purely on the descriptions for the past couple of days, but I’m
pretty sure that it is largely my problem too.&lt;/p&gt;
&lt;p&gt;I have 28 stars for completing both parts of every day so far this year, but
I haven’t been enjoying it enough to warrant continuing.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-1"&gt;
&lt;h2&gt;Day 1&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2018/day/1"&gt;Chronal Calibration&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As expected the first day is going to be easy.  So easy in fact you’ll regret
not getting up at 5am to race for the leaderboard.  All you have to do is sum
the numbers in your input.  The question page gives the following examples to
really hammer home the point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;+1, +1, +1 results in 3&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+1, +1, -2 results in 0&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-1, -2, -3 results in -6&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;If — like me — you often reach for &lt;a class="reference external" href="http://suso.suso.org/programs/num-utils/"&gt;num-utils&lt;/a&gt; at the command line then you’ll
hit an annoying failure:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; numsum &amp;lt; inputs/day01.txt
&lt;span class="go"&gt;-142678&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{total += $1} END {print total}&amp;#39;&lt;/span&gt; inputs/day01.txt
&lt;span class="go"&gt;474&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It turns out that &lt;strong class="command"&gt;numsum&lt;/strong&gt; doesn’t like the leading &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; for positive
numbers, and somehow I’ve never noticed.  I’m &lt;em&gt;just about&lt;/em&gt; observant enough to
notice that this was wrong though, so I didn’t submit the incorrect answer.
The question does remain though: is it better that &lt;strong class="command"&gt;numsum&lt;/strong&gt; ignores
“malformed” inputs or would a default strict mode be much nicer?&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tr -d + &amp;lt; inputs/day01.txt &lt;span class="p"&gt;|&lt;/span&gt; numsum
&lt;span class="go"&gt;474&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Either way you probably wouldn’t really need to break out an editor to do part
one.&lt;/p&gt;
&lt;p&gt;For part two we’re looking for the first repeat within a running sum.  I did
reach for &lt;a class="reference external" href="https://github.com/vim/vim/"&gt;vim&lt;/a&gt; with this, but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;awk&lt;/span&gt;&lt;/code&gt; at the prompt was still an option.
After completing the puzzle I dove in to tidy it a little and prepare for day
two, ending up with the following:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;

&lt;span class="nd"&gt;@aoc_run&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;+1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;+3&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;+3&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;+4&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;-2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;-4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;-6&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;+3&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;+8&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;+5&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;-6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;+7&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;+7&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;-2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;-7&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;-4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="mi"&gt;137041&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@read_data&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shift2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;While it won’t make much difference in this instance we use a &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#set" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;set&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
for our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;seen&lt;/span&gt;&lt;/code&gt; bucket as it provides constant-time &lt;em&gt;O(1)&lt;/em&gt; lookup, whereas
Python’s &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#list" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; implementation would be linear.&lt;/p&gt;
&lt;/div&gt;
&lt;p id="test-runner-label"&gt;So, what have we here?  Well, we’ll want some kind of test runner for the
remaining days, so I hacked up a quick decorator to run the examples.&lt;/p&gt;
&lt;img alt="|AOC| example runner output" src="../_images/2018-12-15-advent_of_code.png" /&gt;
&lt;p&gt;A slightly trimmed version of it follows:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aoc_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;final_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;err_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;) == &lt;/span&gt;&lt;span class="si"&gt;{!r}&lt;/span&gt;&lt;span class="s1"&gt; != &lt;/span&gt;&lt;span class="si"&gt;{!r}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
        &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                &lt;span class="n"&gt;err_msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="n"&gt;fn_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__wrapped__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__globals__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inputs/&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;.txt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn_file&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;final_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;final_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                &lt;span class="n"&gt;err_msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;file:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;final_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;•&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This allows us to pin a dictionary of examples to a function as a proof, and to
test our final result if we’re refactoring.  If you provide examples with no
personal solution the runner will simply display it, so that you can dump it in
to the day’s input box.&lt;/p&gt;
&lt;p&gt;The only other interesting thing in the part two solution is that we’ve
immediately reached for &lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#module-itertools" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;itertools&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  &lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.cycle" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;cycle()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; allowing us
to avoid implementing our own looping, and also avoid concerning ourselves with
the differences between iterators and iterables&lt;a class="footnote-reference brackets" href="#id4" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You could clearly implement the same thing with a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;while&lt;/span&gt;&lt;/code&gt; loop and an
index, but this method makes the reasoning obvious(at least in my eyes).
And that is the beauty of a lot of the helpers in &lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#module-itertools" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;itertools&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, they
improve readability by allowing you to “code the intent”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;According to &lt;a class="reference external" href="https://pypi.python.org/pypi/rdial"&gt;rdial&lt;/a&gt; I could have been on the leaderboard for both parts
if I’d woken up at five to work on it :/&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-2"&gt;
&lt;h2&gt;Day 2&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2018/day/2"&gt;Inventory Management System&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This puzzle was pretty simple too, largely just concerning a count of
characters.  Python helps here, as it provides a simple bag wrapper called
&lt;a class="reference external" href="https://docs.python.org/3/library/collections.html#collections.Counter" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;collections.Counter&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; that can do all the work for us.  An unedited dump
of my &lt;a class="reference external" href="https://pypi.python.org/pypi/ptpython"&gt;ptpython&lt;/a&gt; session is below:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;part1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;twos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;threes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;twos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;twos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;threes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this instance a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Counter&lt;/span&gt;&lt;/code&gt; object is simply a dictionary with characters
from the line as keys, and their frequency as values.  By simply relying on
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Counter&lt;/span&gt;&lt;/code&gt; and asking it whether any items are repeated two or three times
we’re barely even having to write code to solve this problem.&lt;/p&gt;
&lt;p&gt;For part two we’re required to find matches with a substitution edit distance
of one, and return their matching characters.  &lt;a class="reference external" href="https://docs.python.org/3/library/difflib.html#module-difflib" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;difflib&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; provides us with
&lt;a class="reference external" href="https://docs.python.org/3/library/difflib.html#difflib.get_close_matches" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;get_close_matches()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; which will the find matches for us.  For
example, we could loop over our inputs with something like the following:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_close_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cutoff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cutoff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;where &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cuttoff&lt;/span&gt;&lt;/code&gt; is the threshold for changes, so &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(len(current)&lt;/span&gt; &lt;span class="pre"&gt;-&lt;/span&gt; &lt;span class="pre"&gt;1)&lt;/span&gt;
&lt;span class="pre"&gt;/&lt;/span&gt; &lt;span class="pre"&gt;len(current)&lt;/span&gt;&lt;/code&gt; for a single character change.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;We’re seeing two matches here partly out of laziness, the simplifed version
above is testing against the set of all inputs which includes the current
word and thus always has one perfect match.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="day-3"&gt;
&lt;h2&gt;Day 3&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2018/day/3"&gt;No Matter How You Slice It&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I feel like day three is the first day this year where we’ll need to do some
actual work, but how much work we’ll need to do is dependent on our feelings on
dependencies.  A few of my co-workers &lt;em&gt;claim&lt;/em&gt; it is cheating to reach for an
off the shelf solution, but as the previous sections prove I’m definitely not
in that camp.  I’m of the opinion you &lt;em&gt;should&lt;/em&gt; use pre-written well-tested code
in preference to writing your own code &lt;em&gt;every&lt;/em&gt; time, otherwise we’re quickly
falling in to a &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/No_true_Scotsman"&gt;No true Scotsman&lt;/a&gt; argument as we chase our way back to
building computers with hand cracked flints.&lt;/p&gt;
&lt;p&gt;For this puzzle we need to imagine a piece of mappable cloth, so a 2-d array is
on the cards.  If we’re using Python then we’ll need to do a lot of work to
operate on chunks of that array, but there is an easier way if we extend our
tools to include &lt;a class="reference external" href="https://pypi.python.org/pypi/numpy"&gt;numpy&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;“NumPy is a general-purpose array-processing package designed to
efficiently manipulate large multi-dimensional arrays of arbitrary records
without sacrificing too much speed for small multi-dimensional arrays.
NumPy is built on the Numeric code base and adds features introduced by
numarray as well as an extended C-API and the ability to create arrays of
arbitrary type which also makes NumPy suitable for interfacing with
general-purpose data-base applications.”&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://pypi.python.org/pypi/numpy"&gt;numpy&lt;/a&gt; project page&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; supports addressing sub-arrays with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;array[x1:x2,y1:y2]&lt;/span&gt;&lt;/code&gt;, and
combined with its fast and efficient array creation we can solve this with low
effort.  So, we can prime an empty array and increment each element when it is
touched by an elf:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Geometry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x, y, w, h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Geometry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;max_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;where &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;data&lt;/span&gt;&lt;/code&gt; is our parsed puzzle input taking advantage of
a &lt;a class="reference external" href="https://docs.python.org/3/library/collections.html#collections.namedtuple" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;namedtuple()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  My own solution ended up being generalised
in various ways for later use with:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Geometry&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extract_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;which is built upon a utility function that I wrote:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[-+]?\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are quite a few puzzles in this and previous years where extracting all
the numbers from a string that contains other noise is useful.  In today’s
example all the lines were of the form &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#1353&lt;/span&gt; &lt;span class="pre"&gt;&amp;#64;&lt;/span&gt; &lt;span class="pre"&gt;240,198:&lt;/span&gt; &lt;span class="pre"&gt;29x10&lt;/span&gt;&lt;/code&gt;, and given
that the format is stable just pulling the numbers is an entirely reasonable
way to work with it.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[-+]&lt;/span&gt;&lt;/code&gt; is there to match inputs similar to day one where positive
numbers may be given with a leading &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Back to the problem at hand, all we need to do for part one is find the count
of array items where the value is greater than one.  Without even resorting to
more &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; goodness we can use:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You could perform the calculation with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; by having it filter the
results with &lt;a class="reference external" href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.where.html"&gt;where&lt;/a&gt; instead of a generator.  That really doesn’t feel cleaner
in my eyes for this instance, but your taste will surely vary.&lt;/p&gt;
&lt;p&gt;For part two we have to find a sub-array from our input that has no overlaps,
and we can simply iterate over the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt; and return when we find no elements
above one:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This time I’m showing a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; version, but you could easily use the
built-in &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#all" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;all()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function as the worker for this depending on your taste
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt;&lt;a class="footnote-reference brackets" href="#id5" id="id2"&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I’m going to recommend learning &lt;a class="reference external" href="https://pypi.python.org/pypi/numpy"&gt;numpy&lt;/a&gt; here irrespective of its use
in &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; puzzles as it is &lt;em&gt;hugely&lt;/em&gt; useful when dealing with more complex
problems or with significantly larger inputs.  You’ll find &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; is far
more efficient as the size of the arrays increase, and it is a nice tool to
add to your knowledge.  In this specific instance it actually impairs the
run-time versus cPython using a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;List[List[int]]&lt;/span&gt;&lt;/code&gt;, but the slowdown is
very small and the array slicing syntax more than makes up for that.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="day-4"&gt;
&lt;h2&gt;Day 4&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2018/day/4"&gt;Repose Record&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first thing to take note of here is that while we’re given a timestamp,
we’re told we only need to care about the minutes so there is no need to
parse the whole string.  We need to keep an inventory for each guard, and
I chose to just keep two lookup tables for quicker implementation in my
&lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt;; one for the guard’s time asleep &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Dict[int,&lt;/span&gt; &lt;span class="pre"&gt;int]&lt;/span&gt;&lt;/code&gt;, and one for minutes
they sleep on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Dict[int,&lt;/span&gt; &lt;span class="pre"&gt;List[int]]&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once again the standard library provides us with some functionality to make
this easier, and this time it is &lt;a class="reference external" href="https://docs.python.org/3/library/collections.html#module-collections" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;collections&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;’s
&lt;a class="reference external" href="https://docs.python.org/3/library/collections.html#collections.defaultdict" title="(in Python v3.9)"&gt;&lt;code class="xref py py-obj docutils literal notranslate"&gt;&lt;span class="pre"&gt;defaultdict&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  Instead of needing to handle adding guards
for new… er, guards we can just dynamically create dictionary items from
a default:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;guards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;guards_minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The naïve answer to processing this problem’s input is just a simple state
machine with a billion ways to implement it.  I chose this option and
produced an ugly many-armed state machine across a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sorted(input)&lt;/span&gt;&lt;/code&gt;, which
I’ll spare you the horror of as it contains nothing unusual or interesting.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;While the timestamps are unused within the data the fact they’re in
&lt;abbr title="International Organization for Standardization"&gt;ISO&lt;/abbr&gt;-8601 format means we can use a default lexical sort, the problem
would have been a little trickier had it used American mid-endian date
formatting for example.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once we’ve processed our input we can find the sleepiest guard:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sleepiest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guards&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;key&lt;/span&gt;&lt;/code&gt; argument causes &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#max" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;max()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to sort based on the tuple’s second
element.   Using &lt;a class="reference external" href="https://docs.python.org/3/library/operator.html#module-operator" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;operator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;’s &lt;a class="reference external" href="https://docs.python.org/3/library/operator.html#operator.itemgetter" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;itemgetter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; here feels
nicer than a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lambda&lt;/span&gt;&lt;/code&gt;, although the effect is the same.  Every time I reach
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;itemgetter()&lt;/span&gt;&lt;/code&gt; or &lt;a class="reference external" href="https://docs.python.org/3/library/operator.html#operator.attrgetter" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;attrgetter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; I yearn for quick
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lambda&lt;/span&gt;&lt;/code&gt; sugar, like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C#&lt;/span&gt;&lt;/code&gt;’s &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Fat_comma"&gt;fat arrow&lt;/a&gt; or some such.&lt;/p&gt;
&lt;p&gt;Then to find the minute the guard is most likely to be asleep on:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guards_minutes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sleepiest&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Once again we’re using a &lt;a class="reference external" href="https://docs.python.org/3/library/collections.html#collections.Counter" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;Counter&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; object, which happily
provides us with a method to find the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;n&lt;/span&gt;&lt;/code&gt;-th most common element(one in
this case.  If the deep tuple indexing upsets you — and it does me — then you
could rewrite it in reverse order using &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#max" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;max()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; or &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#sorted" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;sorted()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
However, for a quick &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ptpython&lt;/span&gt;&lt;/code&gt; session I was happy &lt;em&gt;enough&lt;/em&gt; with that.&lt;/p&gt;
&lt;p&gt;The second part is simply just grabbing at the data with a different selector,
and contains no new functionality.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-5"&gt;
&lt;h2&gt;Day 5&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2018/day/5"&gt;Alchemical Reduction&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For day five we need to work our way around a string collapsing it when various
conditions match.  I chose to use a &lt;a class="reference external" href="https://docs.python.org/3/library/collections.html#collections.deque" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;deque&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; for this as
a double ended queue allowed me to quickly visualise the pointer moving around,
but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cast&lt;/span&gt;&lt;/code&gt;ing to a list would be a far cleaner solution.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# Re-align pointer&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I made the solution very dirty by working on the code points instead of the
characters as I was prematurely optimising for run-time.  The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;char&lt;/span&gt; &lt;span class="pre"&gt;^&lt;/span&gt; &lt;span class="pre"&gt;0x20&lt;/span&gt;&lt;/code&gt;
part is a bit flipping trick to invert the case of an ASCII character, and it
removes the need to test both &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Aa&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;aA&lt;/span&gt;&lt;/code&gt; for example.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;You could just as easily use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str.swapcase()&lt;/span&gt;&lt;/code&gt; if you’re working on the
characters directly, while also noting that doing so would handle Unicode
and other cools things my version wouldn’t.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I’ve since benchmarked a couple of alternatives, such as iterating over
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;string.ascii_lowercase&lt;/span&gt;&lt;/code&gt; and calling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str.replace()&lt;/span&gt;&lt;/code&gt; until the
string no longer changes.  Many are simpler to reason about and have roughly
the same runtime, but for paedagogical honesty I’ve kept the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;deque&lt;/span&gt;&lt;/code&gt; version
here.&lt;/p&gt;
&lt;p&gt;Anyway, it turns out I was right.  There were going to be some significant
optimisations to make this work reasonably.  However, they didn’t show up until
part two, and when they did it was easier to switch languages than acceptably
speed up the Python version.  The result using the following &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C++&lt;/span&gt;&lt;/code&gt; is
instantaneous on my machine, while the Python version takes few seconds per
example to produce the same answer.&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;react&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop_back&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INT16_MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;react&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’m using the same general method here; my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;deque&lt;/span&gt;&lt;/code&gt; in the Python version is
basically a vector anyway, and the case swapping trick is the same.&lt;/p&gt;
&lt;p&gt;I’m showing it in full to make a point here, if you want speed in these games
use a language with loads of helpers built in and low verbosity.  Even things
like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;string.ascii_lowercase&lt;/span&gt;&lt;/code&gt; saves valuable seconds over making your own
iterator.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;A co-worker used &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;qwertyuiopasdfghjklzxcvbnm&lt;/span&gt;&lt;/code&gt; in their solution, as it is
faster to mash the keyboard in order than type out the alphabet.  I have to
admit I &lt;em&gt;really&lt;/em&gt; loved seeing that, and it wouldn’t have occurred to me.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="day-6"&gt;
&lt;h2&gt;Day 6&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2018/day/6"&gt;Chronal Coordinates&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day 6 was a chore.  Sitting on the train I read a few mails from co-workers who
had landed on a bug in the puzzle that meant their correct answers wouldn’t be
accepted, and that was later clarified in a note on the &lt;a class="reference external" href="https://adventofcode.com/2018/leaderboard"&gt;leaderboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this in mind I totally ignored the puzzle until after work, at which point
I just mashed together the easiest solution I could as I didn’t want to waste
time on it.  Given it is just &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Taxicab_geometry"&gt;Manhattan distance&lt;/a&gt; on an map there wasn’t
anything new to see anyhow; I will note that &lt;a class="reference external" href="https://pypi.python.org/pypi/scipy"&gt;scipy&lt;/a&gt; contains
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;scipy.spatial.distance&lt;/span&gt;&lt;/code&gt; which supports taxicab geometry with the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cityblock&lt;/span&gt;&lt;/code&gt; parameter though&lt;a class="footnote-reference brackets" href="#id6" id="id3"&gt;3&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-7"&gt;
&lt;h2&gt;Day 7&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2018/day/7"&gt;The Sum of Its Parts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m not sure what to say about this puzzle.  If you spotted that
this was a topological sort with lexicographically broken tie breaks, you’d
probably already know that &lt;a class="reference external" href="https://pypi.python.org/pypi/networkx"&gt;networkx&lt;/a&gt; provides
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lexicographical_topological_sort()&lt;/span&gt;&lt;/code&gt;.  I’m that person, and so I just called
the function for the answer.&lt;/p&gt;
&lt;p&gt;I think this is where I started to lose interest.  Somehow I &lt;em&gt;won&lt;/em&gt;, but
I really didn’t feel like I had.  That felt like cheating, and so did using
&lt;a class="reference external" href="https://pypi.python.org/pypi/scipy"&gt;scipy&lt;/a&gt; the day before.  As I said at the start, I’ve been lacking
motivation a little anyway and I’m not assigning &lt;em&gt;any&lt;/em&gt; blame toward &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt;
creators for this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-8-14"&gt;
&lt;h2&gt;Day 8..14&lt;/h2&gt;
&lt;p&gt;I’ve largely just been going through the motions for the past few days, and if
it hadn’t been for wishing to peacock some co-workers I’d probably have retired
earlier ;)&lt;/p&gt;
&lt;p&gt;And that is the main reason I’m quitting, I don’t even like my own solutions
enough to write about them.  A combination of just doing the minimum required
to get &lt;em&gt;an&lt;/em&gt; answer and not being interested enough to go back for refactoring.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tips"&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;p&gt;I’m mostly repeating my tips from &lt;span class="xref std std-doc"&gt;last year&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Don’t use this as an excuse to learn a new language.  The puzzles aren’t really
complicated enough to learn a new language beyond basic grammar.  You may as
well use it as an excuse to explore new features in a language you already
know, or as an excuse to explore the standard library of your chosen language
some more.&lt;/p&gt;
&lt;p&gt;Read the problems &lt;em&gt;deeply&lt;/em&gt;.  The artificial nature of the puzzles often elides
important information, or at least can often feel that way.  These &lt;em&gt;are&lt;/em&gt;
puzzles so you should expect some vexation, and skimming for speed will make
this worse!&lt;/p&gt;
&lt;p&gt;If you’re going for the leaderboard you need to be &lt;em&gt;really&lt;/em&gt; fast, so: Use fast
languages, be &lt;em&gt;all over&lt;/em&gt; your chosen weapon’s standard library, and use your
editor’s &lt;a class="reference external" href="https://github.com/SirVer/ultisnips/"&gt;snippets&lt;/a&gt; well.  &lt;strong&gt;Every&lt;/strong&gt;. &lt;strong&gt;Second&lt;/strong&gt;. &lt;strong&gt;Counts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And finally, keep your old solutions around either in files or in your &lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt;’s
history as you’ll probably end up revisiting them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hopes-for-2019"&gt;
&lt;h2&gt;Hopes for 2019?&lt;/h2&gt;
&lt;p&gt;Moving up a place from number two last year: That the options to pay for it are
better next year.  Each year I have to find a friend to make a donation in my
place as the payment options are weak.  It would be nice to not have to do so,
and limiting payments to PayPal and Coinbase &lt;em&gt;must&lt;/em&gt; be putting others off
a donation entirely.&lt;/p&gt;
&lt;p&gt;Number two?  That it returns.  When it is fun it is &lt;em&gt;really&lt;/em&gt; fun, and I just
hope I’m in a better place personally next time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="whats-next"&gt;
&lt;h2&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;Let us be honest here.  Winterval is almost upon us and I’ll probably end up
diving back in to complete the remaining days ;)&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;For those not too familiar with &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; — and forgetful people like me
— it can be easy to trip oneself up when iterating over a &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#list" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
repeatably, and then exhausting an iterable when you pass that instead.
&lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.cycle" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;cycle()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; does the right thing either way.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Or for that matter &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt;’s own &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;all()&lt;/span&gt;&lt;/code&gt; function which becomes
useful when using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; for more complicated tasks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Yep, I’ve used three names for the same concept here to make a point
about how annoying it can be to discuss these things when even simple
concepts are often known by various common names.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/advent_of_code_2018.html" rel="alternate"/>
    <summary>I’ve given up on AoC for this year, so we’ll have a ten day early
retrospective.  I’m writing this as a journal entry, more for myself than
others.  You’ve been warned!|AOC| example runner output</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="coding" label="coding"/>
    <category term="puzzles" label="puzzles"/>
    <published>2018-12-15T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/office_hours.html</id>
    <title>Office hours</title>
    <updated>2018-12-23T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="office-hours"&gt;

&lt;p&gt;A few co-workers have started offering office hours, seemingly spurred on by
a post by &lt;a class="reference external" href="https://robertheaton.com/2018/10/22/slash-office-hours/"&gt;Robert Heaton&lt;/a&gt;.  I’m going to try this a little closer to Robert’s
original idea, and make &lt;em&gt;this&lt;/em&gt; offer to strangers too&lt;a class="footnote-reference brackets" href="#id2" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to chat, I want to help.&lt;/p&gt;
&lt;img alt="Appointment icon [from Adwaita icons]" class="align-left" src="../_images/appointment-new.png" /&gt;
&lt;section id="what-topics"&gt;
&lt;h2&gt;What topics?&lt;/h2&gt;
&lt;p&gt;You choose, that is the point.  That said, here are some thoughts…&lt;/p&gt;
&lt;p&gt;My career thus far has mainly been focused on navigation systems, both
&lt;abbr title="Global Navigation Satellite System"&gt;GNSS&lt;/abbr&gt; and land-based; if you’re
interested in chatting about that &lt;em&gt;absolutely&lt;/em&gt; get in touch.&lt;/p&gt;
&lt;p&gt;If you’re heading for your first clearance interview, and want to practise with
someone who has both passed &lt;em&gt;and&lt;/em&gt; failed get in touch.&lt;/p&gt;
&lt;p&gt;If you don’t have many connections in industry and are just looking for general
advice, then by all means get in touch.&lt;/p&gt;
&lt;p&gt;You just need a little &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber duck&lt;/a&gt; time, let us make it happen!&lt;/p&gt;
&lt;p&gt;Basically, get in touch and we’ll see what happens!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-do-you-need-to-know"&gt;
&lt;h2&gt;What do you need to know?&lt;/h2&gt;
&lt;p&gt;Be aware that if this works out I’ll likely write my own &lt;a class="reference external" href="https://robertheaton.com/2018/10/02/lessons-from-my-first-20-office-hours/"&gt;retrospective&lt;/a&gt;, so
don’t expect total privacy.  I’m also a fan of &lt;span class="xref std std-doc"&gt;writing tips&lt;/span&gt;, so I might take any questions and run with them!&lt;/p&gt;
&lt;p&gt;I’m not going to lie to you, I do plan on having a quick poke around before
agreeing to a call.  If you’re socially or professionally poisonous to me,
I &lt;em&gt;won’t&lt;/em&gt; make time for you.  It sounds harsh, but I want to be upfront about
that.&lt;/p&gt;
&lt;p&gt;I often have a rough schedule, but I’ll try to make time.  Even though I’m UK
based, my schedule pins me to other timezones on occasion and I may be able to
accommodate you even if you’re far away.&lt;/p&gt;
&lt;p&gt;I am a native English speaker, confident social German speaker, muddling
Castilian speaker, and I’m told by my French co-workers that I’m fluent in
French docker… so you will need to be able to communicate in one of those or
wish to &lt;em&gt;teach me&lt;/em&gt; another.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how"&gt;
&lt;h2&gt;How?&lt;/h2&gt;
&lt;p&gt;The easiest way to make this happen is to drop me a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;.  If the idea gets
any traction I’ll look at better ways of scheduling, but until then mail should
be fine.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="updates-2019-01-15"&gt;
&lt;h2&gt;Updates - 2019-01-15&lt;/h2&gt;
&lt;p&gt;So, I’ve just completed my second appointment, and it seems to be working out
okay.  Both have been fun(at least for me), and I’m planning on continuing this
experiment for a little while longer.  Do get in touch!&lt;/p&gt;
&lt;p&gt;I’ve also passed on two “applicants” who I felt would be better served by other
people, and that seems like a very valuable feature to add to the idea.
I passed both of them on to co-workers, and I could only do this easily because
I knew they were playing around with the idea of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/office-hours&lt;/span&gt;&lt;/code&gt;.  It would
be nice if there was a register that made it is easier to link poor matches
with better matches.  Obviously it needs to be weighted in some way, “show me
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$connections&lt;/span&gt;&lt;/code&gt; using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;office-hours&lt;/span&gt;&lt;/code&gt; with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$tag&lt;/span&gt;&lt;/code&gt;” for example, but it
might be a nice idea for a weekend hack.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id2"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;It seems that the norm for my co-workers is to make this offer on our
semi-private mastodon instance, but I’d like to think I was implicitly
offering help there anyway.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/office_hours.html" rel="alternate"/>
    <summary>A few co-workers have started offering office hours, seemingly spurred on by
a post by Robert Heaton.  I’m going to try this a little closer to Robert’s
original idea, and make this offer to strangers too1.Appointment icon [from Adwaita icons]</summary>
    <category term="personal" label="personal"/>
    <published>2018-12-23T00:00:00+00:00</published>
  </entry>
</feed>
