<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jnrowe.github.io/</id>
  <title>JNRowe - Posted in 2009</title>
  <updated>2009-10-29T00:00:00+00:00</updated>
  <link href="https://jnrowe.github.io/"/>
  <link href="https://jnrowe.github.io/blog/2009/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <subtitle>Ramblings of a tired mind</subtitle>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Toggling_settings_in_vim.html</id>
    <title>Toggling settings in vim</title>
    <updated>2009-10-02T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="toggling-settings-in-vim"&gt;

&lt;p&gt;As you can never have enough keybinding tips and &lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; helps to prove that, the
tip for today answers Joshua’s question from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;##purplism&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;can you toggle settings in vim with a key?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The simple answer is yes, but how easy it is depends on what you’re trying to
toggle.  We need a state to test when toggling settings, so as long as we can
query the setting toggling it is easy.  For example, I have a binding in my
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.vimrc&lt;/span&gt;&lt;/code&gt; to toggle the value of &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/options.html#'background'"&gt;background&lt;/a&gt;.  As I use transparent
terminals the colours used for syntax highlighting can occasionally get
a little difficult to read depending on the wallpaper I’m using, the following
function allows me to quick toggle the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;background&lt;/span&gt;&lt;/code&gt; setting:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; Map Shift-F12 to switch between light and dark&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; Switch_background&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;background&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;light&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dark&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;light&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;S&lt;span class="p"&gt;-&lt;/span&gt;F12&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; Switch_background&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For some other commands such as toggling line numbering it can be much
simpler:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;F12&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For those times when we can’t easily flip the setting on and off or query state
in a simple manner, the solution is to store state ourselves and test that.&lt;/p&gt;
&lt;p&gt;We may, for example, wish to toggle a group of settings on or off at one time.
While we could test one of the settings in the toggle function it can become
quite brittle if we change those settings ourselves.  By storing our toggle
state in a variable we can test that instead.  The final — totally contrived
— example shows how to do that:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; Map Mod1-F12 to toggle some vim goodness&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; EditorvsNotepad&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:notepad &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:notepad&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;syntax&lt;/span&gt; off
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;nohlsearch&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;laststatus&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:notepad&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hlsearch&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;laststatus&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:notepad &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;M&lt;span class="p"&gt;-&lt;/span&gt;F12&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; EditorvsNotepad&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Toggling_settings_in_vim.html" rel="alternate"/>
    <summary>As you can never have enough keybinding tips and vim helps to prove that, the
tip for today answers Joshua’s question from ##purplism</summary>
    <category term="vim" label="vim"/>
    <published>2009-10-02T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Disabling_cursor_blinking_in_GTK.html</id>
    <title>Disabling cursor blinking in GTK+</title>
    <updated>2009-10-03T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="disabling-cursor-blinking-in-gtk"&gt;

&lt;p&gt;Darren Roberts asks via the EADS Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;In &lt;a class="reference external" href="http://pidgin.im/"&gt;pidgin&lt;/a&gt; how can I stop the cursor blinking?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Since we’ve had our &lt;a class="reference external" href="http://xmpp.org/"&gt;Jabber&lt;/a&gt; server set up at the office there have been
countless questions about using &lt;a class="reference external" href="http://pidgin.im/"&gt;pidgin&lt;/a&gt; to the various lists, and I feel the
answer that should often be given is:  Use something else.  There are plenty of
other clients available; &lt;a class="reference external" href="http://live.gnome.org/Empathy"&gt;empathy&lt;/a&gt; is installed on all our Solaris and Linux
boxes now, &lt;a class="reference external" href="http://developer.imendio.com/projects/gossip"&gt;gossip&lt;/a&gt; may already be installed, &lt;a class="reference external" href="http://emacs-jabber.sourceforge.net/"&gt;emacs-jabber&lt;/a&gt; seems popular with
many of our &lt;a class="reference external" href="http://www.xemacs.org/"&gt;emacs&lt;/a&gt; using developers, &lt;a class="reference external" href="http://www.gajim.org/"&gt;gajim&lt;/a&gt; comes recommended by a few users or
my favourite &lt;a class="reference external" href="http://www.bitlbee.org/"&gt;bitlbee&lt;/a&gt;.  Now, with the rant out of the way we can go back to the
question at hand…&lt;/p&gt;
&lt;p&gt;Cursor blinking is a severe annoyance for some people(not me, I patch apps to
add it), and disabling it for GTK+ applications is really quite simple.   If
you’re a &lt;a class="reference external" href="http://www.gnome.org/"&gt;GNOME&lt;/a&gt; user then the setting to change blinking is in the keyboard
properties dialog that can be found in the system menu.  If you’re using &lt;a class="reference external" href="http://www.kde.org/"&gt;KDE&lt;/a&gt;
you should edit &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.gtkrc-2.0-kde&lt;/span&gt;&lt;/code&gt;.  If you’re using neither GNOME or KDE
you can add a directive to your &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.gtkrc-2.0&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If it is just the blinking rate that bugs you, then you can give a different
value for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gtk-cursor-blink&lt;/span&gt;&lt;/code&gt;.  The value is given in milliseconds for the
blink frequency.&lt;/p&gt;
&lt;p&gt;If you wish to only change the settings in pidgin you can edit
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.purple/gtkrc-2.0&lt;/span&gt;&lt;/code&gt; instead of your main &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.gtkrc-2.0&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;section id="bonus-related-tip"&gt;
&lt;h2&gt;Bonus related tip&lt;/h2&gt;
&lt;p&gt;If you’re really driven mad by the blinking cursor, and wish to disable it in
the console too then add the next little snippet to your shell’s startup file:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;\033[?48c&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Disabling_cursor_blinking_in_GTK.html" rel="alternate"/>
    <summary>Darren Roberts asks via the EADS Linux list:</summary>
    <category term="GTK+" label="GTK+"/>
    <category term="styling" label="styling"/>
    <published>2009-10-03T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Simple_notifications_in_awesome.html</id>
    <title>Simple notifications in awesome</title>
    <updated>2009-10-04T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="simple-notifications-in-awesome"&gt;

&lt;p&gt;On seeing my window notifications in &lt;a class="reference external" href="https://awesomewm.org/"&gt;awesome&lt;/a&gt; from a screencast for a new
project at work Matt Cooper asks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Is there a library that does those fancy notifications or do you have to
hack it up yourself?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;img alt="notifications in awesome" class="align-right" src="../_images/2009-10-04-awesome_notifications.png" /&gt;
&lt;p&gt;There is a library to make notification popups in &lt;strong class="command"&gt;awesome&lt;/strong&gt;, and it is
called &lt;a class="reference external" href="https://awesomewm.org/apidoc/libraries/naughty.html"&gt;naughty&lt;/a&gt;.  With it notifications are as simple as calling
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;naughty.notify&lt;/span&gt;&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="https://github.com/leafo/moonscript/"&gt;moonscript&lt;/a&gt; for all my &lt;a class="reference external" href="http://www.lua.org/"&gt;lua&lt;/a&gt; needs, as it provides a nicer syntax and
fixes some of the warts(such as global-by-default).  The examples below are
all written in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;moonscript&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight-moon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;naughty&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;naughty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt; &lt;span class="nv"&gt;text:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;my little popup&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;position:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;bottom_left&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I do however define a few functions in my configuration file to simplify the
normal notifications I use:&lt;/p&gt;
&lt;div class="highlight-moon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Generic info/warn/error notifications&lt;/span&gt;
&lt;span class="n"&gt;debug_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;-- debug_notify: Display notification when debug_messages is true&lt;/span&gt;
    &lt;span class="nv"&gt;debug:&lt;/span&gt; &lt;span class="kt"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="kt"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;debug_messages&lt;/span&gt;
            &lt;span class="n"&gt;naughty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt; &lt;span class="nv"&gt;text:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;span color=&amp;#39;#ff00ff&amp;#39;&amp;gt;Debug&amp;lt;/span&amp;gt;: #{awful.util.escape text}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nv"&gt;timeout:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;width:&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nv"&gt;_gnotify:&lt;/span&gt; &lt;span class="kt"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ntype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="kt"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;colour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;ntype&lt;/span&gt;
            &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;info&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#00ff00&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;warn&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#ffff00&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;error&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#ff0000&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="n"&gt;beautiful&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fg_normal&lt;/span&gt;
        &lt;span class="n"&gt;naughty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt; &lt;span class="nv"&gt;text:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;span color=&amp;#39;#{colour}&amp;#39;&amp;gt;●&amp;lt;/span&amp;gt; #{awful.util.escape text}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nv"&gt;start:&lt;/span&gt; &lt;span class="kt"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="kt"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_gnotify&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;info&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;stop:&lt;/span&gt; &lt;span class="kt"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="kt"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_gnotify&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;error&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;warn:&lt;/span&gt; &lt;span class="kt"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="kt"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_gnotify&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;warn&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If you’re willing to install &lt;a class="reference external" href="http://github.com/samsarin/lua-functional"&gt;lua-functional&lt;/a&gt;, the above code snippet can be
made much nicer by using its &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;partial&lt;/span&gt;&lt;/code&gt; application support to define the
final functions.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This group of functions, all namespaced under &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;notify&lt;/span&gt;&lt;/code&gt;, provide simple wrappers
for the everyday notifications I use.  &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;notify.debug&lt;/span&gt;&lt;/code&gt; is a nice way to be able
to litter your configuration file with visible pointers as to what is going on,
set &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;debug_messages&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;true&lt;/span&gt;&lt;/code&gt; in your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rc.moon&lt;/span&gt;&lt;/code&gt; to enable all the debug
information and switch it back to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;false&lt;/span&gt;&lt;/code&gt; to stop it being displayed.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;notify.{start,stop,warn}&lt;/span&gt;&lt;/code&gt; functions prepend the text you pass it with
a coloured Unicode bullet.  awesome makes use of &lt;a class="reference external" href="http://www.pango.org/"&gt;pango&lt;/a&gt;
meaning you can easily use pretty much any character you wish, or more
specifically any character your font can display.  From time to time I’ve
experimented with using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;✔&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;✘&lt;/span&gt;&lt;/code&gt;, but most of the fonts I prefer to use
don’t display them correctly(if you’re seeing two boxes your fonts don’t
either).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="window-creation-notifications"&gt;
&lt;h1&gt;Window creation notifications&lt;/h1&gt;
&lt;p&gt;One of the notifications I like to have is for when new windows are opened, this
way I don’t miss windows opening on tags I’m not currently viewing.&lt;/p&gt;
&lt;div class="highlight-moon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect_signal&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;manage&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;(&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="kt"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;-- Display the window’s name, or just Application if it isn’t set&lt;/span&gt;
    &lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#{@name or &amp;#39;Application&amp;#39;} started&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="network-notifications"&gt;
&lt;h1&gt;Network notifications&lt;/h1&gt;
&lt;p&gt;I also have the following &lt;a class="reference external" href="https://awesomewm.org/apidoc/libraries/gears.html"&gt;gears&lt;/a&gt; timer set to toggle my network monitor between
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lo&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ppp0&lt;/span&gt;&lt;/code&gt; depending on whether my remote network interface is up.
Having the little popups to show when the network has gone down or come up is
quite nice, and definitely more noticeable than just changing the text in the
&lt;a class="reference external" href="https://awesomewm.org/apidoc/libraries/awful.wibox.html"&gt;wibox&lt;/a&gt;.  The code below changes the interface name in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wibox&lt;/span&gt;&lt;/code&gt;, and
switches the network graph widget to use the appropriate input too.&lt;/p&gt;
&lt;div class="highlight-moon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;netiface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;lo&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gears&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;netiface&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;lo&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;io.open&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;/var/lock/LCK..ttyUSB0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;ppp0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;up&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;netiface&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;ppp0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;io.open&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;/var/lock/LCK..ttyUSB0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;lo&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;down&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;nettext_widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; #{iface}:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;wicked&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="n"&gt;netbar_widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;net&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;${#{iface} up_b}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;upload&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;wicked&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="n"&gt;netbar_widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;net&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;${#{iface} down_b}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;download&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;PPP0 interface has come #{state}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Simple_notifications_in_awesome.html" rel="alternate"/>
    <summary>On seeing my window notifications in awesome from a screencast for a new
project at work Matt Cooper asks:</summary>
    <category term="awesome" label="awesome"/>
    <published>2009-10-04T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Sharing_Xresources_between_systems.html</id>
    <title>Sharing Xresources between systems</title>
    <updated>2009-10-05T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="sharing-xresources-between-systems"&gt;

&lt;p&gt;In amongst the rants in our watercooler channel at work comes this question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;So then, how do custom settings in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Xresources&lt;/span&gt;&lt;/code&gt; work if you share your
home directory between machines?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The question arises from a much larger topic concerning keeping your home
directory in a &lt;a class="reference external" href="http://www.git-scm.com/"&gt;git&lt;/a&gt; repository.  The issue Carl is having is that he needs to
use different options on different machines and doesn’t relish the idea of
having to pull and rebase branches just to keep files in sync.  Of course, he
doesn’t have to do that and that is the point of this tip.&lt;/p&gt;
&lt;section id="basic-conditionals"&gt;
&lt;h2&gt;Basic conditionals&lt;/h2&gt;
&lt;p&gt;With great foresight the authors of &lt;a class="reference external" href="http://www.xfree86.org/current/xrdb.1.html"&gt;xrdb&lt;/a&gt; decided that our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Xresources&lt;/span&gt;&lt;/code&gt; file
should be preprocessed before it is used, the default preprocessor is
&lt;strong class="command"&gt;cpp&lt;/strong&gt;.  On most of our systems at work, and likely most Linux systems
in general, &lt;strong class="command"&gt;cpp&lt;/strong&gt; is &lt;a class="reference external" href="http://gcc.gnu.org/onlinedocs/gcc-4.4.1/cpp/"&gt;GNU cpp&lt;/a&gt;.  Don’t worry about the size of the
manual though, the interesting features are easy to understand and use.  Let’s
look at trimmed example from my configuration file:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef FIXED_FONT&lt;/span&gt;
    &lt;span class="cp"&gt;#define FIXED_FONT xft:Inconsolata:pixelsize=14:antialias=false&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef BOLD_FIXED_FONT&lt;/span&gt;
    &lt;span class="cp"&gt;#define BOLD_FIXED_FONT FIXED_FONT:bold&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="n"&gt;urxvt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FIXED_FONT&lt;/span&gt;
&lt;span class="n"&gt;urxvt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;boldFont&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BOLD_FIXED_FONT&lt;/span&gt;

&lt;span class="n"&gt;irssi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FIXED_FONT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This small snippet sets a couple of default fonts that we can reference
throughout our resource file as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FIXED_FONT&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;BOLD_FIXED_FONT&lt;/span&gt;&lt;/code&gt;.  This
way we can easily change the value in one place and it trickles down to all our
programs.  Or we can define different options at runtime by specifying values
to &lt;strong class="command"&gt;xrdb&lt;/strong&gt;, such as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xrdb&lt;/span&gt; &lt;span class="pre"&gt;-DFIXED_FONT=xft:Monospace:pixelsize=10&lt;/span&gt;&lt;/code&gt;.
And don’t worry, &lt;strong class="command"&gt;cpp&lt;/strong&gt; is smart enough to cope with the use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/code&gt; in
our definition.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="per-system-conditionals"&gt;
&lt;h2&gt;Per system conditionals&lt;/h2&gt;
&lt;p&gt;On one system I use &lt;a class="reference external" href="http://www.levien.com/type/myfonts/inconsolata.html"&gt;Inconsolata&lt;/a&gt; is not installed, so the configuration above
wouldn’t work on it.  &lt;strong class="command"&gt;xrdb&lt;/strong&gt; gives us a way around the problem though,
it defines a set of symbols we can use including one to test the system’s
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;hostname&lt;/span&gt;&lt;/code&gt;.  &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nebula&lt;/span&gt;&lt;/code&gt;, the system that doesn’t have Inconsolata, does have
&lt;a class="reference external" href="http://www.is-vn.bg/hamster/"&gt;terminus&lt;/a&gt; and I can use that on there with a couple of small changes.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef FIXED_FONT&lt;/span&gt;
    &lt;span class="cp"&gt;#ifdef SRVR_nebula&lt;/span&gt;
        &lt;span class="cp"&gt;#define FIXED_FONT xft:Terminus:pixelsize=14:antialias=false&lt;/span&gt;
    &lt;span class="cp"&gt;#else&lt;/span&gt;
        &lt;span class="cp"&gt;#define FIXED_FONT xft:Inconsolata:pixelsize=14:antialias=false&lt;/span&gt;
    &lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;As we’re using &lt;a class="reference external" href="http://xorg.freedesktop.org/"&gt;X11&lt;/a&gt;’s &lt;strong class="command"&gt;xrdb&lt;/strong&gt; it is network aware, it defines
&lt;code class="samp docutils literal notranslate"&gt;&lt;span class="pre"&gt;SRVR_&lt;/span&gt;&lt;em&gt;&lt;span class="pre"&gt;name&lt;/span&gt;&lt;/em&gt;&lt;/code&gt; for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;X&lt;/span&gt;&lt;/code&gt; server name and &lt;code class="samp docutils literal notranslate"&gt;&lt;span class="pre"&gt;CLNT_&lt;/span&gt;&lt;em&gt;&lt;span class="pre"&gt;name&lt;/span&gt;&lt;/em&gt;&lt;/code&gt; for the
client name.  Using these it is easy to configure systems where the server
and clients are on different machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="conditionals-for-server-options"&gt;
&lt;h2&gt;Conditionals for server options&lt;/h2&gt;
&lt;p&gt;You can also change configured settings based on the extensions loaded in to the
server, for example to disable the screensaver in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;muxi&lt;/span&gt;&lt;/code&gt; if the &lt;abbr title="Display Power Management Signalling"&gt;DPMS&lt;/abbr&gt; extension is supported we’d test for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EXT_DPMS&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef EXT_DPMS&lt;/span&gt;
    &lt;span class="n"&gt;muxi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;screensaver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="testing-your-resource-files"&gt;
&lt;h2&gt;Testing your resource files&lt;/h2&gt;
&lt;p&gt;When you’re testing your own &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.Xresources&lt;/span&gt;&lt;/code&gt; file you can use the
&lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-n&lt;/span&gt;&lt;/code&gt; option with &lt;strong class="command"&gt;xrdb&lt;/strong&gt;, it tells &lt;strong class="command"&gt;xrdb&lt;/strong&gt; to dump the
settings as they would be used instead of updating the resource database.  This
makes it easy to check if our conditional statements are working correctly
without having to open and close applications constantly.  You can also define
and cancel symbol definitions with the &lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-D&lt;/span&gt;&lt;/code&gt; and &lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-U&lt;/span&gt;&lt;/code&gt; options
for &lt;strong class="command"&gt;xrdb&lt;/strong&gt;, this allows you to test your modifications that rely on
symbols that are normally exported by &lt;strong class="command"&gt;xrdb&lt;/strong&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="using-a-more-featureful-preprocessor"&gt;
&lt;h2&gt;Using a more featureful preprocessor&lt;/h2&gt;
&lt;p&gt;You can also choose a different preprocessor if &lt;strong class="command"&gt;cpp&lt;/strong&gt; isn’t up to your
needs by specifying a &lt;strong class="command"&gt;-cpp&lt;/strong&gt; option to &lt;strong class="command"&gt;xrdb&lt;/strong&gt;.  The only
caveat is that must accept &lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-D&lt;/span&gt;&lt;/code&gt; for defines, &lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-U&lt;/span&gt;&lt;/code&gt; for symbol
cancelling and &lt;a class="reference external" href="https://docs.python.org/3/using/cmdline.html#cmdoption-I" title="(in Python v3.9)"&gt;&lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-I&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; for include paths.  An example that does fit these
restrictions is &lt;a class="reference external" href="http://www.gnu.org/software/m4/m4.html"&gt;m4&lt;/a&gt;, and it might be a good choice if you wish to do more
advanced things in your configuration file such as fancy filtering or the use
of loops for defining colour tables.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Sharing_Xresources_between_systems.html" rel="alternate"/>
    <summary>In amongst the rants in our watercooler channel at work comes this question:</summary>
    <category term="X11" label="X11"/>
    <category term="styling" label="styling"/>
    <published>2009-10-05T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Finding_a_windows_owner.html</id>
    <title>Finding a window’s owner</title>
    <updated>2009-10-06T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="finding-a-windows-owner"&gt;

&lt;p&gt;Rach Holmes asks on our Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;How do I find out what app keeps opening that annoying window in gnome?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Jack McIntyre made a couple of outstanding correct guesses, but predictably Rach
still wanted to know a generic solution and I offer this tip in response.&lt;/p&gt;
&lt;section id="the-easy-way"&gt;
&lt;h2&gt;The easy way&lt;/h2&gt;
&lt;p&gt;Many windows define a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;WM_COMMAND&lt;/span&gt;&lt;/code&gt; property that is set to the command name of
the application, if that exists all we have to do is read it:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; xprop &lt;span class="p"&gt;|&lt;/span&gt; grep WM_COMMAND
&lt;span class="go"&gt;WM_COMMAND(STRING) = { &amp;quot;urxvt&amp;quot;, &amp;quot;-cd&amp;quot;, &amp;quot;/home/jay/Desktop&amp;quot; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, not all applications set this property.  Examples of applications that
don’t set this property include &lt;a class="reference external" href="http://www.mozilla.com/firefox"&gt;firefox&lt;/a&gt; and &lt;a class="reference external" href="http://www.gimp.org/"&gt;gimp&lt;/a&gt;.  In fact, many of the modern
applications you find on desktop systems don’t set this property at all.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-other-way"&gt;
&lt;h2&gt;The other way&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://standards.freedesktop.org/wm-spec/wm-spec-1.3.html"&gt;EWMH&lt;/a&gt;, the Extended Window Manager Hints standard, defines a property called
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_NET_WM_PID&lt;/span&gt;&lt;/code&gt; that, if defined, is the process id of the application that
opened the window.  We have a couple of options to access that property, my
favourite would be &lt;a class="reference external" href="http://sweb.cz/tripie/utils/wmctrl/"&gt;wmctrl&lt;/a&gt; and another would be &lt;a class="reference external" href="http://www.xfree86.org/current/xprop.1.html"&gt;xprop&lt;/a&gt; which is often installed
by default.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; wmctrl -lp
&lt;span class="go"&gt;0x01200003  2 13398  kate 2009-10-06-TaD-Finding_a_windows_owner.textile [+] - gvim&lt;/span&gt;
&lt;span class="go"&gt;0x01000006  3 9992   kate Irssi: [JNR___@freenode] [#github]&lt;/span&gt;
&lt;span class="go"&gt;0x00c00005  1 10134  kate SpotMe - Opera&lt;/span&gt;
&lt;span class="go"&gt;0x00600019  0 9992   kate jay@kate:~/Desktop/jnrowe.github.io&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; xprop &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;/_NET_WM_PID/ {print $NF}&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;9992&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; tr &lt;span class="s1"&gt;&amp;#39;\000&amp;#39;&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &amp;lt; /proc/9992/cmdline
&lt;span class="go"&gt;/usr/bin/urxvtd -q -f -o&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong class="command"&gt;wmctrl&lt;/strong&gt; output has five space aligned columns.  The first is the
window id, the second the desktop is visible on, the third is the process id,
the fourth is the client machine and the fifth is the window’s title string.
And with the &lt;strong class="command"&gt;xprop&lt;/strong&gt; example we must select a window with the mouse
when calling &lt;strong class="command"&gt;xprop&lt;/strong&gt;, and then we pluck the process id from the
output.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmdline&lt;/span&gt;&lt;/code&gt; value for the process from &lt;a class="reference external" href="http://blogs.sun.com/eschrock/entry/the_power_of_proc"&gt;procfs&lt;/a&gt; is finally read.  The
&lt;strong class="command"&gt;tr&lt;/strong&gt; command is needed because options are separated by null
terminators.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-problems"&gt;
&lt;h2&gt;The problems&lt;/h2&gt;
&lt;p&gt;Back to the original question and Rach was looking for a way to stop the window
from showing up, the immediate response to the annoying window problem is to
find its process id and send it a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIGTERM&lt;/span&gt;&lt;/code&gt;.  It seems like a reasonable idea,
but I’ve been choosing the &lt;strong class="command"&gt;urxvtd&lt;/strong&gt; examples on purpose to prove
a point.&lt;/p&gt;
&lt;p&gt;&lt;strong class="command"&gt;urxvtd&lt;/strong&gt; is the terminal daemon provided by &lt;a class="reference external" href="http://software.schmorp.de/"&gt;rxvt-unicode&lt;/a&gt;, all
terminals that are spawned by it will have the same &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_NET_WM_PID&lt;/span&gt;&lt;/code&gt; value and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;WM_COMMAND&lt;/span&gt;&lt;/code&gt; string.  This isn’t just an issue with &lt;strong class="command"&gt;urxvtd&lt;/strong&gt; either,
it happens with all applications that operate in this way.  Sending
a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SIGTERM&lt;/span&gt;&lt;/code&gt; to every terminal opened by &lt;strong class="command"&gt;urxvtd&lt;/strong&gt; probably isn’t what
we would want to do, so you should always think very carefully before sending
terminate signals.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Finding_a_windows_owner.html" rel="alternate"/>
    <summary>Rach Holmes asks on our Linux list:</summary>
    <category term="X11" label="X11"/>
    <published>2009-10-06T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/BTS_as_a_task_manager.html</id>
    <title>BTS as a task manager</title>
    <updated>2009-10-07T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="bts-as-a-task-manager"&gt;

&lt;p&gt;Tom Marshall asks over the cooler:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;What apps do you guys use to manage your todo list(s)?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I think this may be an incredibly personal thing but I prefer to use a &lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt;
for local task management, the idea of just adding random lines of text to
a file frankly baffles me.  I love the filtering, ordering and editing
capabilities I get from using a &lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt; for this.&lt;/p&gt;
&lt;p&gt;Now, I’m not suggesting installing something complex and convoluted like
&lt;a class="reference external" href="http://www.bugzilla.org"&gt;Bugzilla&lt;/a&gt; just for keeping track of your shopping lists or remembering to
charge the spare battery for your phone.  There are quite a few lightweight
systems available, &lt;a class="reference external" href="http://ditz.rubyforge.org"&gt;ditz&lt;/a&gt; and &lt;a class="reference external" href="http://bugseverywhere.org/be/show/HomePage"&gt;Bugs Everywhere&lt;/a&gt; being two examples.  There is
also a &lt;strong class="command"&gt;ditz&lt;/strong&gt; inspired project, written in &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt;, called &lt;a class="reference external" href="https://github.com/mw44118/pitz"&gt;pitz&lt;/a&gt; that
is in active development.  And &lt;a class="reference external" href="http://www.fossil-scm.org/index.html/doc/tip/www/index.wiki"&gt;fossil&lt;/a&gt; is pretty cool if you’re looking for
a standalone wiki, &lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt; and &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; in one.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If you’re a &lt;a class="reference external" href="http://www.gentoo.org/"&gt;Gentoo&lt;/a&gt; user you can install &lt;strong class="command"&gt;ditz&lt;/strong&gt; using the ebuild
from my &lt;a class="reference external" href="https://github.com/JNRowe/jnrowe-misc/"&gt;overlay&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I’m currently in the process of switching away from &lt;abbr title="Bugs Everywhere"&gt;be&lt;/abbr&gt;, but it can serve as an example quite well.  Unfortunately, there
are no releases currently being made so you will need to install a recent
version of &lt;strong class="command"&gt;bzr&lt;/strong&gt; to download it.  Don’t worry though you aren’t
restricted to &lt;strong class="command"&gt;bzr&lt;/strong&gt; to use it.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Colleagues from work can grab Dan’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;be&lt;/span&gt;&lt;/code&gt; branch directly from our package
repository, it doesn’t require &lt;strong class="command"&gt;bzr&lt;/strong&gt; and it fixes quite a few usage
problems(it is also much faster).  Just remember that it has diverged
massively from the upstream code, so you won’t be able to use it to work with
bug databases created by the upstream project.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The following examples use an older version of &lt;strong class="command"&gt;be&lt;/strong&gt; that you can
download as a &lt;a class="reference external" href="http://www.jnrowe.ukfsn.org/_static/be-0.0.193.tar.bz2"&gt;tarball&lt;/a&gt; and doesn’t require &lt;strong class="command"&gt;bzr&lt;/strong&gt;.&lt;/p&gt;
&lt;section id="setting-be-up"&gt;
&lt;h2&gt;Setting &lt;strong class="command"&gt;be&lt;/strong&gt; up&lt;/h2&gt;
&lt;p&gt;Before we use &lt;strong class="command"&gt;be&lt;/strong&gt; we must prepare it.  In the example that follows
we’re going to create a new directory under the control of &lt;a class="reference external" href="http://www.git-scm.com/"&gt;git&lt;/a&gt;, and tell
&lt;strong class="command"&gt;be&lt;/strong&gt; we wish to use it in there:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir be_test&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; be_test
&lt;span class="gp"&gt;$&lt;/span&gt; git init
&lt;span class="go"&gt;Initialized empty Git repository in /home/jay/Desktop/be_test/.git/&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; be set-root
&lt;span class="go"&gt;Using git for revision control.&lt;/span&gt;
&lt;span class="go"&gt;Directory initialized.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="filing-bugs"&gt;
&lt;h2&gt;Filing bugs&lt;/h2&gt;
&lt;p&gt;We can easily file new bugs, in the next snippet we can see two bugs being
filed.  Bugs are identified by a &lt;abbr title="Universally Unique IDentifier"&gt;UUID&lt;/abbr&gt;,
and to operate on bugs we only need to use a unique prefix of the identifier as
can be seen below.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; be new &lt;span class="s2"&gt;&amp;quot;This is a test bug&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Created bug with ID a09&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; be assign a09
&lt;span class="gp"&gt;$&lt;/span&gt; git commit -m&lt;span class="s2"&gt;&amp;quot;Commit bug a09.&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; be new &lt;span class="s2"&gt;&amp;quot;This is a second bug&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Created bug with ID ec4&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; be severity ec4 serious
&lt;span class="gp"&gt;$&lt;/span&gt; be comment ec4 &lt;span class="s2"&gt;&amp;quot;Comments are easy&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; git commit -m&lt;span class="s2"&gt;&amp;quot;Commit bug ec4.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We now have two bugs filed.  Bug &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a09&lt;/span&gt;&lt;/code&gt; is self-assigned, while &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ec4&lt;/span&gt;&lt;/code&gt; has yet
to be assigned.  As we didn’t set a severity level for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a09&lt;/span&gt;&lt;/code&gt; it is set to the
default of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;minor&lt;/span&gt;&lt;/code&gt;.  A comment was also made on bug &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ec4&lt;/span&gt;&lt;/code&gt;, and if we hadn’t
specified the comment on the command line it would open our default editor to
add the comment.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="querying-bugs"&gt;
&lt;h2&gt;Querying bugs&lt;/h2&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; be list
&lt;span class="go"&gt;ec4:os: This is a second bug&lt;/span&gt;
&lt;span class="go"&gt;a09:om: This is a test bug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong class="command"&gt;be list&lt;/strong&gt; output consists of three fields separated by colons and
they are: bug identifier, status and title.  The first character of the  status
field is an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;o&lt;/span&gt;&lt;/code&gt; telling us the bugs are marked as open, and the second
character is the severity indicator(where the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;s&lt;/span&gt;&lt;/code&gt; for bug &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ec4&lt;/span&gt;&lt;/code&gt; tells us it
is marked as serious).&lt;/p&gt;
&lt;p&gt;You can also limit the bugs shown with &lt;strong class="command"&gt;be list&lt;/strong&gt; by specifying
severities with &lt;a class="reference external" href="https://docs.python.org/3/using/cmdline.html#cmdoption-1" title="(in Python v3.9)"&gt;&lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  Or bugs that are assigned to a certain user with
&lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/code&gt;, and you can use &lt;a class="reference external" href="https://docs.python.org/3/using/cmdline.html#cmdoption-m" title="(in Python v3.9)"&gt;&lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to list bugs assigned to yourself.&lt;/p&gt;
&lt;p&gt;When we wish to inspect individual bugs, to see there full status or comments,
we use the &lt;strong class="command"&gt;be show&lt;/strong&gt; command:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; be show a09
&lt;span class="go"&gt;        ID : a0912cd6-1eae-490c-8e56-5f532242394b&lt;/span&gt;
&lt;span class="go"&gt;Short name : a09&lt;/span&gt;
&lt;span class="go"&gt;    Severity : minor&lt;/span&gt;
&lt;span class="go"&gt;    Status : open&lt;/span&gt;
&lt;span class="go"&gt;    Assigned : James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    Target :&lt;/span&gt;
&lt;span class="go"&gt;    Creator : James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    Created : Wed, 07 Oct 2009 14:11 (Wed, 07 Oct 2009 13:11:06 +0000)&lt;/span&gt;
&lt;span class="go"&gt;This is a test bug&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; be show ec4
&lt;span class="go"&gt;        ID : ec4438ca-a330-4345-b073-43c768f7e9b7&lt;/span&gt;
&lt;span class="go"&gt;Short name : ec4&lt;/span&gt;
&lt;span class="go"&gt;    Severity : serious&lt;/span&gt;
&lt;span class="go"&gt;    Status : open&lt;/span&gt;
&lt;span class="go"&gt;    Assigned :&lt;/span&gt;
&lt;span class="go"&gt;    Target :&lt;/span&gt;
&lt;span class="go"&gt;    Creator : James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    Created : Wed, 07 Oct 2009 14:11 (Wed, 07 Oct 2009 13:11:17 +0000)&lt;/span&gt;
&lt;span class="go"&gt;This is a second bug&lt;/span&gt;
&lt;span class="go"&gt;--------- Comment ---------&lt;/span&gt;
&lt;span class="go"&gt;Name: ec4:1&lt;/span&gt;
&lt;span class="go"&gt;From: James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date: Wed, 07 Oct 2009 13:11:53 +0000&lt;/span&gt;

&lt;span class="go"&gt;Comments are easy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="editing-bugs"&gt;
&lt;h2&gt;Editing bugs&lt;/h2&gt;
&lt;p&gt;We can change the bug status with &lt;strong class="command"&gt;be status&lt;/strong&gt;, see the output from
&lt;strong class="command"&gt;be help status&lt;/strong&gt; for available values.&lt;/p&gt;
&lt;p&gt;Once bugs are marked as fixed they no longer show up in the default
&lt;strong class="command"&gt;be list&lt;/strong&gt; output, but we can still view them with &lt;strong class="command"&gt;be show&lt;/strong&gt;
or by calling &lt;strong class="command"&gt;be list&lt;/strong&gt; with filtering options.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; be status ec4 fixed
&lt;span class="gp"&gt;$&lt;/span&gt; be list
&lt;span class="go"&gt;a09:om: This is a test bug&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; be show ec4
&lt;span class="go"&gt;        ID : ec4438ca-a330-4345-b073-43c768f7e9b7&lt;/span&gt;
&lt;span class="go"&gt;Short name : ec4&lt;/span&gt;
&lt;span class="go"&gt;    Severity : serious&lt;/span&gt;
&lt;span class="go"&gt;    Status : fixed&lt;/span&gt;
&lt;span class="go"&gt;    Assigned :&lt;/span&gt;
&lt;span class="go"&gt;    Target :&lt;/span&gt;
&lt;span class="go"&gt;    Creator : James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    Created : Wed, 07 Oct 2009 14:11 (Wed, 07 Oct 2009 13:11:17 +0000)&lt;/span&gt;
&lt;span class="go"&gt;This is a second bug&lt;/span&gt;
&lt;span class="go"&gt;--------- Comment ---------&lt;/span&gt;
&lt;span class="go"&gt;Name: ec4:1&lt;/span&gt;
&lt;span class="go"&gt;From: James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date: Wed, 07 Oct 2009 13:11:53 +0000&lt;/span&gt;

&lt;span class="go"&gt;Comments are easy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;That really is all it takes to use &lt;strong class="command"&gt;be&lt;/strong&gt;, and that is why I find
a &lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt; to be a nice solution for managing all kinds of random tasks.  I have
a Bugs Everywhere database in my home directory that over the past year has
stored just over 600 bugs from shopping lists to actual bugs with my
configurations files, and I’ve apparently managed to complete 95% of them!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bonus-material"&gt;
&lt;h2&gt;Bonus material&lt;/h2&gt;
&lt;p&gt;One of the little tricks I like to do is override the &lt;strong class="command"&gt;cd&lt;/strong&gt; command to
automatically display the bug list when I enter a directory that contains a Bugs
Everywhere database, and it is very simple to do:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; retval
    &lt;span class="nb"&gt;builtin&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;retval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;retval&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; -d .be &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; be list
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;retval&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It could be improved to take settings to filter the bug list or all manner of
other cool things, but that is why it has a “See gist #x” label next to it.
Feel free to post updates to the gist!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/BTS_as_a_task_manager.html" rel="alternate"/>
    <summary>Tom Marshall asks over the cooler:</summary>
    <category term="bts" label="bts"/>
    <category term="devel" label="devel"/>
    <published>2009-10-07T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Importing_gmail_filters_in_mutt.html</id>
    <title>Importing gmail filters in mutt</title>
    <updated>2009-10-08T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="importing-gmail-filters-in-mutt"&gt;

&lt;p&gt;On our company’s Linux list Ryan Abbott is preparing to move to &lt;a class="reference external" href="http://www.mutt.org/"&gt;mutt&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I have some user filters setup in &lt;a class="reference external" href="https://mail.google.com"&gt;gmail&lt;/a&gt;, and I’m wondering if there some
way to make mutt use them?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ryan has some filters set up for “premium” users who should be tagged in
a special way in the mail display so that they are much more noticeable.  Google
do support &lt;a class="reference external" href="http://gmailblog.blogspot.com/2009/03/new-in-labs-filter-importexport.html"&gt;exporting filters&lt;/a&gt; now, and conveniently it is in well documented
format based on &lt;a class="reference external" href="http://www.atomenabled.org/"&gt;Atom&lt;/a&gt;.  An example export, gleaned from Ryan but with personal
data removed, follows:&lt;/p&gt;
&lt;div class="highlight-xml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;UTF-8&amp;#39;?&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;feed&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.w3.org/2005/Atom&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;xmlns:apps=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://schemas.google.com/apps/2006&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Priority filter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;tag:mail.google.com,2008:filters:1255006471524,31130756565258&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-10-02T12:04:00Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;author&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Ryan Abbott&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;email&amp;gt;&lt;/span&gt;rabbott@example.com&lt;span class="nt"&gt;&amp;lt;/email&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;uri&amp;gt;&lt;/span&gt;http://rabbott.example.com&lt;span class="nt"&gt;&amp;lt;/uri&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;term=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;filter&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Joe Bloggs&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;tag:mail.google.com,2008:filter:1255006471524&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-10-01T09:23:11Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;content&amp;gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;apps:property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;joe@example.com&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;apps:property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;label&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HiPri&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;term=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;filter&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;John Doe&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;tag:mail.google.com,2008:filter:31130756565258&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-09-23T14:59:45Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;content&amp;gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;apps:property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;johndoe@example.com&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;apps:property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;label&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HiPri&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/feed&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The exported filter is actually quite nice and we could just pull the email
addresses out with &lt;a class="reference external" href="http://sed.sourceforge.net/"&gt;sed&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sed -n &lt;span class="s2"&gt;&amp;quot;/name=&amp;#39;from&amp;#39;/s,^.*value=&amp;#39;\([^&amp;#39;]\+\)&amp;#39;.*&lt;/span&gt;$&lt;span class="s2"&gt;,\1,p&amp;quot;&lt;/span&gt; filter.xml
&lt;span class="go"&gt;joe@example.com&lt;/span&gt;
&lt;span class="go"&gt;johndoe@example.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;You shouldn’t parse &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt; with tools like &lt;strong class="command"&gt;sed&lt;/strong&gt; or &lt;strong class="command"&gt;awk&lt;/strong&gt;.
There are plenty of &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt; processing tools available, and unlike
&lt;strong class="command"&gt;sed&lt;/strong&gt; they shouldn’t fail with files that contain namespaces or
other &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt; features.  Now I’ve said that, carry on using &lt;strong class="command"&gt;sed&lt;/strong&gt;
like I often do ;)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once we have some way of getting at the email addresses we just need to add the
filters to &lt;strong class="command"&gt;mutt&lt;/strong&gt;.  For those of us who use &lt;strong class="command"&gt;mutt&lt;/strong&gt; the normal
approach to prioritising in the gmail way is to use either &lt;a class="reference external" href="http://www.mutt.org/doc/manual/manual-3.html#ss3.7"&gt;colouring&lt;/a&gt; or
&lt;a class="reference external" href="http://www.mutt.org/doc/manual/manual-3.html#ss3.22"&gt;scoring&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;color index brightgreen default ~fjoe@example.com
score ~fjohndoe@example.com +20
set index_format=&amp;quot;%Z %2N %?H?%-16.12H&amp;amp;%D? %-16.16F  %s&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="colouring and scoring in mutt" src="../_images/2009-10-08-mutt_screenshot.png" /&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;color&lt;/span&gt;&lt;/code&gt; example sets all mail from the fictitious Joe Bloggs in the mail
index to use a bright green foreground and the default background colour.  The
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;score&lt;/span&gt;&lt;/code&gt; example adds another 20 points to mail from John Doe, we add it
instead of setting it directly is so that we can make use cumulative scoring.
We must make sure we include &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%N&lt;/span&gt;&lt;/code&gt; in our &lt;a class="reference external" href="http://www.mutt.org/doc/manual/manual-6.html#index_format"&gt;index_format&lt;/a&gt; setting to see the
scores in the mail index, the above &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;index_format&lt;/span&gt;&lt;/code&gt; setting is the one
I currently use and it can be seen in the screenshot above.&lt;/p&gt;
&lt;p&gt;I’m sure we’d prefer to automate the generation of the rules, and we can
quickly generate a list for &lt;strong class="command"&gt;mutt&lt;/strong&gt; using our favourite &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt;
processing tool.  Today I’m using &lt;a class="reference external" href="http://www.ruby-lang.org/"&gt;ruby&lt;/a&gt;, because I know it is installed on
Ryan’s system.  We’re going to keep the identifier data from the Google export
just in case we decide to export our rules from &lt;strong class="command"&gt;mutt&lt;/strong&gt; at some point
in the future:&lt;/p&gt;
&lt;div class="highlight-ruby notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rexml/document&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;REXML&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed/entry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;addy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apps:property&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;score ~f&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;addy&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; 20&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Calling that script on the example data from above yields a small
&lt;strong class="command"&gt;mutt&lt;/strong&gt; configuration file that we can include in our mutt setup by
adding &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;source&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;file_location&amp;gt;&lt;/span&gt;&lt;/code&gt; to our &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.muttrc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Joe Bloggs, tag:mail.google.com,2008:filter:1255006471524
score ~fjoe@example.com -20
# John Doe, tag:mail.google.com,2008:filter:31130756565258
score ~fjohndoe@example.com -20
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few years ago I posted some of tricks and tips I use for &lt;a class="reference external" href="http://www.jnrowe.ukfsn.org/articles/configs/mutt.html"&gt;configuring mutt&lt;/a&gt;,
which include some neat ways to colour and score mail on a per-folder basis.  It
may be worth taking a quick look at if you use folders to organise your mails.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Importing_gmail_filters_in_mutt.html" rel="alternate"/>
    <summary>On our company’s Linux list Ryan Abbott is preparing to move to mutt:</summary>
    <category term="gmail" label="gmail"/>
    <category term="mutt" label="mutt"/>
    <published>2009-10-08T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Gentoo_one_liners.html</id>
    <title>Gentoo one liners</title>
    <updated>2009-10-09T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="gentoo-one-liners"&gt;

&lt;p&gt;On our Linux list at work the topic of &lt;a class="reference external" href="http://www.gentoo.org/"&gt;Gentoo&lt;/a&gt; usage arose again today.
Originally, the topic was about interesting one liners used to maintain a Gentoo
system.  I found myself posting extended replies to some of the questions and
I’m reposting a few of those here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;How do I get &lt;em&gt;just the list&lt;/em&gt; of packages that are installed but not in
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;world&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The constraint here is packages that were installed with &lt;code class="xref std std-option docutils literal notranslate"&gt;&lt;span class="pre"&gt;--oneshot&lt;/span&gt;&lt;/code&gt;,
or manually removed from &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/lib/portage/world&lt;/span&gt;&lt;/code&gt;, which means that they
will no longer be updated automatically.  I often use this for packages I’m
just playing with, and it appears lots of others do the same.  While the output
of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emerge&lt;/span&gt; &lt;span class="pre"&gt;--pretend&lt;/span&gt; &lt;span class="pre"&gt;--depclean&lt;/span&gt;&lt;/code&gt; is all that is really needed, the question
is how to get a list of just the packages.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; emerge --pretend --depclean
&lt;span class="go"&gt;&amp;lt;snipped heaps of output&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;gnome-base/orbit&lt;/span&gt;
&lt;span class="go"&gt;    selected: 2.14.17&lt;/span&gt;
&lt;span class="go"&gt;protected: none&lt;/span&gt;
&lt;span class="go"&gt;    omitted: none&lt;/span&gt;

&lt;span class="go"&gt;app-text/iso-codes&lt;/span&gt;
&lt;span class="go"&gt;    selected: 3.8&lt;/span&gt;
&lt;span class="go"&gt;protected: none&lt;/span&gt;
&lt;span class="go"&gt;    omitted: none&lt;/span&gt;

&lt;span class="go"&gt;dev-libs/dbus-glib&lt;/span&gt;
&lt;span class="go"&gt;    selected: 0.76&lt;/span&gt;
&lt;span class="go"&gt;protected: none&lt;/span&gt;
&lt;span class="go"&gt;    omitted: none&lt;/span&gt;

&lt;span class="go"&gt;sys-apps/dbus&lt;/span&gt;
&lt;span class="go"&gt;    selected: 1.2.3-r1&lt;/span&gt;
&lt;span class="go"&gt;protected: none&lt;/span&gt;
&lt;span class="go"&gt;    omitted: none&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class="s1"&gt;&amp;#39;Selected&amp;#39;&lt;/span&gt; packages are slated &lt;span class="k"&gt;for&lt;/span&gt; removal.
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class="s1"&gt;&amp;#39;Protected&amp;#39;&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;omitted&amp;#39;&lt;/span&gt; packages will not be removed.

&lt;span class="go"&gt;Packages installed:   477&lt;/span&gt;
&lt;span class="go"&gt;Packages in world:    86&lt;/span&gt;
&lt;span class="go"&gt;Packages in system:   50&lt;/span&gt;
&lt;span class="go"&gt;Required packages:    348&lt;/span&gt;
&lt;span class="go"&gt;Number to remove:     129&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The output we want can be easily matched with &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;, and the &lt;a class="reference external" href="http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html"&gt;bash&lt;/a&gt;
&lt;strong class="command"&gt;alias&lt;/strong&gt; below will list just the packages by piping the output through
&lt;a class="reference external" href="http://sed.sourceforge.net/"&gt;sed&lt;/a&gt;.  We can even use the one liner as input to a larger function if we only
want to see top-level packages; that is packages that aren’t listed as
dependencies of other packages:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias pkgclean=&amp;quot;emerge ----pretend --depclean | sed -n &amp;#39;/^ [a-z]/s,^ ,,p&amp;#39; | sort&amp;quot;

toppkgclean() {
    local depfiles=$(find /var/db/pkg/ -name RDEPEND -o -name PDEPEND)
    local cleanlist=$(pkgclean)
    for package in ${cleanlist}
    do
        LC_ALL=C grep -q ${package} ${depfiles} || echo ${package}
    done
}

Is it possible to use :command:`bash` completion to complete package names
for use in :file:`package.keywords`?
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I actually wrote the following little function in reply to a user asking
a similar question in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#gentoo&lt;/span&gt;&lt;/code&gt; on Freenode a couple of months ago:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arch_unmask&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; s &lt;span class="k"&gt;done&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FUNCNAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;category/package&amp;gt; [arch]&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; s in &lt;span class="k"&gt;$(&lt;/span&gt;portageq envvar PORTDIR PORTDIR_OVERLAY&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -d &lt;span class="nv"&gt;$s&lt;/span&gt;/&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
        &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt; &amp;gt;&amp;gt;/etc/portage/package.keywords/testing
            &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="nb"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;done&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Doesn&amp;#39;t exist ‘&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;’&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;complete&lt;/span&gt; -F _emerge arch_unmask
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If you’re using our Gentoo boxes at the office the function will be much
faster if you replace the call to &lt;strong class="command"&gt;portageq&lt;/strong&gt; by
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/lib/repos/*&lt;/span&gt;&lt;/code&gt;, as our package trees are always installed there.  The
&lt;strong class="command"&gt;portageq&lt;/strong&gt; call is mainly there for users who use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/portage&lt;/span&gt;&lt;/code&gt;
and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/local/portage&lt;/span&gt;&lt;/code&gt;, or other such monstrosities.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The final question I looked at was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Is there an easy way to clean all the old modules from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/lib/modules&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Assuming you are trying to remove all modules that don’t belong to the current
kernel this is very easy using &lt;strong class="command"&gt;bash&lt;/strong&gt;’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;extglob&lt;/span&gt;&lt;/code&gt; support.  It may
need to be enabled in your session, you can test whether it is enabled with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;shopt&lt;/span&gt; &lt;span class="pre"&gt;extglob&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; /lib/modules/*
&lt;span class="go"&gt;/lib/modules/2.6.31.1 /lib/modules/2.6.31.2-jr2 /lib/modules/2.6.31.3-mk1&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; /lib/modules/!&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;/lib/modules/2.6.31.1 /lib/modules/2.6.31.2-jr2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;!($(uname&lt;/span&gt; &lt;span class="pre"&gt;-r))&lt;/span&gt;&lt;/code&gt; syntax tells bash to match all but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2.6.31.3-mk1&lt;/span&gt;&lt;/code&gt; (the
output of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;uname&lt;/span&gt; &lt;span class="pre"&gt;-r&lt;/span&gt;&lt;/code&gt; on my system), there are plenty of other uses for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;extglob&lt;/span&gt;&lt;/code&gt; and the &lt;a class="reference external" href="http://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching"&gt;documentation&lt;/a&gt; has examples.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Gentoo_one_liners.html" rel="alternate"/>
    <summary>On our Linux list at work the topic of Gentoo usage arose again today.
Originally, the topic was about interesting one liners used to maintain a Gentoo
system.  I found myself posting extended replies to some of the questions and
I’m reposting a few of those here.</summary>
    <category term="gentoo" label="gentoo"/>
    <published>2009-10-09T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Formatting_csv_files_in_the_shell.html</id>
    <title>Formatting CSV files in the shell</title>
    <updated>2009-10-10T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="formatting-csv-files-in-the-shell"&gt;

&lt;p&gt;kemi asks in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#bash&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Are there any tools to format &lt;abbr title="Comma Separated Values"&gt;CSV&lt;/abbr&gt; files in the console?  Not
interactive, no spreadsheets&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.linuxmanpages.com/man1/column.1.php"&gt;column&lt;/a&gt;, which on Linux is likely to be provided by &lt;a class="reference external" href="http://www.kernel.org/pub/linux/utils/util-linux-ng/"&gt;util-linux&lt;/a&gt;, does exactly
this.  The man page even offers an example of how it works(I’ve changed it
slightly to make it work correctly on my system):&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PERM LINKS OWNER GROUP SIZE DATE HH:MM NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;     ls -l static/ &lt;span class="p"&gt;|&lt;/span&gt; sed 1d&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; column -t
&lt;span class="go"&gt;PERM        LINKS  OWNER  GROUP  SIZE   DATE        HH:MM  NAME&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    328    2009-09-25  02:59  body_background.png&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    7234   2009-09-25  02:59  draft.png&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    6253   2009-09-25  02:59  extract-metadata.xsl&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    13143  2009-10-07  09:05  foaf.rdf&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    3580   2009-09-25  02:59  gpg.asc&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    7739   2009-09-25  02:59  icon.png&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    96     2009-09-25  02:59  meta_background.png&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    411    2009-09-29  11:39  remote.png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Given some other standard commands we can mangle that data in various ways at
the shell prompt too, for example we may wish to display the total size of all
the files.  Or, as in the output below, the total size of all the &lt;abbr title="Portable Network Graphics"&gt;PNG&lt;/abbr&gt; files in the directory.&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PERM LINKS OWNER GROUP SIZE DATE HH:MM NAME&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;     ls -l static/ &lt;span class="p"&gt;|&lt;/span&gt; sed 1d&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; column -t &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print}&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;         /\.png/ {sum+=$5}&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;         END {print &amp;quot;Total size of PNG files:&amp;quot;, sum}&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;PERM        LINKS  OWNER  GROUP  SIZE   DATE        HH:MM  NAME&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    328    2009-09-25  02:59  body_background.png&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    7234   2009-09-25  02:59  draft.png&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    6253   2009-09-25  02:59  extract-metadata.xsl&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    13143  2009-10-07  09:05  foaf.rdf&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    3580   2009-09-25  02:59  gpg.asc&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    7739   2009-09-25  02:59  icon.png&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    96     2009-09-25  02:59  meta_background.png&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1      jay    jay    411    2009-09-29  11:39  remote.png&lt;/span&gt;
&lt;span class="go"&gt;Total size of PNG files: 15808&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the original question on how to process &lt;abbr title="Comma Separated Values"&gt;CSV&lt;/abbr&gt; files all we really need to
do is get the data in to a state for &lt;strong class="command"&gt;column&lt;/strong&gt; to process, and we can
use &lt;a class="reference external" href="http://www.linuxmanpages.com/man1/tr.1.php"&gt;tr&lt;/a&gt; to do that.  An example using a small chunk of the network log on this
computer that we wish to format and calculate totals for could be:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat stats
&lt;span class="go"&gt;2009-07-15T05:09:42+0100,16803,4304661,129262665&lt;/span&gt;
&lt;span class="go"&gt;2009-07-16T04:10:29+0100,17551,4012917,67572304&lt;/span&gt;
&lt;span class="go"&gt;2009-07-16T19:03:00+0100,17621,1712073,34162500&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T14:18:19+0100,7961,1071313,26286593&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T18:23:40+0100,1867,308589,6057915&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T18:53:21+0100,1740,180197,2907388&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T19:00:03+0100,356,152917,928948&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T22:01:57+0100,6611,1159789,25562873&lt;/span&gt;
&lt;span class="go"&gt;2009-07-18T13:09:31+0100,1681,164663,2049315&lt;/span&gt;
&lt;span class="go"&gt;2009-07-18T13:24:04+0100,834,54025,662134&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Date,Duration,Sent,Received&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  cat stats &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt;     &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; column -t &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print}&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;         !/Date/ {sent+=$3; recv+=$4}&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;         END {print &amp;quot;\nTotal sent: &amp;quot;sent&amp;quot;, Total received: &amp;quot;recv}&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;Date                      Duration  Sent     Received&lt;/span&gt;
&lt;span class="go"&gt;2009-07-15T05:09:42+0100  16803     4304661  129262665&lt;/span&gt;
&lt;span class="go"&gt;2009-07-16T04:10:29+0100  17551     4012917  67572304&lt;/span&gt;
&lt;span class="go"&gt;2009-07-16T19:03:00+0100  17621     1712073  34162500&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T14:18:19+0100  7961      1071313  26286593&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T18:23:40+0100  1867      308589   6057915&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T18:53:21+0100  1740      180197   2907388&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T19:00:03+0100  356       152917   928948&lt;/span&gt;
&lt;span class="go"&gt;2009-07-17T22:01:57+0100  6611      1159789  25562873&lt;/span&gt;
&lt;span class="go"&gt;2009-07-18T13:09:31+0100  1681      164663   2049315&lt;/span&gt;
&lt;span class="go"&gt;2009-07-18T13:24:04+0100  834       54025    662134&lt;/span&gt;

&lt;span class="go"&gt;Total sent: 13121144, Total received: 295452635&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Formatting_csv_files_in_the_shell.html" rel="alternate"/>
    <summary>kemi asks in #bash:</summary>
    <category term="csv" label="csv"/>
    <category term="unix" label="unix"/>
    <published>2009-10-10T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Making_a_nice_home.html</id>
    <title>Making a nice home</title>
    <updated>2009-10-11T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="making-a-nice-home"&gt;

&lt;p&gt;Back in &lt;span class="xref std std-ref"&gt;Kick_me_birthday_reminders&lt;/span&gt; I said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;You could trigger a rebuild in your &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.bashrc&lt;/span&gt;&lt;/code&gt; before you call
&lt;strong class="command"&gt;rem&lt;/strong&gt; to see the reminders, so they are always up to date at
login. Or, you could be like me and have a post commit hook for &lt;a class="reference external" href="http://www.git-scm.com/"&gt;git&lt;/a&gt; to
manage this… because you are keeping your home directory version controlled
as a sanity measure I hope!&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Today, Stuart Grady asked me in a private mail:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Okay, at which point is the “Tip of the Day” thingy going to be about using
hooks and &lt;a class="reference external" href="http://www.gnu.org/software/make/make.html"&gt;make&lt;/a&gt; in &lt;span class="target" id="index-0"&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I’ll take the hint and look at &lt;strong class="command"&gt;make&lt;/strong&gt;.  For the purposes of this post
we’re going to pretend we haven’t read &lt;a class="reference external" href="http://miller.emu.id.au/pmiller/books/rmch/"&gt;recursive make considered harmful&lt;/a&gt; as
I don’t heed its advice for the &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt; I have in my home directory.
That said, let’s have a look at what can be found in my current top-level
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="permissions"&gt;
&lt;h1&gt;Permissions&lt;/h1&gt;
&lt;p&gt;I keep my home directory version controlled with &lt;strong class="command"&gt;git&lt;/strong&gt;, but
&lt;strong class="command"&gt;git&lt;/strong&gt; out of the box doesn’t maintain permissions on files(beyond the
executable bit anyway).  There are plenty of ways around this including using
external tools such as &lt;a class="reference external" href="http://joey.kitenet.net/code/etckeeper/"&gt;etckeeper&lt;/a&gt;, but I prefer the simple approach of setting
the permissions when they’re needed:&lt;/p&gt;
&lt;div class="highlight-make notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PRIVATE_FILES&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; .abook/addressbook .gnupg/secring.gpg .mailfilter .msmtprc &lt;span class="se"&gt;\&lt;/span&gt;
        .ssh/id_rsa
&lt;span class="nv"&gt;PRIVATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; .gnupg

&lt;span class="nf"&gt;fix-perms&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PRIVATE_FILES&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PRIVATE_DIRS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;info - Removing extra &lt;span class="nb"&gt;read&lt;/span&gt; permissions from private files and directories&lt;span class="k"&gt;)&lt;/span&gt;
        chmod &lt;span class="m"&gt;600&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PRIVATE_FILES&lt;span class="k"&gt;)&lt;/span&gt;
        chmod &lt;span class="m"&gt;700&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PRIVATE_DIRS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If this rule is called after a &lt;strong class="command"&gt;git pull&lt;/strong&gt; is issued then the files
always have the correct permissions.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="vim-hacks"&gt;
&lt;h1&gt;vim hacks&lt;/h1&gt;
&lt;p&gt;I also call &lt;strong class="command"&gt;make&lt;/strong&gt; in some subdirectories, the most interesting one is
probably for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.vim&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-make notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CTAGS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; exuberant-ctags

&lt;span class="nv"&gt;TARGETS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst /usr/lib/%, tags/%.ctags, &lt;span class="k"&gt;$(&lt;/span&gt;wildcard /usr/lib/python*&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    doc/tags

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;TARGETS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(TARGETS)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;/%.&lt;span class="n"&gt;ctags&lt;/span&gt;: /&lt;span class="n"&gt;usr&lt;/span&gt;/&lt;span class="n"&gt;lib&lt;/span&gt;/%
    &lt;span class="k"&gt;$(&lt;/span&gt;CTAGS&lt;span class="k"&gt;)&lt;/span&gt; --exclude&lt;span class="o"&gt;=&lt;/span&gt;test_* --exclude&lt;span class="o"&gt;=&lt;/span&gt;tests.py --exclude&lt;span class="o"&gt;=&lt;/span&gt;test.py &lt;span class="se"&gt;\&lt;/span&gt;
        --exclude&lt;span class="o"&gt;=&lt;/span&gt;*/test/* --exclude&lt;span class="o"&gt;=&lt;/span&gt;*/tests/* --languages&lt;span class="o"&gt;=&lt;/span&gt;python &lt;span class="se"&gt;\&lt;/span&gt;
        -R -f &lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;

&lt;span class="nf"&gt;doc/tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;filter-out&lt;/span&gt; &lt;span class="nv"&gt;doc&lt;/span&gt;/&lt;span class="nv"&gt;tags&lt;/span&gt;, &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;wildcard&lt;/span&gt; &lt;span class="nv"&gt;doc&lt;/span&gt;/*&lt;span class="k"&gt;))&lt;/span&gt;
    vim -X -u NONE -c &lt;span class="s1"&gt;&amp;#39;helptags $(dir $@)&amp;#39;&lt;/span&gt; -c &lt;span class="s1"&gt;&amp;#39;:q&amp;#39;&lt;/span&gt; &amp;lt;/dev/null &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt;/dev/null

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -f &lt;span class="k"&gt;$(&lt;/span&gt;TARGETS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The values in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;patsubst&lt;/span&gt;&lt;/code&gt; block of the &lt;strong class="makevar"&gt;TARGETS&lt;/strong&gt; definition are
a list of filenames to use for tag storage with &lt;a class="reference external" href="http://ctags.sourceforge.net"&gt;ctags&lt;/a&gt;.  The rule creates
a different &lt;strong class="command"&gt;ctags&lt;/strong&gt; file for each installed &lt;a class="reference external" href="http://www.python.org"&gt;python&lt;/a&gt; version.  In the
rule to make the &lt;strong class="command"&gt;ctags&lt;/strong&gt; files we specifically exclude test files as
they aren’t often useful in &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion"&gt;omni-completion&lt;/a&gt;, and they significantly pollute
the tags database for normal use.&lt;/p&gt;
&lt;p&gt;The final entry in &lt;strong class="makevar"&gt;TARGETS&lt;/strong&gt; simply updates the tag lists for &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/various.html#:helptags"&gt;help
files&lt;/a&gt; installed in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.vim/doc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="documentation"&gt;
&lt;h1&gt;Documentation&lt;/h1&gt;
&lt;p&gt;The final subdirectory &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt; we’re going to look at is actually
called in a number of different directories to create &lt;abbr title="HyperText Markup Language"&gt;HTML&lt;/abbr&gt; versions of
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; files.&lt;/p&gt;
&lt;div class="highlight-make notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;GENERATED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.rst, %.html, &lt;span class="k"&gt;$(&lt;/span&gt;wildcard *.rst&lt;span class="k"&gt;))&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;GENERATED&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(GENERATED)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;html&lt;/span&gt;: %.&lt;span class="n"&gt;rst&lt;/span&gt;
        rst2html.py $&amp;lt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we call the above &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;Makefile&lt;/span&gt;&lt;/code&gt; from our &lt;strong class="command"&gt;git&lt;/strong&gt; hooks after any
pull or merge we always have up to date processed versions of documents.  It is
like having a personal web viewable wiki, but without having to use an awful
markup language.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Making_a_nice_home.html" rel="alternate"/>
    <summary>Back in Kick_me_birthday_reminders I said:</summary>
    <category term="unix" label="unix"/>
    <category term="vcs" label="vcs"/>
    <published>2009-10-11T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Instant_web_server.html</id>
    <title>Instant web server</title>
    <updated>2009-10-12T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="instant-web-server"&gt;

&lt;p&gt;Among the topics on our Linux list at work today was a question from Luke
Fletcher that I was expecting to unleash a flurry of emotional responses:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;What is the best small web server for testing site design and the like?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;There were a couple of predictable rants about the benefits and drawbacks of
threading models.  Along with a couple of other topics entirely unhelpful for
the question at hand, but surprisingly little dissent over the choices.&lt;/p&gt;
&lt;p&gt;Matt Traner’s reply sums up the general feeling quite nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Just use whatever server you have installed already.  If you don’t have
&lt;em&gt;any&lt;/em&gt; installed grab &lt;a class="reference external" href="http://nginx.net/"&gt;nginx&lt;/a&gt; as it works well and is quite small.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree with Matt’s answer but I want to point a couple of possibly non-obvious
web servers that they, and you, are likely to have installed already.&lt;/p&gt;
&lt;section id="busybox-applet"&gt;
&lt;h2&gt;Busybox applet&lt;/h2&gt;
&lt;p&gt;All our Linux systems at the office include &lt;a class="reference external" href="http://www.busybox.net/"&gt;busybox&lt;/a&gt;, and in the configuration
we use the &lt;a class="reference external" href="http://www.busybox.net/downloads/BusyBox.html#httpd"&gt;httpd&lt;/a&gt; applet is built.  It is very lightweight, and incredibly
stable.  I often use it when testing or as a weak way to transfer files between
hosts when &lt;a class="reference external" href="http://avahi.org/"&gt;avahi&lt;/a&gt; isn’t available or is too much hassle.  In my &lt;a class="reference external" href="http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html"&gt;bash&lt;/a&gt;
configuration I have a little functions to start up a &lt;strong class="command"&gt;busybox httpd&lt;/strong&gt;
server:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http_serve&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--help&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FUNCNAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; [location]&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Start a httpd in ‘location’, defaulting to ‘&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;http_serve_location&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;’.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    busybox httpd -f -p &lt;span class="m"&gt;8080&lt;/span&gt; -h &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;http_serve_location&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;http_serve_location&lt;/span&gt;&lt;/code&gt; is set elsewhere in my configuration file, so that I can
keep per-machine settings separate.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-built-in"&gt;
&lt;h2&gt;Python built-in&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; comes with its own basic web server, and it is very easy to use:&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python2.6 -m SimpleHTTPServer &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="go"&gt;Serving HTTP on 0.0.0.0 port 8080 ...&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET / HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/content.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/design.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/pygments.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/microformats.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/print.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:16:51] &amp;quot;GET /css/voice.css HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; python3.1 -m http.server &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="go"&gt;Serving HTTP on 0.0.0.0 port 8080 ...&lt;/span&gt;
&lt;span class="go"&gt;kate.localdomain - - [13/Oct/2009 01:17:23] &amp;quot;GET /2009/10/12/TaD-Instant_web_server.html HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that the name of the module has changed from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SimpleHTTPServer&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;http.server&lt;/span&gt;&lt;/code&gt; for Python v3 and above.&lt;/p&gt;
&lt;p&gt;I’ve specified the port 8080 to both calls in the snippet above, by default the
server port would be 8000.  If port 8000 is acceptable for you then you can save
yourself five keystrokes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ruby-built-in"&gt;
&lt;h2&gt;Ruby built-in&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.ruby-lang.org/"&gt;ruby&lt;/a&gt; also comes with its own web server, one that you’re probably already
familiar with if you’re a &lt;a class="reference external" href="http://www.rubyonrails.org/"&gt;rails&lt;/a&gt; user, called &lt;a class="reference external" href="http://www.webrick.org/"&gt;webrick&lt;/a&gt;.  We need a little script
to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;webrick&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-ruby notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /usr/bin/ruby&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;webrick&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;WEBrick&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HTTPServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:BindAddress&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:Port&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:DocumentRoot&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;trap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This script will serve files from whatever directory is specified as its first
argument.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bonus"&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;Python also comes with a &lt;abbr title="Common Gateway Interface"&gt;CGI&lt;/abbr&gt;-capable version
called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CGIHTTPServer&lt;/span&gt;&lt;/code&gt; and a &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt;-&lt;abbr title="Remote Procedure Call"&gt;RPC&lt;/abbr&gt; server
called — this shouldn’t come as a surprise — &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SimpleXMLRPCServer&lt;/span&gt;&lt;/code&gt;.  They’re
very useful for testing out ideas and concepts without having to set down lots
of code.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Instant_web_server.html" rel="alternate"/>
    <summary>Among the topics on our Linux list at work today was a question from Luke
Fletcher that I was expecting to unleash a flurry of emotional responses:</summary>
    <category term="devel" label="devel"/>
    <category term="web" label="web"/>
    <published>2009-10-12T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Visual_vim_mode_identifier.html</id>
    <title>Visual vim mode identifier</title>
    <updated>2009-10-13T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="visual-vim-mode-identifier"&gt;

&lt;p&gt;Paul Kerry rants about his problems with &lt;a class="reference external" href="http://www.vim.org/"&gt;vim&lt;/a&gt; over the cooler today, and as
a long time &lt;strong class="command"&gt;vim&lt;/strong&gt; user I found it hard not to respond to some of the
points.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;All this mode switching makes it hard to know whether typing “Paul” is going
to insert a huge block of code from the ether or insert, you know, “Paul” on
the screen.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The point Paul is making is that when he is in &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/intro.html#vim-modes"&gt;normal mode&lt;/a&gt;, typing the “P” of
”Paul” can cause &lt;strong class="command"&gt;vim&lt;/strong&gt; to insert a huge amount of text at the cursor.
The text comes from the &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/change.html#quote"&gt;unnamed register&lt;/a&gt;, so it will be whatever potentially
very large chunk of text he deleted or &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/change.html#yank"&gt;yanked&lt;/a&gt; last.&lt;/p&gt;
&lt;img alt="mode identifier in vim" class="align-right" src="../_images/2009-10-13-vim_screenshot.png" /&gt;
&lt;p&gt;If he had just added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;set&lt;/span&gt; &lt;span class="pre"&gt;showmode&lt;/span&gt;&lt;/code&gt; to his &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.vimrc&lt;/span&gt;&lt;/code&gt; he would have
a nice &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--&lt;/span&gt; &lt;span class="pre"&gt;INSERT&lt;/span&gt; &lt;span class="pre"&gt;--&lt;/span&gt;&lt;/code&gt; reminder in the bottom of his terminal window when in
insert mode, as can be seen in the screenshot on the right.&lt;/p&gt;
&lt;p&gt;Another option that I use, combined with &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/options.html#'showmode'"&gt;showmode&lt;/a&gt;, is to change the cursor
colour when switching to and from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;insert&lt;/span&gt;&lt;/code&gt; mode.  This unfortunately doesn’t
work on all terminal types, which means you have to test them individually and
then set appropriate values for &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/term.html#'t_SI'"&gt;t_SI&lt;/a&gt; and &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/term.html#'t_EI'"&gt;t_EI&lt;/a&gt; on each terminal type.  An
example for &lt;a class="reference external" href="http://rxvt.sourceforge.net/"&gt;rxvt&lt;/a&gt;-based terminals, including my favourite &lt;a class="reference external" href="http://software.schmorp.de/"&gt;rxvt-unicode&lt;/a&gt;, is
below:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;term&lt;/span&gt; &lt;span class="p"&gt;=~&lt;/span&gt;? &lt;span class="s1"&gt;&amp;#39;^rxvt&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;t_EI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;t_EI&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033]12;red\007&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;t_SI&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033]12;green\007&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I use a green cursor to indicate &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;insert&lt;/span&gt;&lt;/code&gt; mode, I tried a number of alternatives
but found keeping the same cursor colour as my shell sessions was the most
useful for me.  You can use any colour your terminal supports, including the
extended 256 colour palette.  For more information on accessing the colours from
the extended palette see the earlier &lt;span class="xref std std-doc"&gt;Uber_pink_prompts&lt;/span&gt; tip.&lt;/p&gt;
&lt;p&gt;You can also use the &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#InsertEnter"&gt;InsertEnter&lt;/a&gt; and &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/autocmd.html#InsertLeave"&gt;InsertLeave&lt;/a&gt; events to call a function
when changing mode.  There really is no limit to what kind of notifications you
can use with this method.  Taking the idea too far we could use the &lt;a class="reference external" href="https://awesomewm.org/"&gt;awesome&lt;/a&gt;
notifications from &lt;span class="xref std std-doc"&gt;Simple_notifications_in_awesome&lt;/span&gt; to display popups
when we change mode:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;InsertEnter&lt;/span&gt; * &lt;span class="p"&gt;!&lt;/span&gt;echo &lt;span class="s2"&gt;&amp;quot;notify.start(&amp;#39;Insert mode started&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awesome&lt;span class="p"&gt;-&lt;/span&gt;client
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;InsertLeave&lt;/span&gt; * &lt;span class="p"&gt;!&lt;/span&gt;echo &lt;span class="s2"&gt;&amp;quot;notify.stop(&amp;#39;Insert mode finished&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awesome&lt;span class="p"&gt;-&lt;/span&gt;client
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that I didn’t say it was a good idea, just that it was possible!&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Visual_vim_mode_identifier.html" rel="alternate"/>
    <summary>Paul Kerry rants about his problems with vim over the cooler today, and as
a long time vim user I found it hard not to respond to some of the
points.</summary>
    <category term="awesome" label="awesome"/>
    <category term="vim" label="vim"/>
    <published>2009-10-13T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Three_mobile_broadband_in_linux.html</id>
    <title>Three mobile broadband in Linux</title>
    <updated>2009-10-14T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="three-mobile-broadband-in-linux"&gt;

&lt;p&gt;Steve Lowry is picking up his &lt;a class="reference external" href="http://three.co.uk"&gt;Three&lt;/a&gt; modem this afternoon and asks on our
internal Linux list if it supports Linux.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I’ve ordered the Huawei E220 as it was free.  Is it likely to work with
Linux?  And, if so what should I be looking for to set it up?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I’ve had a Huawei &lt;abbr title="Universal Serial Bus"&gt;USB&lt;/abbr&gt; modem for about six months now and it works fine in
Linux, although it is probably a slightly different model.  The box and case
for mine claims it is a E160G, whereas &lt;strong class="command"&gt;lsusb&lt;/strong&gt; from &lt;a class="reference external" href="http://linux-usb.sourceforge.net/"&gt;usbutils&lt;/a&gt; claims
it is a E220.  The manufacturers of these types of products routinely change
the components and models without updating the product codes, so you’ll have to
wait until you plug it in to see what model it actually is.&lt;/p&gt;
&lt;p&gt;As for how to make it work?  Simply use a distribution that comes with
&lt;a class="reference external" href="http://www.gnome.org/projects/NetworkManager/"&gt;NetworkManager&lt;/a&gt; and NetworkManager’s &lt;a class="reference external" href="http://live.gnome.org/NetworkManager/MobileBroadband/ServiceProviders"&gt;mobile broadband provider database&lt;/a&gt;.
When I tested it on a friend’s install with that setup last month it worked out
of the box, all you had to do was plug it in and select the network.&lt;/p&gt;
&lt;section id="the-route-to-fail"&gt;
&lt;h2&gt;The route to fail&lt;/h2&gt;
&lt;p&gt;If, like me, you’d prefer not to install NetworkManager you can manually
configure the device using &lt;a class="reference external" href="http://www.samba.org/ppp"&gt;pppd&lt;/a&gt;, and life is even easier now than it was when
I did it as there is plenty more information available(including this I guess).&lt;/p&gt;
&lt;section id="finding-the-apn"&gt;
&lt;h3&gt;Finding the &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt;&lt;/h3&gt;
&lt;p&gt;The first thing you need is your provider’s &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt;, and the easiest place to
find it is from the &lt;a class="reference external" href="http://live.gnome.org/NetworkManager/MobileBroadband/ServiceProviders"&gt;NetworkManager database&lt;/a&gt;.  If yours is not there you’ll
have to dig further.  When I originally got my device that database was
practically empty, so I had to resort to other means to find the &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;We can extract the &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt; from the Windows driver that came with the device.
The driver can be found on the device itself because it also acts a small
&lt;abbr title="Small Computer Systems Interface"&gt;SCSI&lt;/abbr&gt; device with a filesystem.  It
is actually pretty clever, assuming it works as advertised, as it can
self-install its own driver when plugged in.&lt;/p&gt;
&lt;p&gt;If we find the device name with &lt;strong class="command"&gt;dmesg&lt;/strong&gt; we can mount it, and pull the
&lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt; from the Windows driver:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir e220_drivers&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; e220_drivers
mount -t vfat /dev/sr2 /mnt/huawei
&lt;span class="k"&gt;for&lt;/span&gt; file in /mnt/huawei/**/*.cab&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; unpack &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong class="command"&gt;unpack&lt;/strong&gt; tool from above is just a wrapper around common
archivers, and the tool you actually need to extract the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cab&lt;/span&gt;&lt;/code&gt; files is
&lt;a class="reference external" href="http://synce.sourceforge.net/synce/unshield.php"&gt;unshield&lt;/a&gt;.  Contrary to my first idea &lt;a class="reference external" href="http://www.cabextract.org.uk/"&gt;cabextract&lt;/a&gt; doesn’t work, as these files
are actually made by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;installshield&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt; in hand all we need to do now is configure our system.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="kernel"&gt;
&lt;h3&gt;Kernel&lt;/h3&gt;
&lt;p&gt;If you’re using a vendor supplied kernel the options we need are hopefully
already enabled.  If they’re not, or you build your own kernels, there are few
changes we need to make to the kernel configuration.&lt;/p&gt;
&lt;p&gt;The dongle itself needs &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CONFIG_USB_SERIAL_OPTION&lt;/span&gt;&lt;/code&gt; enabled, which is labelled
as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;USB&lt;/span&gt; &lt;span class="pre"&gt;driver&lt;/span&gt; &lt;span class="pre"&gt;for&lt;/span&gt; &lt;span class="pre"&gt;GSM&lt;/span&gt; &lt;span class="pre"&gt;and&lt;/span&gt; &lt;span class="pre"&gt;CDMA&lt;/span&gt; &lt;span class="pre"&gt;modems&lt;/span&gt;&lt;/code&gt; in the kernel’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;menuconfig&lt;/span&gt;&lt;/code&gt;.  It
can be found hidden away under the “USB Serial Converters” section in 2.6.31.&lt;/p&gt;
&lt;p&gt;We also need &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CONFIG_PPP&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CONFIG_PPP_ASYNC&lt;/span&gt;&lt;/code&gt; support, which can be
found in the “Network devices” section of the config.  Unlike the old-style
dialup you may be used to use there is no point enabling the &lt;abbr title="Point-to-Point Protocol"&gt;PPP&lt;/abbr&gt; compression options as they are not supported by
mobile providers in general, partly because the data is already compressed.&lt;/p&gt;
&lt;p&gt;Then just rebuild the kernel, and check that the dongle shows up in
&lt;strong class="command"&gt;dmesg&lt;/strong&gt; output when it is plugged in.  If it does we’re ready for the
next step.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="etc-chatscripts-three"&gt;
&lt;h3&gt;/etc/chatscripts/three&lt;/h3&gt;
&lt;p&gt;We need a &lt;strong class="command"&gt;pppd&lt;/strong&gt; chatscript for the connection, the format and
settings of this file can be found in the &lt;em class="manpage"&gt;chat(8)&lt;/em&gt; manpage.  My
chatscript is below:&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TIMEOUT 3
ECHO ON
ABORT &amp;#39;BUSY&amp;#39;
ABORT &amp;#39;DELAYED&amp;#39;
ABORT &amp;#39;ERROR&amp;#39;
ABORT &amp;#39;NO ANSWER&amp;#39;
ABORT &amp;#39;NO CARRIER&amp;#39;
ABORT &amp;#39;NO DIALTONE&amp;#39;
ABORT &amp;#39;VOICE&amp;#39;
&amp;#39;&amp;#39; \rAT
OK &amp;#39;AT+CGDCONT=1,&amp;quot;IP&amp;quot;,&amp;quot;3internet&amp;quot;&amp;#39;
OK ATD*99#
CONNECT &amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Exchange &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;3internet&lt;/span&gt;&lt;/code&gt; for your &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt; in the example above, if it differs.&lt;/p&gt;
&lt;p&gt;It is also possible, yet unlikely, that you’ll have to call a different number
to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*99#&lt;/span&gt;&lt;/code&gt;.  If this was the case you would have found that out from extracting
the data from the drivers or looking your network up in the NetworkManager
database.&lt;/p&gt;
&lt;p&gt;Notice the very short value for timeout, I’ve come to that value empirically.
If the connection isn’t up after 3 seconds it is not coming up, and you’re just
wasting time before you retry.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="etc-ppp-peers-three"&gt;
&lt;h3&gt;/etc/ppp/peers/three&lt;/h3&gt;
&lt;p&gt;We also need a peer script, and the format of that file is described in the
&lt;em class="manpage"&gt;pppd(8)&lt;/em&gt; manpage.  Mine can be used as an example:&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;debug
noauth
connect &amp;quot;/usr/sbin/chat -v -f /etc/chatscripts/three&amp;quot;
noipdefault
usepeerdns
/dev/ttyUSB0
defaultroute
persist
crtscts
lcp-echo-failure 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You may have to change your device settings if the dongle doesn’t show up as
&lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;/dev/ttyUSB0&lt;/span&gt;&lt;/code&gt;, but other than that the file should be correct.&lt;/p&gt;
&lt;p&gt;Note that we don’t set a speed in our peer file, and this may appear unusual to
you if you’ve configured &lt;strong class="command"&gt;pppd&lt;/strong&gt; manually in the past.  The reason is
that interface speed for &lt;abbr title="Universal Serial Bus"&gt;USB&lt;/abbr&gt; modems is set by the kernel, and adding a value
here is pointless.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="passwords"&gt;
&lt;h3&gt;passwords&lt;/h3&gt;
&lt;p&gt;We don’t need to add an entry to &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;chap-secrets&lt;/span&gt;&lt;/code&gt; or &lt;code class="file docutils literal notranslate"&gt;&lt;span class="pre"&gt;pap-secrets&lt;/span&gt;&lt;/code&gt; as
authentication isn’t required, but if you’re following along having chosen to
use a configuration tool such as &lt;a class="reference external" href="http://http.us.debian.org/debian/pool/main/p/pppconfig/"&gt;pppconfig&lt;/a&gt; just enter any values you wish as
they’re silently ignored.&lt;/p&gt;
&lt;p&gt;I’m told the same applies to &lt;a class="reference external" href="http://alumnit.ca/wiki/?WvDial"&gt;wvdial&lt;/a&gt;, so if it complains about requiring
a password just add an empty or random string to stop the errors.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="testing-the-connection"&gt;
&lt;h3&gt;Testing the connection&lt;/h3&gt;
&lt;p&gt;To test the connection all we need to do is issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pon&lt;/span&gt; &lt;span class="pre"&gt;three&lt;/span&gt;&lt;/code&gt;, or use the
graphical tool in your distro if you wish.  The first time you do this you
should watch the output of your syslog to look for errors, the errors can be
found in syslog because we supplied &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;debug&lt;/span&gt;&lt;/code&gt; in our peer script.&lt;/p&gt;
&lt;p&gt;On my system the log can be comfortably viewed with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tail&lt;/span&gt; &lt;span class="pre"&gt;-f&lt;/span&gt;
&lt;span class="pre"&gt;/var/log/ppp/current&lt;/span&gt;&lt;/code&gt;, but it is system dependent and if you don’t use &lt;a class="reference external" href="http://metalog.sourceforge.net/"&gt;metalog&lt;/a&gt;
it will definitely be somewhere else in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/log&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the connection worked fine that is all there is to it, now just enable the
connection at system startup or configure &lt;a class="reference external" href="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html"&gt;udev&lt;/a&gt; to connect when the device is
inserted if it will not always be connected.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;These devices can take anywhere between ten and thirty seconds to “settle”
once plugged in. So, don’t block on this service if you add it to the system
startup scripts as it can significantly slow down the system boot time.  On
my dongle you can visually check how long the device takes to settle by
watching the &lt;abbr title="Light Emitting Diode"&gt;LED&lt;/abbr&gt; on the case, when it changes
from green it has found a network signal and is ready to use.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If the connection didn’t work correctly look at the debugging output in syslog
and check the &lt;strong class="command"&gt;pppd&lt;/strong&gt; manual page to look up the error codes.&lt;/p&gt;
&lt;p&gt;Happy, erm… mobility.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Three_mobile_broadband_in_linux.html" rel="alternate"/>
    <summary>Steve Lowry is picking up his Three modem this afternoon and asks on our
internal Linux list if it supports Linux.</summary>
    <category term="linux" label="linux"/>
    <category term="three" label="three"/>
    <published>2009-10-14T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Zsh_and_the_vcs.html</id>
    <title>Zsh and the VCS</title>
    <updated>2009-10-28T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="zsh-and-the-vcs"&gt;

&lt;img alt="Git prompt screenshot" class="align-right" src="../_images/2009-10-28-git_prompt.png" /&gt;
&lt;p&gt;I’ve recently switched to &lt;a class="reference external" href="http://www.zsh.org/"&gt;Zsh&lt;/a&gt; as my login shell after
9 years of using &lt;a class="reference external" href="http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html"&gt;bash&lt;/a&gt;, and for no particularly good reason either as they’re
both great interactive shells.  I guess all the &lt;em&gt;Kool Kids&lt;/em&gt; are doing it, and
I’m just playing catchup.  The one side effect of that is I’m now scribbling
tips about &lt;strong class="command"&gt;zsh&lt;/strong&gt; too…&lt;/p&gt;
&lt;p&gt;In a screenshot I posted in our bugtracker — that was considerably less staged
than the example above — one of my more visual hunks of &lt;strong class="command"&gt;zsh&lt;/strong&gt;
configuration was visible, leading to the following question from Dan Wilson:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Okay, ‘fess time.  How do you get &lt;strong class="command"&gt;git&lt;/strong&gt; branch names in the
prompt?  How do you make the funky arrows show repo status?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Firstly, I use &lt;a class="reference external" href="http://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt; which is an excellent basis for &lt;strong class="command"&gt;zsh&lt;/strong&gt;
configuration files.  My prompt settings work within that framework, although
they could be converted to work with &lt;em&gt;plain&lt;/em&gt; &lt;strong class="command"&gt;zsh&lt;/strong&gt; if you have the
inclination.&lt;/p&gt;
&lt;p&gt;If you want to see my entire “theme” file you can &lt;a class="reference external" href="http://github.com/JNRowe/oh-my-zsh"&gt;clone my fork&lt;/a&gt; and look at
&lt;a class="reference external" href="http://github.com/JNRowe/oh-my-zsh/blob/master/themes/jnrowe.zsh-theme"&gt;oh-my-zsh/themes/jnrowe.zsh-theme&lt;/a&gt;.&lt;/p&gt;
&lt;section id="branch-names"&gt;
&lt;h2&gt;Branch names&lt;/h2&gt;
&lt;p&gt;&lt;strong class="command"&gt;zsh&lt;/strong&gt; comes with some neat &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; integration, that is exceptionally
&lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#SEC273"&gt;documented&lt;/a&gt; in the manual.  I use that code to enable branch names in my
prompt, I use it directly instead of the code in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;oh-my-zsh&lt;/span&gt;&lt;/code&gt; that handles
&lt;strong class="command"&gt;git&lt;/strong&gt; status because it doesn’t do what I want [yet].  I use a format
that matches the default(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;robbyrussell&lt;/span&gt;&lt;/code&gt;) theme in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;oh-my-zsh&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight-zsh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autoload -Uz vcs_info

&lt;span class="c1"&gt;# See the documentation for the format string definition&lt;/span&gt;
&lt;span class="c1"&gt;# This generates a fancy coloured string with $vcs:($branch)&lt;/span&gt;
zstyle &lt;span class="s1"&gt;&amp;#39;:vcs_info:*&amp;#39;&lt;/span&gt; formats &lt;span class="s1"&gt;&amp;#39;%F{2}%s%F{7}:%F{2}(%F{1}%b%F{2})%f &amp;#39;&lt;/span&gt;
zstyle &lt;span class="s1"&gt;&amp;#39;:vcs_info:*&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;enable&lt;/span&gt; git
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Once we’ve configured &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vcs_info&lt;/span&gt;&lt;/code&gt; we just need to include
&lt;span class="target" id="index-0"&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal notranslate"&gt;&lt;span class="pre"&gt;${vcs_info_msg_0_}&lt;/span&gt;&lt;/code&gt; somewhere in our prompt to display the &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; and
current branch name.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vcs_info&lt;/span&gt;&lt;/code&gt; works quite well, and supports many different systems(both common
and uncommon).  As the code snippet shows I enable support for &lt;a class="reference external" href="http://www.git-scm.com/"&gt;git&lt;/a&gt; exclusively.
I’ve used it with &lt;a class="reference external" href="http://www.selenic.com/mercurial/"&gt;mercurial&lt;/a&gt; too, and it works well.  &lt;a class="reference external" href="http://darcs.net"&gt;darcs&lt;/a&gt; also appears to
work well, but it isn’t a system I use often enough to have tested it
thoroughly.&lt;/p&gt;
&lt;p&gt;I tested &lt;strong class="command"&gt;bzr&lt;/strong&gt; support while writing this but it is totally unusable
because of just how painfully slow &lt;strong class="command"&gt;bzr&lt;/strong&gt; is.  On my system it adds
close to one and half seconds to every prompt display, although that could be
improved if I wasn’t using conservative &lt;abbr title="Central Processing Unit"&gt;CPU&lt;/abbr&gt;
scaling to save power.  As a comparison the &lt;strong class="command"&gt;git&lt;/strong&gt; info takes less than
a tenth of a second to calculate on the same system, and &lt;strong class="command"&gt;mercurial&lt;/strong&gt;
around three times that which is most definitely still usable.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;There is a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;use-simple&lt;/span&gt;&lt;/code&gt; setting for the &lt;strong class="command"&gt;bzr&lt;/strong&gt; support that may
make the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vcs_info&lt;/span&gt;&lt;/code&gt; functionality faster for you, albeit not noticeably on
my system.  It is also the only &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; that has such a hack, which is quite
telling in itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="repository-state"&gt;
&lt;h2&gt;Repository state&lt;/h2&gt;
&lt;p&gt;The “funky arrows” Dan asks about are dependent on the state of the current
working directory as can be seen in the screenshot at the top of this page.&lt;/p&gt;
&lt;table class="docutils align-default"&gt;
&lt;colgroup&gt;
&lt;col style="width: 20%" /&gt;
&lt;col style="width: 80%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Identifier&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;white →&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Not a &lt;strong class="command"&gt;git&lt;/strong&gt; repository&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;green ▶&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Clean &lt;strong class="command"&gt;git&lt;/strong&gt; repository&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;red ▶&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Staged changes in &lt;strong class="command"&gt;git&lt;/strong&gt; repository&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;yellow ▶&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Unstaged changes in &lt;strong class="command"&gt;git&lt;/strong&gt; repository&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using these visual markers it is always obvious what state a directory is in,
I’ve toyed with adding more but suspect the lack of complexity is what makes
them so useful.&lt;/p&gt;
&lt;p&gt;To enable them we need to add a &lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/Functions.html#SEC45"&gt;precmd hook&lt;/a&gt; to calculate the repository
status:&lt;/p&gt;
&lt;div class="highlight-zsh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autoload -U add-zsh-hook
add-zsh-hook precmd prompt_jnrowe_precmd

prompt_jnrowe_precmd &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    vcs_info

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vcs_info_msg_0_&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;dir_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%F{2}→%f&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git diff --cached --name-status &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;dir_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%F{1}▶%f&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git diff --name-status &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;dir_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%F{3}▶%f&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;dir_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%F{2}▶%f&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With this added the we just need to include &lt;span class="target" id="index-1"&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal notranslate"&gt;&lt;span class="pre"&gt;$dir_status&lt;/span&gt;&lt;/code&gt; in our prompt
and the status identifiers will be used.&lt;/p&gt;
&lt;p&gt;If you are using a font which doesn’t display the characters correctly, either
change the characters in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dir_status&lt;/span&gt;&lt;/code&gt; values or switch to a &lt;a class="reference external" href="http://www.is-vn.bg/hamster/"&gt;better font&lt;/a&gt;
that can display them.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Zsh_and_the_vcs.html" rel="alternate"/>
    <summary>I’ve recently switched to Zsh as my login shell after
9 years of using bash, and for no particularly good reason either as they’re
both great interactive shells.  I guess all the Kool Kids are doing it, and
I’m just playing catchup.  The one side effect of that is I’m now scribbling
tips about zsh too…</summary>
    <category term="git" label="git"/>
    <category term="vcs" label="vcs"/>
    <category term="zsh" label="zsh"/>
    <published>2009-10-28T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/tips/Debugging_python_regexps.html</id>
    <title>Debugging Python RegEx</title>
    <updated>2009-10-29T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="debugging-python-regex"&gt;

&lt;p&gt;Rob Sampson is learning &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; and struggling to get to grips with its
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; handling.  He asks on one of our internal lists at the office:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I’ve written what I believe to be a valid &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; to perform matches on
some data, and I can’t figure out why it isn’t matching on my input.
Any clues about where to look?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The answer to these types of questions is more often than not one of two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Failure to use &lt;a class="reference external" href="http://docs.python.org/tutorial/introduction.html#strings"&gt;raw strings&lt;/a&gt; when including backslashes in the &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choosing to use a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; when a better tool for the job exists&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="using-raw-strings"&gt;
&lt;h2&gt;Using raw strings&lt;/h2&gt;
&lt;p&gt;In Rob’s code he had failed to take in to account the backslash escaping
problem.  A simplified example of what he was trying to do would be:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; ([0-9]+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;[a-z]+) &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make 123\match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;[]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="c1"&gt;# Whereas with raw strings this match will work&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; ([0-9]+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;[a-z]+) &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make 123\match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;123\\match&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Without the raw string, specified by the preceding &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;r&lt;/span&gt;&lt;/code&gt; in our pattern, the
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; parser is actually looking for a literal &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/code&gt; where we’ve intended
to use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/code&gt; as the start of a character set.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;There is another important point here too as the example above uses
character ranges, just as Rob’s original did.  As in most &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; engines
Python has inbuilt support for certain character classes, and they are
often more functional than the simple character ranges.  The big win with
Python’s character classes is that they can be locale and/or Unicode
aware by specifying the &lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.LOCALE" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.LOCALE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; or &lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.UNICODE&lt;/span&gt;&lt;/code&gt; flags.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;These types of string escaping problems are common, and as your &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;
becomes more complex their likelihood increases greatly.  Python, as is often
the case, has the answer and it comes in the shape of the &lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.DEBUG" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.DEBUG&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
flag.  The &lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.DEBUG" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.DEBUG&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; flag displays a parse tree allowing you to easily
inspect the &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; you have constructed:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; ([0-9]+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;[a-z]+) &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make 123\match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;literal 32&lt;/span&gt;
&lt;span class="go"&gt;subpattern 1&lt;/span&gt;
&lt;span class="go"&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class="go"&gt;    in&lt;/span&gt;
&lt;span class="go"&gt;    range (48, 57)&lt;/span&gt;
&lt;span class="go"&gt;literal 91&lt;/span&gt;
&lt;span class="go"&gt;literal 97&lt;/span&gt;
&lt;span class="go"&gt;literal 45&lt;/span&gt;
&lt;span class="go"&gt;literal 122&lt;/span&gt;
&lt;span class="go"&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class="go"&gt;    literal 93&lt;/span&gt;
&lt;span class="go"&gt;literal 32&lt;/span&gt;
&lt;span class="go"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here we can see that our expression matches &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;range&lt;/span&gt; &lt;span class="pre"&gt;(48,&lt;/span&gt; &lt;span class="pre"&gt;57)&lt;/span&gt;&lt;/code&gt;, 48 and 57 being
the &lt;a class="reference external" href="http://docs.python.org/library/functions.html"&gt;ordinal&lt;/a&gt; for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;9&lt;/span&gt;&lt;/code&gt; respectively.  Following that we see a match
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;literal&lt;/span&gt; &lt;span class="pre"&gt;91&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;chr(91)&lt;/span&gt;&lt;/code&gt; shows us that the character we are matching is
a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/code&gt;.  With this information it is easy to see where the problem is.&lt;/p&gt;
&lt;p&gt;If you need to use more than one flag, such as the often useful
&lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.VERBOSE" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.VERBOSE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; flag, you can combine them with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;|&lt;/span&gt;&lt;/code&gt; (bitwise OR) as the
flags are just named constants(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;DEBUG&lt;/span&gt;&lt;/code&gt; is 128 for example).&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; (\d+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;\w+) &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make 123\match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCALE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;literal 32&lt;/span&gt;
&lt;span class="go"&gt;subpattern 1&lt;/span&gt;
&lt;span class="go"&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class="go"&gt;    in&lt;/span&gt;
&lt;span class="go"&gt;    category category_digit&lt;/span&gt;
&lt;span class="go"&gt;literal 92&lt;/span&gt;
&lt;span class="go"&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class="go"&gt;    in&lt;/span&gt;
&lt;span class="go"&gt;    category category_word&lt;/span&gt;
&lt;span class="go"&gt;literal 32&lt;/span&gt;
&lt;span class="go"&gt;[&amp;#39;123\\match&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="better-tools"&gt;
&lt;h2&gt;Better tools&lt;/h2&gt;
&lt;p&gt;Often, a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; is the hammer of choice for far too many tasks for far too
many people(myself included).  There are often much better choices, some of
which are very domain specific and some quite general.&lt;/p&gt;
&lt;p&gt;For any moderately complex parsing job &lt;a class="reference external" href="http://pyparsing.wikispaces.com/"&gt;pyparsing&lt;/a&gt; is a great choice.  The
syntax is quite readable and the parser is very fast.  Just make sure you
ignore any examples telling you to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;pyparsing&lt;/span&gt; &lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; as you’ll
evoke great rage in every person who reads your code.&lt;/p&gt;
&lt;p&gt;While &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyparsing&lt;/span&gt;&lt;/code&gt; is a good general parsing tool it would be overkill for
the task at hand, but it doesn’t hurt to show a simple example of
constructing a parser:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyparsing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alphas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;make 123&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;match &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;([&amp;#39;make&amp;#39;, &amp;#39;123&amp;#39;, &amp;#39;\\&amp;#39;, &amp;#39;match&amp;#39;, &amp;#39; &amp;#39;], {})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another exceptional tool for tasks that people often abuse &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; for is
&lt;a class="reference external" href="http://labix.org/python-dateutil"&gt;python-dateutil&lt;/a&gt;.  One of the reasons I occasionally turn to this module is
that Python’s &lt;a class="reference external" href="https://docs.python.org/3/library/time.html#time.strptime" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;time.strptime()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; isn’t even capable of parsing timestamps
created by &lt;a class="reference external" href="https://docs.python.org/3/library/time.html#time.strftime" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;time.strftime()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, for example if you use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%z&lt;/span&gt;&lt;/code&gt; in the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;strftime&lt;/span&gt;&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;All too often you see people trying to solve date parsing problems with
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; and heaps of &lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;int()&lt;/span&gt;&lt;/code&gt; calls to mangle the matches.  Not only is this
a very brittle approach, but the &lt;a class="reference external" href="http://labix.org/"&gt;labix&lt;/a&gt; guys have solved this problem for you
already:&lt;/p&gt;
&lt;div class="highlight-pycon notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dateutil&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009 10 30 23:35:16+0400&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2009, 10, 30, 23, 35, 16, tzinfo=tzoffset(None, 14400))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If you use &lt;a class="reference external" href="http://labix.org/python-dateutil"&gt;python-dateutil&lt;/a&gt; do be aware that by default it will prefer US
mid-endian date formats when guessing for some patterns.  Either create your
own &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;parserinfo&lt;/span&gt;&lt;/code&gt; object and set &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dayfirst&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;True&lt;/span&gt;&lt;/code&gt;, or use something
stricter.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In closing before you start parsing any text — regardless of how simple it is
— you should thumb through the &lt;a class="reference external" href="http://docs.python.org/library/"&gt;standard library&lt;/a&gt; and perform a search on
&lt;a class="reference external" href="http://pypi.python.org/pypi"&gt;pypi&lt;/a&gt;.  Often, the work has already been done for you and may well be much
better than the hurried version you were about to cobble together with
a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/tips/Debugging_python_regexps.html" rel="alternate"/>
    <summary>Rob Sampson is learning Python and struggling to get to grips with its
RegEx handling.  He asks on one of our internal lists at the office:</summary>
    <category term="python" label="python"/>
    <published>2009-10-29T00:00:00+00:00</published>
  </entry>
</feed>
