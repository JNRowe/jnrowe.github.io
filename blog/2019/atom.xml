<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jnrowe.github.io/</id>
  <title>JNRowe - Posted in 2019</title>
  <updated>2019-12-11T00:00:00+00:00</updated>
  <link href="https://jnrowe.github.io/"/>
  <link href="https://jnrowe.github.io/blog/2019/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <subtitle>Ramblings of a tired mind</subtitle>
  <entry>
    <id>https://jnrowe.github.io/articles/gps_rollover_2019.html</id>
    <title>GPS rollover 2019</title>
    <updated>2019-04-05T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="gps-rollover-2019"&gt;

&lt;p&gt;Tomorrow we’re going to experience the simultaneously cataclysmic and mundane
consequences of a &lt;abbr title="Global Positioning System"&gt;GPS&lt;/abbr&gt; rollover event.  &lt;em&gt;Many&lt;/em&gt; things will break, &lt;em&gt;many&lt;/em&gt; will
continue to work and &lt;em&gt;many&lt;/em&gt; will just take a step closer to breaking… the fun
of date handling never ends.&lt;/p&gt;
&lt;img alt="Pick a year, win a prize" class="align-right" src="../_images/gps_calendar.png" /&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This is an informal piece, not an official support channel.  If you use
hardware I’m involved in building then contact your support channel, they
are there to help.&lt;/p&gt;
&lt;/div&gt;
&lt;section id="what-is-the-issue"&gt;
&lt;h2&gt;What is the issue?&lt;/h2&gt;
&lt;p&gt;Since 1981 &lt;abbr title="Global Positioning System"&gt;GPS&lt;/abbr&gt; signals have included a week number, which is provided as
a 10-bit field and as such can only store 1024 values(around 19.5 years).
Every time we hit that limit the week number rolls back to zero, and things may
fail to work correctly following that.&lt;/p&gt;
&lt;aside class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Prior to ‘81&lt;/p&gt;
&lt;p&gt;As a side note very early &lt;abbr title="Global Positioning System"&gt;GPS&lt;/abbr&gt; transmissions didn’t even include week
numbers in the signal.  Time was represented simply as a value &lt;em&gt;within&lt;/em&gt;
a week, and not &lt;em&gt;belonging&lt;/em&gt; to a week.  If you work in the industry you
still occasionally come across implementations that work like this, or
issues that are caused by this.&lt;/p&gt;
&lt;p&gt;There have been a surprising number of other largely backward compatible
upgrades to the &lt;abbr title="Global Positioning System"&gt;GPS&lt;/abbr&gt; signal over the approaching fifty years of its
development.  Coupled with the out of band enhancements such as &lt;abbr title="Wide Area Augmentation System"&gt;WAAS&lt;/abbr&gt;, the accuracy and uses of &lt;abbr title="Global Positioning System"&gt;GPS&lt;/abbr&gt;-based
systems have increased a tremendous amount.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;This is the second operational rollover event, the first happened in August
1999.  We — that is developers of &lt;abbr title="Global Navigation Satellite System"&gt;GNSS&lt;/abbr&gt;-using systems — &lt;em&gt;are&lt;/em&gt; prepared for
this, but the level of preparedness is unfortunately not uniform or indicative
of how well we’re handling this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="mitigations"&gt;
&lt;h2&gt;Mitigations&lt;/h2&gt;
&lt;p&gt;As this problem is quite well understood there has been an awful lot of effort
put in to working around it, some quite simple and some quite interesting.&lt;/p&gt;
&lt;section id="stored-offset"&gt;
&lt;h3&gt;Stored offset&lt;/h3&gt;
&lt;p&gt;The gold standard is systems that could afford the addition of &lt;abbr title="Non-Volatile Random Access Memory"&gt;NVRAM&lt;/abbr&gt;.  If we have a storage medium then the
previous known week number is often used as a check against rollover.  If we
know an initial epoch number from manufacturing date, and can see the
changeover at &lt;em&gt;some&lt;/em&gt; point than you &lt;em&gt;shouldn’t&lt;/em&gt; experience errors from
a rollover.&lt;/p&gt;
&lt;p&gt;The obvious drawback being if a system is dormant for twenty years, but that
isn’t likely to be a real problem.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="week-number-offset"&gt;
&lt;h3&gt;Week number offset&lt;/h3&gt;
&lt;p&gt;One of the most common mechanisms for dealing with rollover has been to bind it
to the firmware running on the device.  You simply assume the week number is
relative to a value given in the firmware.  For example, if we have firmware
from 2010 we can:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Assume we’re not running in 1999 via a time machine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Know we can’t see week numbers prior to our 2010 release date&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accept the given week number as valid through to 1023&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After rollover treat week number 0 through 540 as being an offset past 1023&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a reasonable solution in many circumstances, and one that exists in
many products in the field.  It also hints at part of the problem with this
method, and that is that a significant number of systems that will present
problems at various stages of their lives.  In the above example our system
&lt;em&gt;should&lt;/em&gt; work through the epoch change in 2019, but will likely fail in August
2029 without intervention as we’ll trip over &lt;em&gt;our&lt;/em&gt; workaround with our own
rollover bug causing it to reset to 2010.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="gnss-voting-comparisons"&gt;
&lt;h3&gt;&lt;abbr title="Global Navigation Satellite System"&gt;GNSS&lt;/abbr&gt; voting comparisons&lt;/h3&gt;
&lt;p&gt;Many modern receivers support multiple signals; &lt;abbr title="Global Positioning System"&gt;GPS&lt;/abbr&gt;, GLONASS, Beidou, &amp;amp;c.
Given this we can use consensus building to validate information.  If one of
the inputs is providing time data that is years away from the others you can
simply exclude it.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;Often systems may have alternative time sources available such as a regular
low quality &lt;abbr title="Real Time Clock"&gt;RTC&lt;/abbr&gt;, these can also be used as a hint
towards consensus building too.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="leap-second-heuristic"&gt;
&lt;h3&gt;Leap second heuristic&lt;/h3&gt;
&lt;p&gt;&lt;abbr title="Global Positioning System"&gt;GPS&lt;/abbr&gt; time is not corrected for leap seconds and as such increasingly drifts
from &lt;abbr title="Coordinated Universal Time"&gt;UTC&lt;/abbr&gt; over the years.  However, the current offset from &lt;abbr title="Coordinated Universal Time"&gt;UTC&lt;/abbr&gt; is
transmitted, and it can be used as an heuristic to configure the device from.&lt;/p&gt;
&lt;p&gt;For example, when the first epoch ended in 1999 there was a 13 second offset
against &lt;abbr title="Coordinated Universal Time"&gt;UTC&lt;/abbr&gt;.  The switch to the third epoch happens with an 18 second offset.
Keying the epoch number off of the leap second offset &lt;em&gt;should&lt;/em&gt; be a reasonable
way to handle rollover&lt;a class="footnote-reference brackets" href="#id3" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Forthcoming leap second adjustments are also published, so we can know both
the current offset and the maximum date given that future dates must be in the
future.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Leap second information is only published within &lt;abbr title="Global Positioning System"&gt;GPS&lt;/abbr&gt; almanac, and is not
available immediately following a cold boot of a device.  Depending on
circumstances the 12 minute wait to acquire the almanac data may not be an
issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="what-should-i-do"&gt;
&lt;h2&gt;What should I do?&lt;/h2&gt;
&lt;p&gt;First check with your system’s supplier, they &lt;em&gt;should&lt;/em&gt; have information on what
mitigations they have in place and what effects you should see now or at other
times in the future.&lt;/p&gt;
&lt;p&gt;The next step should be to &lt;em&gt;ignore&lt;/em&gt; what they told you and run a signal
simulator to figure out what is actually happening.  Date handling bugs happen
in so many layers you should have a testing procedure in place regardless of
your trust in a supplier&lt;a class="footnote-reference brackets" href="#id4" id="id2"&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;Fully read the documentation for simulators and receivers as many devices
require a deep reset to make use of a simulated signal.  The P3200 sitting
on my desk requires a hardware switch to be toggled before it will do
anything beyond report “spoofing detected” if it receives unexpected
signals, with the exception of a &lt;abbr title="Trust On First Use"&gt;TOFU&lt;/abbr&gt; event
following a deep reset.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="should-i-set-an-alarm-for-november-2038"&gt;
&lt;h2&gt;Should I set an alarm for November 2038?&lt;/h2&gt;
&lt;p&gt;Yes and no.&lt;/p&gt;
&lt;p&gt;The next rollover will occur in 2038, but new message types that use a 13-bit
week number field are available and increasingly being used.  This enhancement
changes the cycle to nearly 157 years, so we can naïvely hope this shouldn’t be
an issue again.&lt;/p&gt;
&lt;p&gt;However, there &lt;em&gt;will&lt;/em&gt; be systems that are still in the field that were
developed prior to the upgrade and there &lt;em&gt;will&lt;/em&gt; be systems that were designed
later that still use the old 10-bit field for their week data.&lt;/p&gt;
&lt;p&gt;Like I said in the previous section make sure you’re testing these things as
they’ll catch you out at some point.  Maybe even in fun ways such as exciting
interactions between the fourth GPS epoch and the &lt;em&gt;other&lt;/em&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Y2038_problem"&gt;2038 problem&lt;/a&gt; in
January of that same year.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id3"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;We’re assuming the earth doesn’t suddenly speed up enough that we need
to start issuing negative leap seconds.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I’m &lt;em&gt;absolutely&lt;/em&gt; including products worked on by myself and my
co-workers(forgive me!) in this.  People make mistakes, systems fail and
skies may fall; having a good testing infrastructure is a must.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/gps_rollover_2019.html" rel="alternate"/>
    <summary>Tomorrow we’re going to experience the simultaneously cataclysmic and mundane
consequences of a GPS rollover event.  Many things will break, many will
continue to work and many will just take a step closer to breaking… the fun
of date handling never ends.Pick a year, win a prize</summary>
    <category term="gps" label="gps"/>
    <category term="time" label="time"/>
    <category term="bugs" label="bugs"/>
    <published>2019-04-05T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/thoughts/i_have_a_secret.html</id>
    <title>I have a secret</title>
    <updated>2019-05-24T00:00:00+01:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="i-have-a-secret"&gt;

&lt;p&gt;A terrible secret haunts me, at times daily… I have virtually &lt;em&gt;no&lt;/em&gt; &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/SQL"&gt;SQL&lt;/a&gt; skills.&lt;/p&gt;
&lt;p&gt;Somehow I’m nearly twenty years in to my career and I possess so little &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt;
knowledge that I need to thumb a reference every single time its use passes my
desk.&lt;/p&gt;
&lt;p&gt;The reason this hasn’t mattered as much as it should is simply that I’ve been
terribly lucky.  When working on systems that require a lot of &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; use there
are &lt;em&gt;amazing&lt;/em&gt; &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; geniuseseses who sneak around behind the scenes making
things awesome.  They often leave cute little love notes in the commit messages
alerting me to the wonders of documentation, and on occasion even self-upping
their owed beer count at the same time.&lt;/p&gt;
&lt;img alt="Sad reality of SQL knowledge" class="align-left" src="../_images/sql_venn.png" /&gt;
&lt;p&gt;I’ll submit that I’m not &lt;em&gt;entirely&lt;/em&gt; ignorant of the domain.  I routinely use
&lt;strong class="command"&gt;sqlite3&lt;/strong&gt; at the command line for inspecting configuration files and
local application databases.  I’ve written a few apps that use &lt;a class="reference external" href="http://www.sqlite.org/"&gt;sqlite&lt;/a&gt; for
their data storage, or that query remote &lt;a class="reference external" href="http://www.postgresql.org/"&gt;postgresql&lt;/a&gt; servers for reporting.
I know &lt;em&gt;what&lt;/em&gt; an &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/N+1_Select_Problem"&gt;n+1 problem&lt;/a&gt; is, but I’ll still create them through lack of
forethought from time to time.  It is just that my knowledge stops right about
there.&lt;/p&gt;
&lt;section id="orm-usage"&gt;
&lt;h2&gt;&lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt; usage&lt;/h2&gt;
&lt;p&gt;The number one thing that has kept me away from a deeper understanding of &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt;
is &lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt;s.  Let us be honest, most of the time we interact with &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; fronted
databases it is from a language where we are treating &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; as nothing more
than a &lt;abbr title="Domain Specific Language"&gt;DSL&lt;/abbr&gt;.  Often, it would feel fair to say we treat it this way with
little to no interest in what is going on behind the scenes.&lt;/p&gt;
&lt;p&gt;If you’re using &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; — like I was when I decided to write this — you’re
probably reaching for &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;sqlalchemy&lt;/a&gt; to integrate databases in to your codebase.
It is spectacular, especially when combined with &lt;a class="reference external" href="https://bitbucket.org/zzzeek/alembic"&gt;alembic&lt;/a&gt; for migration
management.&lt;/p&gt;
&lt;p&gt;Using a well designed &lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt; allows us to free ourselves from a lot of the
mental overhead of dealing with databases; they’ll handle connections,
transactions, save points, etc.  They’ll almost always handle the
idiosyncrasies of different databases too, which is fantastic when you’re
developing against &lt;a class="reference external" href="http://www.sqlite.org/"&gt;sqlite&lt;/a&gt; and deploying to a large scale &lt;a class="reference external" href="http://www.postgresql.org/"&gt;postgresql&lt;/a&gt;
installation&lt;a class="footnote-reference brackets" href="#id3" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another effect, which admittedly may be a by-product of how I commonly use
&lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt;s, is the reconnection of constraints to models.  It feels all too common
in many non-&lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt; projects to see duplication of constraint handling.  We’ll
see constraints defined in the &lt;abbr title="Data Definition Language"&gt;DDL&lt;/abbr&gt; via &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt;
and again in the codebase’s host language.  We, as relational database users,
know that this duplication violates the spirit of a couple of Codd’s rules:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;A single language must be able to define data, views, integrity
constraints, authorization, transactions, and data manipulation.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;Integrity constraints must be available and stored in the metadata, not in
an application program.&lt;/p&gt;
&lt;p class="attribution"&gt;—Dr. E. F. Codd&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;However, eventually we end up hoisting a lot of constraint handling in to an
application as it can both improve and simplify error handling logic.  And then
over time they &lt;em&gt;will&lt;/em&gt; become out of sync in various ways, either through
negligence or simple oversight.&lt;/p&gt;
&lt;p&gt;When we allow ourselves to define our system, constraints included, within the
realms of an &lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt; we can rely on the automatic transfer of model design to the
underlying database.  I feel it is important to note that Codd never appears to
suggest we use two languages for database access and applications, just that
a single language can do &lt;em&gt;everything&lt;/em&gt; within our database and a &lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt; seems to
fit the bill.  It is just that people have coalesced around &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; as &lt;em&gt;the only&lt;/em&gt;
interface to relational databases over the decades, and as such we end up using
two distinct languages far more often that we perhaps ought.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="editing"&gt;
&lt;h2&gt;Editing&lt;/h2&gt;
&lt;p&gt;When working with &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; without an &lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt; things change &lt;em&gt;greatly&lt;/em&gt;.  You find
yourself having to consciously flip back and forward between mental models of
how you’re processing your data, and personally I can find that quite
challenging at times.  I mean yes, at the top-level we may be &lt;em&gt;thinking&lt;/em&gt; in
unison for both our application languages and &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt;, but we’re often falling
back to applying a manual remapping of the derived table when we’re processing
the results.  We’re literally hand rolling the work that an already written
— and hopefully well tested — &lt;abbr title="Object Relational Mapping"&gt;ORM&lt;/abbr&gt; can already perform for us.&lt;/p&gt;
&lt;p&gt;Even the little things can be jarring.  One that surprises me is watching
people work with &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; embedded in other source files doing so in editors that
don’t really help such usage.  Everything is fine in &lt;a class="reference external" href="http://www.vim.org/"&gt;vim&lt;/a&gt;/&lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt; land, where
one can apply syntax highlighting and linting to specific regions of a file&lt;a class="footnote-reference brackets" href="#id4" id="id2"&gt;2&lt;/a&gt;.  For other editors, and most &lt;abbr title="Integrated Development Environment"&gt;IDEs&lt;/abbr&gt;, you’re often left floundering in a heap of unstructured literal
strings peppered all over the place.&lt;/p&gt;
&lt;img alt="Multi-language highlighting in vim" src="../_images/vim_py_sql.png" /&gt;
&lt;/section&gt;
&lt;section id="wait-am-i-talking-myself-out-of-learning"&gt;
&lt;h2&gt;Wait, am I talking myself out of learning?&lt;/h2&gt;
&lt;p&gt;I know this has sounded like a sweetheart letter aimed at
&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;sqlalchemy&lt;/a&gt;/&lt;a class="reference external" href="http://www.rubyonrails.org/"&gt;activerecord&lt;/a&gt;/&lt;a class="reference external" href="http://www.codesynthesis.com/products/odb"&gt;odb&lt;/a&gt;, but it isn’t meant that way.  Okay, it kinda of
is.  However, I want to know more.&lt;/p&gt;
&lt;p&gt;I’m tired of needing to enlist the help of others when I want a deeper
understanding of what is causing slowdowns with complex queries, or having to
reach for a manual to remember little things like how to manage collation
rules.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="acceptance"&gt;
&lt;h2&gt;Acceptance&lt;/h2&gt;
&lt;p&gt;Now that I’ve accepted this fact enough to scribble this note I’m going to do
something to fix it.&lt;/p&gt;
&lt;p&gt;I’ve picked up a couple of books, and I’m going to immerse myself in the
experience for a little while.  If you have advice or pointers to resources,
then please drop me a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id3"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;That is probably a good hint as to why I’m still capable of producing
expensive &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;n+1&lt;/span&gt;&lt;/code&gt; queries, even when I know what they are.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;My opinion being that the narrow region feature of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;emacs&lt;/span&gt;&lt;/code&gt;, and the
excellent &lt;a class="reference external" href="https://github.com/chrisbra/NrrwRgn"&gt;vim substitute&lt;/a&gt;, are the gold standard for working with
complex &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; embedded in another language’s files.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/thoughts/i_have_a_secret.html" rel="alternate"/>
    <summary>A terrible secret haunts me, at times daily… I have virtually no SQL skills.Sad reality of SQL knowledge</summary>
    <category term="databases" label="databases"/>
    <category term="learning" label="learning"/>
    <category term="sql" label="sql"/>
    <published>2019-05-24T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>https://jnrowe.github.io/articles/advent_of_code_2019.html</id>
    <title>Advent of Code 2019</title>
    <updated>2019-12-11T00:00:00+00:00</updated>
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;section id="advent-of-code-2019"&gt;

&lt;p&gt;With a touch of sadness, I’ve given up on &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; for this year.  I’m writing this
as a journal entry, more for myself than others.  You’ve been warned!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;As always &lt;a class="reference external" href="http://adventofcode.com/2018"&gt;Advent of Code&lt;/a&gt; is fun, even when it doesn’t always feel like
it.  If you’re enjoying it, &lt;em&gt;or&lt;/em&gt; currently screaming at it, &lt;a class="reference external" href="https://adventofcode.com/2019/support"&gt;tip the
creator&lt;/a&gt; so that we can smile and shout at it next year.&lt;/p&gt;
&lt;/div&gt;
&lt;section id="why-quit"&gt;
&lt;h2&gt;Why quit?&lt;/h2&gt;
&lt;p&gt;The puzzles aren’t my cup of tea this year, but I’m not complaining.  Our
leader board for the office has twice as many people as last year, so clearly it
is my problem and not &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt;’s.&lt;/p&gt;
&lt;p&gt;The reasons for my lack of enjoyment are largely a general malaise that
manifests itself as I chew through the texts.  A chunk of my day job resembles
the type of puzzles I’ve completed, and if I wanted more of that I could knock
some real items off my to–do list.&lt;/p&gt;
&lt;p&gt;I have 22 stars for completing both parts of every day so far this year, but
I’m taking a break until I have a bit more downtime.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-1"&gt;
&lt;h2&gt;Day 1&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/1"&gt;The Tyranny of the Rocket Equation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I jumped in with my toolset from last year, so my solution for part one is:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@aoc_run&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;12&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;14&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;1969&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;654&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;100756&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;33583&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="mi"&gt;3329926&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@read_data&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fuel_requirements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;aoc_run&lt;/span&gt;&lt;/code&gt; decorator configures a test runner using the examples from
description, and if provided the second argument confirms my output when I’m
refactoring the code(which I won’t be doing in this instance).  If the second
argument isn’t provided, such as when you’re writing your code, it will output
the result for you to submit.&lt;/p&gt;
&lt;p&gt;There is nothing interesting with the code for the solution itself, possibly
beyond the fact that we’re using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;//&lt;/span&gt;&lt;/code&gt;(floor division) to handle the rounding
for us.&lt;/p&gt;
&lt;p&gt;This could be performed just as easily with &lt;a class="reference external" href="http://ftp.gnu.org/gnu/bc/"&gt;bc&lt;/a&gt; and/or &lt;a class="reference external" href="http://suso.suso.org/programs/num-utils/"&gt;num-utils&lt;/a&gt;.  I had
&lt;a class="reference external" href="https://github.com/SirVer/ultisnips"&gt;ultisnips&lt;/a&gt; configured to create a skeleton from last year, so only had to paste
the tests and type the &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#sum" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;sum()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; call to complete the first part.&lt;/p&gt;
&lt;p&gt;Part two leans toward a solution using recursion, and allows us to introduce one
of the many useful tools from Python’s stdlib &lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;itertools.takewhile()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  This
function consumes an iterator until the given condition no longer holds.  In
this instance we’re told to recurse until our additional fuel is just a rounding
error, we can code this with a simple &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;takewhile(lambda&lt;/span&gt; &lt;span class="pre"&gt;x:&lt;/span&gt; &lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;0,&lt;/span&gt;
&lt;span class="pre"&gt;fuel_recurse(int(l)))&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The recursion itself is a simple infinite generator:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fuel_recurse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The call to &lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;takewhile()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; will slurp up results for each module,
and then we can simply call &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#sum" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;sum()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; on them.  It only depends on your taste
whether you choose to flatten the results from each module, or whether you call
&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#sum" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;sum()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; on per-module &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#sum" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;sum()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; results.&lt;/p&gt;
&lt;p&gt;In my rush to hit the leaderboard I introduced a really stupid logic bug,
my original &lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt; code was &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mod&lt;/span&gt; &lt;span class="pre"&gt;//=&lt;/span&gt; &lt;span class="pre"&gt;3&lt;/span&gt; &lt;span class="pre"&gt;-&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt;&lt;/code&gt;.  Clearly this won’t work as it is
simply dividing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mod&lt;/span&gt;&lt;/code&gt; by 1.  I might be number one on the leaderboard for
idiocy with a bug that foolish, but luckily I’m too stoopid to find it to
check.  I’m admitting this in the open to remind myself to think a little more
in the following days.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-2"&gt;
&lt;span id="day-two-label"&gt;&lt;/span&gt;&lt;h2&gt;Day 2&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2018/day/2"&gt;Inventory Management System&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Annoyingly this problem introduces examples that function differently from your
user input.  If, like me, you collect the examples for use as a test case you’ll
need to treat your output differently to account for the “&lt;strong&gt;before running the
program&lt;/strong&gt;, replace position 1 with the value 12 and replace position 2 with the
value 2” caveat.&lt;/p&gt;
&lt;p&gt;I wasted a moment or two trying to decide whether to do The Right Thing™ or
special case the user input.  I chose to special case it initially, by
implementing a guard based on program length.  I’m acknowledging this to make
a point, it is very tempting to produce awful hacks in the eternal pursuit of
valuable internet points.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_computer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extract_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
        &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;run_program&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I had to go back and fix it before I tackled part two, as it &lt;em&gt;really&lt;/em&gt; annoyed me
having to look at it in my editor.&lt;/p&gt;
&lt;p&gt;The actual implementation of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IntCode&lt;/span&gt;&lt;/code&gt; processor is not interesting,
purely a simple &lt;abbr title="Finite State Machine"&gt;FSM&lt;/abbr&gt;.  If I was to re-implement it
from scratch I’d probably do the same, but would be more likely to use a hash to
lookup opcode implementations instead of a multi-armed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt;&lt;/code&gt; statement.  Mostly
because invalid opcodes are then automatically rejected with a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;KeyError&lt;/span&gt;&lt;/code&gt;, but
also because you know it is going to become a hairy &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Cyclomatic_complexity"&gt;McCabe complexity&lt;/a&gt;
nightmare if you start adding more branches as the days push on.&lt;/p&gt;
&lt;p&gt;The only value to using a multi-armed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt;&lt;/code&gt; is that you can match multiple
opcodes far more easily that you can with simple &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{opcode:&lt;/span&gt; &lt;span class="pre"&gt;func}&lt;/span&gt;&lt;/code&gt; approach,
for example:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;opcode&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;opcode&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For part two, I was super lazy and simply ran all ten-thousand inputs.
Computers are fast enough that even noodling about optimisation for this is
a wasteful trade off.  Instead, I spent a few minutes making my test runner
output colours on failures for the greater good.&lt;/p&gt;
&lt;img alt="|AOC| example runner failure" src="../_images/2019-12-11-advent_of_code.png" /&gt;
&lt;/section&gt;
&lt;section id="day-3"&gt;
&lt;h2&gt;Day 3&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/3"&gt;Crossed Wires&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve fallen in to actual thought territory today.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/articles/advent_of_code_2018.html#day-3"&gt;This time last year&lt;/a&gt; I mentioned &lt;a class="reference external" href="http://www.numpy.org/"&gt;numpy&lt;/a&gt;, and that advice holds again today.
If you’re planning on simply bruteforcing the circuit on to a giant grid, expect
a lot of memory pressure and simply switching to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; will do wonders.
A quick test looks like you’ll be looking at a few gigabytes of memory for the
super naïve method with Python lists.&lt;/p&gt;
&lt;p&gt;Personally I just went for storing the intersections in a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Dict[Tuple[int,&lt;/span&gt;
&lt;span class="pre"&gt;int],&lt;/span&gt; &lt;span class="pre"&gt;int]&lt;/span&gt;&lt;/code&gt;.  There was a niggling feeling in my mind that part two might
expose a requirement that meant my processing time would explode exponentially,
or there would be a region painting question that would make having access to
the populated grid easier.  It wasn’t the case in the end, and we’ll save
breaking out &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; for another day.&lt;/p&gt;
&lt;p&gt;I wrote very few lines of code today, although my solution was rather large.
This is the result of simply tugging my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Point&lt;/span&gt;&lt;/code&gt; object with its pre-written
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Taxicab_geometry"&gt;Manhattan distance&lt;/a&gt; methods from 2018’s &lt;a class="reference external" href="https://adventofcode.com/2018/day/6"&gt;Chronal Coordinates&lt;/a&gt; solution.  I’m
unsure whether this makes me happy for code reuse or sad for cheating the puzzle
a little.&lt;/p&gt;
&lt;p&gt;The only interesting element from today is relying on a bunch of default
functionality that Python gives us.  Instead of needing to write our own matcher
to find the overlapping wires, we can simply call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wire1.keys()&lt;/span&gt; &lt;span class="pre"&gt;&amp;amp;&lt;/span&gt; &lt;span class="pre"&gt;wire2&lt;/span&gt;&lt;/code&gt; and
Python gives us the intersection points directly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-4"&gt;
&lt;h2&gt;Day 4&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/4"&gt;Secure Container&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re attempting to find a six digit password, the problem space is small enough
that we can just code the rules without thought for speed.  Simply iterate over
the given range, while treating the numbers as strings.&lt;/p&gt;
&lt;p&gt;Rule three states “two adjacent digits are the same”.  That is a &lt;a class="reference external" href="http://regex.info/blog/2006-09-15/247"&gt;simple regex
away&lt;/a&gt;, &lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.search" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.search()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; allows us to search for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(\d)\1&lt;/span&gt;&lt;/code&gt; to find any
duplicated value.  Job done.  If you were so inclined you could use
&lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.groupby" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;groupby()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to pluck repeats out instead.&lt;/p&gt;
&lt;p&gt;Rule four says “Going from left to right, the digits &lt;strong&gt;never decrease&lt;/strong&gt;; they
only ever increase or stay the same”.  Quickest answer was just to compare the
password to a sorted version of itself, if they’re equal then the password
passes.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Clearly, there is a bunch of ugly type shifting going on here; &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; from
&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#func-range"&gt;range()&lt;/a&gt;, &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; from &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#int" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#list" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; from &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
However, it just isn’t worth the effort to improve this.  Arguably, you could
iterate over the characters manually to avoid the final conversion but
&lt;a class="reference external" href="https://docs.python.org/3/library/timeit.html#module-timeit" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;timeit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; shows it takes twice as long anyway.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;Using &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#all" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;all()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; we’re short-circuiting the failure case in exactly the
same way as the &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#sorted" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;sorted()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; comparison.  While &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#all" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;all()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#any" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;any()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
and the tools in &lt;a class="reference external" href="https://docs.python.org/3/library/functools.html#module-functools" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;functools&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; aren’t &lt;em&gt;fashionable&lt;/em&gt; in Python circles
they can often make a whole lot of code more readable.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Part two slightly modified the third rule to say “the two adjacent matching
digits &lt;strong&gt;are not part of a larger group of matching digits&lt;/strong&gt;”.  Laziest method
won again, Python provides a &lt;a class="reference external" href="https://docs.python.org/3/library/collections.html#collections.Counter" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;Counter&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; object that does all
the work for us:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At another time I may have reached for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Counter&lt;/span&gt;&lt;/code&gt; in the first part.  I find it
quite interesting how a previous unrelated task colours the work one produces on
an another.&lt;/p&gt;
&lt;p&gt;If you’re allergic to &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; look away now, but…   You can still perform the
match by using a positive look behind to effectually make the match available
&lt;em&gt;before&lt;/em&gt; you saw it.  &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(\d)(?&amp;lt;!\1.)\1(?!\1)&lt;/span&gt;&lt;/code&gt;, or with the benefit of
&lt;a class="reference external" href="https://docs.python.org/3/library/re.html#re.VERBOSE" title="(in Python v3.9)"&gt;&lt;code class="xref py py-data docutils literal notranslate"&gt;&lt;span class="pre"&gt;re.VERBOSE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    (\d)      # a digit&lt;/span&gt;
&lt;span class="s2"&gt;    (?&amp;lt;!\1.)  # check character *before* doesn&amp;#39;t match&lt;/span&gt;
&lt;span class="s2"&gt;    \1        # repeated character&lt;/span&gt;
&lt;span class="s2"&gt;    (?!\1)    # check character *after* doesn&amp;#39;t match&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We wouldn’t want to do that though, as it makes kittens weep.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-5"&gt;
&lt;span id="day-five-label"&gt;&lt;/span&gt;&lt;h2&gt;Day 5&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/5"&gt;Sunny with a Chance of Asteroids&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be honest, today’s puzzle bored me.  It was just a matter of translating
a few more rules in to our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IntCode&lt;/span&gt;&lt;/code&gt; state machine.  I may have been tempted
to skip it for now, but all &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; players know we’ll need to implement it all if
we want to continue with further days.&lt;/p&gt;
&lt;p&gt;I can’t get over how impenetrable the wording felt to me.  I think it is simply
the choice of using non-standard “simple” wording to make the text more
approachable to non-&lt;abbr title="Computer Science"&gt;CS&lt;/abbr&gt; people that left me having to
re-read paragraphs multiple times.  This isn’t a complaint aimed at the creator,
more an admission of one of my shortcomings&lt;a class="footnote-reference brackets" href="#id4" id="id1"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instead of simply expanding my Python implementation from &lt;a class="reference internal" href="../articles/advent_of_code_2019.html#day-two-label"&gt;&lt;span class="std std-ref"&gt;day two&lt;/span&gt;&lt;/a&gt;, I took the &lt;a class="reference external" href="http://www.joelonsoftware.com/items/2008/05/01.html"&gt;architecture astronaut&lt;/a&gt; approach and created
a standalone &lt;a class="reference external" href="https://nim-lang.org/"&gt;nim&lt;/a&gt; implementation that was &lt;em&gt;far&lt;/em&gt; faster.  It also provides the
benefit of being usable regardless of what language I choose to attack a future
puzzle in, or even to use from the shell in a pipeline.&lt;/p&gt;
&lt;p&gt;If you’re into such shenanigans yourself, &lt;a class="reference external" href="https://github.com/yglukhov/nimpy/"&gt;nimpy&lt;/a&gt; provides a really nice method
to do so.  You can create your standalone binary implementing a task, but also
make it usable directly &lt;em&gt;from&lt;/em&gt; Python with a simple import.&lt;/p&gt;
&lt;img alt="Example display from IntCode emulator" src="../_images/2019-12-11-intcode_memory.png" style="width: 389.07px; height: 266.97px;" /&gt;
&lt;p&gt;I think this is probably my tip of the day, if you find a puzzle a little
uninteresting just &lt;em&gt;make it more interesting&lt;/em&gt;.  Implementing the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nim&lt;/span&gt;&lt;/code&gt; version
with human-readable and &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; output,
MovieOS memory display while running, tacking on &lt;a class="reference external" href="http://blockdiag.com/"&gt;seqdiag&lt;/a&gt; output for bug
inspection was glossy, and optimising it in ridiculous ways with branch
prediction to take some advantage of all my &lt;abbr title="Central Processing Unit"&gt;CPU&lt;/abbr&gt; cores was a lot of fun.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-6"&gt;
&lt;h2&gt;Day 6&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/6"&gt;Universal Orbit Map&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Much like my experience with &lt;a class="reference external" href="/articles/advent_of_code_2018.html#day-7"&gt;day 7 from last year&lt;/a&gt;, this is a no-brainer
if you recognise the problem and know where to find a pre-made solution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;NetworkX is a Python package for the creation, manipulation, and study of
the structure, dynamics, and functions of complex networks.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Today that solution comes in the form of &lt;a class="reference external" href="http://networkx.github.io/"&gt;networkx&lt;/a&gt;, an incredibly useful package
for mangling graph structures at scale.  We can create a directed graph from our
puzzle input by splitting lines on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;)&lt;/span&gt;&lt;/code&gt;.  We can then use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;networkx&lt;/span&gt;&lt;/code&gt; to count
up all the orbits:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;orbits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ancestors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orbits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orbits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For part two we need to find the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;shortest&lt;/span&gt; &lt;span class="pre"&gt;path&lt;/span&gt; &lt;span class="pre"&gt;length&lt;/span&gt;&lt;/code&gt;, and for that we only
really need to find an underscore or two:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orbits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_undirected&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;YOU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SAN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you’re interested in approaching the problem from a little further down, the
Python docs have an interesting essay on &lt;a class="reference external" href="https://www.python.org/doc/essays/graphs/"&gt;implementing graph structures&lt;/a&gt; just
for you.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.graphviz.org/"&gt;graphviz&lt;/a&gt; provides all the required functionality too, and the input is
trivially convertible to a directed graph with a &lt;strong class="command"&gt;sed&lt;/strong&gt;.  If you’re
only aware of simple &lt;strong class="command"&gt;dot&lt;/strong&gt; usage I really recommend digging in to
the documentation for the many other tools in the package.  Today you’d have
wanted to read about &lt;strong class="command"&gt;ccomps&lt;/strong&gt;, &lt;strong class="command"&gt;dijkstra&lt;/strong&gt;, and maybe
&lt;strong class="command"&gt;nop&lt;/strong&gt; for &lt;abbr title="Obsessive–compulsive disorder"&gt;OCD&lt;/abbr&gt;-compliance.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1idigraph {&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$a}&amp;#39;&lt;/span&gt; \
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s,\(.*\))\(.*\),&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\1&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\2&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;,&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;day06&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; \
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;nop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="day-7"&gt;
&lt;h2&gt;Day 7&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/7"&gt;Amplification Circuit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Back in &lt;a class="reference internal" href="../articles/advent_of_code_2019.html#day-five-label"&gt;&lt;span class="std std-ref"&gt;day five&lt;/span&gt;&lt;/a&gt; I sounded like a fool for implementing
standalone &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IntCode&lt;/span&gt;&lt;/code&gt; interpreters, today I inhale the plaudits as
a double-bacon-genius.&lt;/p&gt;
&lt;p&gt;Part one requires us to simply tie a few interpreters together.  I decided to do
this from my shell, as it didn’t look that difficult.  We need to test all
permutations of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{0…4}&lt;/span&gt;&lt;/code&gt;, and there are plenty of ways to do this.  I’m going
to use &lt;a class="reference external" href="http://sourceforge.net/projects/crunch-wordlist/"&gt;crunch&lt;/a&gt; with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/code&gt;[ermutations] option as it was already
installed:&lt;/p&gt;
&lt;div class="highlight-zsh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;crunch &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; -p &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;..4&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll now want to iterate over the array testing our amplifiers, which I chose
to do with a loop because it was quicker than adding more argument parsing to my
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IntCode&lt;/span&gt;&lt;/code&gt; interpreter to make this possible with a pipe chain.&lt;/p&gt;
&lt;div class="highlight-zsh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; choice &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$choices&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; input &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(ps::)choice&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;./intcode inputs/day07.txt &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="s1"&gt;$&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$rv&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$rv&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are a couple of things going on here that aren’t all that common.  First,
I’m a &lt;a class="reference external" href="https://www.zsh.org/"&gt;zsh&lt;/a&gt; user and I tend to prefer the &lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/Shell-Grammar.html#Alternate-Forms-For-Complex-Commands"&gt;short syntax&lt;/a&gt;.  It is functionally
identical to “standard” syntax, but I find it more clear.&lt;/p&gt;
&lt;p&gt;Second, we can take advantage of &lt;strong class="command"&gt;zsh&lt;/strong&gt;’s &lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags"&gt;parameter expansion flags&lt;/a&gt;
to split our five character string in to an array of individual characters.  The
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;${(ps::)choice}&lt;/span&gt;&lt;/code&gt; construct tells zsh to split the string with an empty
delimiter, but the normal way to use it would be to split based on a character
such as a comma(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;${(ps:,:)csv_record}&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Finally, we’re using a &lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/Redirection.html#Redirection"&gt;here-string&lt;/a&gt; to feed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stdin&lt;/span&gt;&lt;/code&gt; for our interpreter.  The
oddness with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$'\n'&lt;/span&gt;&lt;/code&gt; is a &lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/Shell-Grammar.html#Quoting"&gt;quoting form&lt;/a&gt; that tells zsh to interpret the text
as it would for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;print&lt;/span&gt;&lt;/code&gt;, that is it expands the newline escape sequence for
us.&lt;/p&gt;
&lt;p&gt;With that block written we now have each possible output, and the original
question told us to provide the highest value as our answer.  &lt;a class="reference external" href="http://suso.suso.org/programs/num-utils/"&gt;num-utils&lt;/a&gt;
provides &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numbound&lt;/span&gt;&lt;/code&gt; for exactly this sort of purpose,  and simply tacking &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;|&lt;/span&gt;
&lt;span class="pre"&gt;numbound&lt;/span&gt;&lt;/code&gt; on to our outerloop gives us the final result for part one.&lt;/p&gt;
&lt;p&gt;Part two is simply a matter of changing the input and loop condition, and
contains nothing new or interesting.  If you’re doing something similar
I strongly suggest getting to know the &lt;a class="reference external" href="http://zsh.sourceforge.net/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands"&gt;fc builtin&lt;/a&gt;, which allows you to edit
your shell session in a real editor instead of needing to manually switch
between your editor and terminal when composing more complex shell blocks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-8"&gt;
&lt;h2&gt;Day 8&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/8"&gt;Space Image Format&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re going to want a chunker to implement this, and oddly for something so
common Python doesn’t seem to provide one&lt;a class="footnote-reference brackets" href="#id5" id="id2"&gt;2&lt;/a&gt;.  Perhaps the reason is how
simple it is to implement, but then what would explain &lt;a class="reference external" href="https://docs.python.org/3/library/math.html#math.copysign" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;math.copysign()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;?&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Generate n-sized chunks from list.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For part one all we need to do is count “pixel” values in each frame, and we
once again use a &lt;a class="reference external" href="https://docs.python.org/3/library/collections.html#collections.Counter" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;Counter&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to do the lifting:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then we need to select the layer with the fewest zeroes, and calculate
a rudimentary checksum for the elves to verify:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;zero_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;zero_layer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;zero_layer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;My point for showing the whole code for such a simple task is to reiterate the
point I’m making a lot, if you’re aiming for speed then be sure to leverage the
tools that are available to you.  This &lt;em&gt;entire&lt;/em&gt; solution can be &lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt;’d in less
than five lines without even resorting to &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Code_golf"&gt;code golfing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For part two we need to iterate over the layers applying a basic rule.  As we’re
told to iterate in reverse order, we simply skip “transparent” pixels and
only apply black and white.  Once again taking advantage of &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html"&gt;built-ins&lt;/a&gt; allows us
to write basically zero code:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; █&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Those four lines were my first attempt in the &lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt;, and I only burst the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt;&lt;/code&gt; statement for readability when I moved it to a file.&lt;/p&gt;
&lt;p&gt;As I wrote less than ten lines to submit my answers, I decided to make a little
more work for myself.  I give you images of images…&lt;/p&gt;
&lt;figure class="align-default" id="id7"&gt;
&lt;a class="reference external image-reference" href="../_static/2019-12-11-space_image.mp4"&gt;&lt;img alt="Frames from the image decoding" src="../_images/2019-12-11-space_image.png" style="width: 319.44px; height: 221.76000000000002px;" /&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Click the image for an animation, if you want to see the image decoding.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A more interesting question might be: without reversing the frames how quickly
can we apply &lt;abbr title="Optical Character Recognition"&gt;OCR&lt;/abbr&gt; to guess the incomplete
text?  Had the input data been larger it might have been an interesting approach
to solving this puzzle.  Install &lt;a class="reference external" href="https://github.com/tesseract-ocr/"&gt;tesseract&lt;/a&gt;, figure it out and drop me a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-9"&gt;
&lt;h2&gt;Day 9&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/9"&gt;Sensor Boost&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hrmmph.  The puzzle text took me longer to read than the extra opcode and mode
took to add to my interpreter.  There was nothing new or noteworthy in the
implementation either, just another state variable and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;switch&lt;/span&gt;&lt;/code&gt; arm.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-10"&gt;
&lt;h2&gt;Day 10&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://adventofcode.com/2019/day/10"&gt;Monitoring Station&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part one was easy enough, after having put in some legwork to re-read topics
I have a tendency to forget through lack of use.  I took a ten minute diversion
to refresh myself on &lt;a class="reference external" href="https://nrich.maths.org/13746"&gt;polar coordinates&lt;/a&gt;&lt;a class="footnote-reference brackets" href="#id6" id="id3"&gt;3&lt;/a&gt;, then a little &lt;a class="reference external" href="https://docs.python.org/3/library/cmath.html#module-cmath" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmath&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
refresher.&lt;/p&gt;
&lt;p&gt;Research over.  All we need to do is map the asteroid coordinates as complex
numbers, then iterate with more stdlib magic to count unique angles.  Dumping
the output of &lt;a class="reference external" href="https://docs.python.org/3/library/cmath.html#cmath.phase" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmath.phase()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; in to a set comprehension strips the
duplicates for us.  We can think of it as a naïve form of &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Raycasting"&gt;ray casting&lt;/a&gt; to
“hide” the hidden asteroids.&lt;/p&gt;
&lt;p&gt;I think the interesting part of today’s puzzle is yet another stdlib reminder.
Should you wish to use cartesian coordinates to operate on the asteroids you
have pre-built &lt;a class="reference external" href="https://docs.python.org/3/library/math.html#math.gcd" title="(in Python v3.9)"&gt;&lt;code class="xref py py-func docutils literal notranslate"&gt;&lt;span class="pre"&gt;gcd()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; or &lt;a class="reference external" href="https://docs.python.org/3/library/fractions.html#fractions.Fraction" title="(in Python v3.9)"&gt;&lt;code class="xref py py-class docutils literal notranslate"&gt;&lt;span class="pre"&gt;Fraction&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; functionality
for your angle representations, and if you opt for 1-dimensional polar
coordinates you have &lt;a class="reference external" href="https://docs.python.org/3/library/cmath.html#module-cmath" title="(in Python v3.9)"&gt;&lt;code class="xref py py-mod docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmath&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; functions at your fingertips.&lt;/p&gt;
&lt;p&gt;And &lt;em&gt;iff&lt;/em&gt; you outgrow the stdlib the Python ecosystem is great.  As an example,
you &lt;em&gt;could&lt;/em&gt; read the whole input in to a &lt;a class="reference external" href="https://numpy.org/devdocs/reference/arrays.html#array-objects"&gt;numpy.array&lt;/a&gt; for the map.  Then take
advantage of &lt;a class="reference external" href="https://numpy.org/doc/1.16/reference/generated/numpy.nonzero.html"&gt;numpy.nonzero()&lt;/a&gt; to extract the asteroid coordinates to iterate
over.&lt;/p&gt;
&lt;p&gt;The other thing I learnt is my co-worker Karl is &lt;em&gt;amazing&lt;/em&gt;, his solution
included a &lt;a class="reference external" href="http://www.pygame.org/"&gt;pygame&lt;/a&gt;-based radar sweep display of the asteroid field.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="day-11"&gt;
&lt;h2&gt;Day 11&lt;/h2&gt;
&lt;p&gt;I’ve kind of lost interest today.  This puzzle was largely just tying your
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IntCode&lt;/span&gt;&lt;/code&gt; interpreter in to a &lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Logo_(programming_language)"&gt;Logo&lt;/a&gt;-esque walker from various other puzzles,
it felt more like busywork than an actual challenge.&lt;/p&gt;
&lt;p&gt;I’m pretty sure I’ll come back to &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; 2019 during my Winterval break, but that
is it for now.&lt;/p&gt;
&lt;img alt="Calendar showing current count of 22 stars" src="../_images/2019-12-11-aoc_calendar.png" /&gt;
&lt;/section&gt;
&lt;section id="tips"&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;p&gt;I’m mostly repeating my tips from &lt;span class="xref std std-doc"&gt;last year&lt;/span&gt; and the
&lt;span class="xref std std-doc"&gt;year before&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Don’t use this as an excuse to learn a new language.  The puzzles aren’t really
complicated enough to learn a new language beyond basic grammar.  You may as
well use it as an excuse to explore new features in a language you already
know, or as an excuse to explore the standard library of your chosen language
some more.&lt;/p&gt;
&lt;p&gt;Read the problems &lt;em&gt;deeply&lt;/em&gt;.  The artificial nature of the puzzles often elides
important information, or at least can often feel that way.  These &lt;em&gt;are&lt;/em&gt;
puzzles so you should expect some vexation, and skimming for speed will make
this worse!&lt;/p&gt;
&lt;p&gt;If you’re going for the leaderboard you need to be &lt;em&gt;really&lt;/em&gt; fast, so: Use fast
languages, be &lt;em&gt;all over&lt;/em&gt; your chosen weapon’s standard library, and use your
editor’s &lt;a class="reference external" href="https://github.com/SirVer/ultisnips/"&gt;snippets&lt;/a&gt; well.  &lt;strong&gt;Every&lt;/strong&gt;. &lt;strong&gt;Second&lt;/strong&gt;. &lt;strong&gt;Counts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And finally, keep your old solutions around either in files or in your &lt;abbr title="Read–Eval–Print Loop"&gt;REPL&lt;/abbr&gt;’s
history as you’ll probably end up revisiting them, if not this year then maybe
in the next.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hopes-for-2020"&gt;
&lt;h2&gt;Hopes for 2020?&lt;/h2&gt;
&lt;p&gt;Repeating number one from last year: That the options to pay for it are better
next year.  Each year I have to find a friend to make a donation in my place as
the payment options are weak.  It would be nice to not have to do so, and
limiting payments to PayPal and Coinbase &lt;em&gt;must&lt;/em&gt; be putting others off a donation
entirely.&lt;/p&gt;
&lt;p&gt;Number two?  That it returns.  I know I’ve moaned a couple of times in this
document, but that is the joy of puzzles.  If they’re not annoying you then
they’re not challenging enough.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I actually &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form"&gt;EBNF&lt;/a&gt;’d the spec in my editor to pin down the rules from the
prose.  In part because my editor is configured with snippets to quickly
hammer out &lt;abbr title="Extended Backus–Naur Form"&gt;EBNF&lt;/abbr&gt; rules.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;If you know of a way to perform this with the standard library drop me
a &lt;a class="reference external" href="mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com"&gt;mail&lt;/a&gt;, I’d love to hear about it!&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I &lt;em&gt;literally&lt;/em&gt; only have to consider polar coordinates once a year.  Why?
Simple, &lt;abbr title="Advent of Code"&gt;AoC&lt;/abbr&gt; always has a puzzle or two which benefit from using them.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://jnrowe.github.io/articles/advent_of_code_2019.html" rel="alternate"/>
    <summary>With a touch of sadness, I’ve given up on AoC for this year.  I’m writing this
as a journal entry, more for myself than others.  You’ve been warned!|AOC| example runner failure</summary>
    <category term="adventofcode" label="adventofcode"/>
    <category term="coding" label="coding"/>
    <category term="puzzles" label="puzzles"/>
    <published>2019-12-11T00:00:00+00:00</published>
  </entry>
</feed>
